<?xml version="1.0"?>
<doc>
  <assembly>
    <name>PdfPrintingCore</name>
  </assembly>
  <members>
    <member name="T:PdfPrintingNet.LibraryInfo">
      <summary>
            Gives basic information about library and license.
            </summary>
    </member>
    <member name="M:PdfPrintingNet.LibraryInfo.LibraryReleaseDate">
      <summary>
            Library release date.
            </summary>
      <returns>Date when library was released.</returns>
    </member>
    <member name="M:PdfPrintingNet.LibraryInfo.LicenseCreationDate(System.String,System.String)">
      <summary>
            Returns license creation date.
            </summary>
      <param name="company">Company key</param>
      <param name="key">License key</param>
      <returns>If company and key are not valid returns null. If license creation date wasn't set returns DateTime.MinValue otherwise returns license creation date.</returns>
    </member>
    <member name="M:PdfPrintingNet.LibraryInfo.LicenseUpgradeValidDate(System.String,System.String)">
      <summary>
            Returns until which date license is valid for upgrade versions.
            </summary>
      <param name="company">Company key</param>
      <param name="key">License key</param>
      <returns>If company and key are not valid returns null. If license upgrade valid date wasn't set returns DateTime.MinValue otherwise returns license upgrade valid date.</returns>
    </member>
    <member name="T:PdfPrintingNet.MultiPdfDocumentPrintSettings">
      <summary>
            Settings for printing multiple documents as single printer job.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.MultiPdfDocumentPrintSettings.JobName">
      <summary>
            Printer Job Name
            </summary>
    </member>
    <member name="P:PdfPrintingNet.MultiPdfDocumentPrintSettings.DocumentList">
      <summary>
            List of PDF Document (and printing settings) which will be printed as single printer job.
            </summary>
    </member>
    <member name="M:PdfPrintingNet.MultiPdfDocumentPrintSettings.#ctor(System.String)">
      <summary>
            Constructor.
            </summary>
      <param name="jobName">Printer job name</param>
    </member>
    <member name="P:PdfPrintingNet.MultiPdfDocumentPrintSettings.PrinterSettings">
      <summary>
            PrinterSettings used for printing PDF Document
            </summary>
    </member>
    <member name="M:PdfPrintingNet.MultiPdfDocumentPrintSettings.Finalize">
      <summary>
            Destructor.
            </summary>
    </member>
    <member name="M:PdfPrintingNet.MultiPdfDocumentPrintSettings.Dispose">
      <summary>
            Dispose and clean.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.SinglePdfDocumentPrintSettings">
      <summary>
            Settings for printing single PDF document. To be used with MultiPdfDocumentPrintSettings
            </summary>
    </member>
    <member name="M:PdfPrintingNet.SinglePdfDocumentPrintSettings.Finalize">
      <summary>
            Destructor.
            </summary>
    </member>
    <member name="M:PdfPrintingNet.SinglePdfDocumentPrintSettings.Dispose">
      <summary>
            Dispose and clean.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.PrinterSettings">
      <summary>
            PrinterSettings used for printing PDF Document. <para />
            NOTE: The <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" /> must match the one used in 
            <see cref="P:PdfPrintingNet.MultiPdfDocumentPrintSettings.PrinterSettings" />, otherwise an exception will be thrown.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.Password">
      <summary>
            Password of PDFDocument
            </summary>
    </member>
    <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.Pages">
      <summary>
            List of pages to be printed. If empty, all pages will be printed.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:PdfPrintingNet.SinglePdfDocumentPrintSettings.Rotation" -->
    <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.RangeType">
      <summary>
            Print just Even, just Odd or both type of pages.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.PrintInColor">
      <summary>
            Print in color?
            </summary>
    </member>
    <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.IsLandscape">
      <summary>
            Is landscape?
            </summary>
    </member>
    <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.IsAutoRotate">
      <summary>
            Autorate content to portrait / landscape based on content and paper size?
            </summary>
    </member>
    <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.IsContentCentered">
      <summary>
            Center content?
            </summary>
    </member>
    <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.PaperSize">
      <summary>
            Printing paper size.
            If not set, default printer settings will be used. <para />
            See also: <see cref="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.PageAutoSize" /></summary>
    </member>
    <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.PaperSource">
      <summary>
            Printing Paper source
            </summary>
    </member>
    <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.PrinterResolution">
      <summary>
            Printing Printer resolution
            </summary>
    </member>
    <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.Scale">
      <summary>
            Content scaling - None, Fit to margins, Shrink to margins or Custom scale
            </summary>
    </member>
    <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.CustomScale">
      <summary>
            Scales the content to the specified value. 
            To be used, the value of <see cref="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.Scale" /> must be set to <see cref="F:PdfPrintingNet.PdfPrint.ScaleTypes.CustomScale" />. 
            Default value is 100%.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.Margins">
      <summary>
            Applies the margins. Units are 1/100 inch (i.e. 100 = 1 inch). 
            Setting <see cref="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.Scale" /> influences the print result. 
            When set to <see cref="F:PdfPrintingNet.PdfPrint.ScaleTypes.None" />, the margins are adjusted (if needed) to preserve the actual size of the print content. 
            And when content is smaller, existing whitespace is considered as part of margin space. 
            For all other values, the print content size is adjusted (if needed) to preserve the specified margins.
            Default value is (0,0,0,0).
            </summary>
    </member>
    <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.PageAutoSize">
      <summary>
            If set to true, automatically sets printer paper size according to page size of each page in the PDF. Size will be set if printer supports that paper size.
            If successful, it will override <see cref="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.PaperSize" /> property.
            Default value is false. It doesnt't have effect in PrintWithAdobe. <para />
            See also: <see cref="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.AllowCustomSize" /></summary>
    </member>
    <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.AllowCustomSize">
      <summary>
            Used only in combination with <see cref="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.PageAutoSize" /> = true.
            If the PDF page size isn't found in the list of available printer paper sizes, it will try to set the custom paper size.
            Most virtual PDF printers support the custom paper size, and most physical printers don't.
            The default value is false.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.Watermark">
      <summary>
            Watermak to be added.
            </summary>
    </member>
    <member name="M:PdfPrintingNet.SinglePdfDocumentPrintSettings.#ctor(System.String,System.String)">
      <summary>
            Print settings for single PDF document.
            </summary>
      <param name="fileName">File name of PDF document</param>
      <param name="password">PDF password (if PDF document is password protected) </param>
    </member>
    <member name="M:PdfPrintingNet.SinglePdfDocumentPrintSettings.#ctor(System.Byte[],System.String)">
      <summary>
            Print settings for single PDF document.
            </summary>
      <param name="fileContent">PDF content</param>
      <param name="password">PDF password (if PDF document is password protected) </param>
    </member>
    <member name="T:PdfPrintingNet.Destination">
      <summary>
            Destination of link in PDF document
            </summary>
    </member>
    <member name="P:PdfPrintingNet.Destination.Type">
      <summary>
            Destination type could be Unsupported, ScrollToPage, LaunchApplication, ExternalDoc, ExecuteUrl
            </summary>
    </member>
    <member name="P:PdfPrintingNet.Destination.Value">
      <summary>
            Destination value - action url or named destination within PDF document.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.Destination.PageNumber">
      <summary>
            Page number of destination PDF page.
            </summary>
    </member>
    <member name="M:PdfPrintingNet.Destination.#ctor(PdfPrintingNet.PdfDestination,PdfPrintingNet.PdfAction)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfPrintingNet.Destination" /> class.
            </summary>
      <param name="destination">The destination within PDF document.</param>
      <param name="action">The action.</param>
    </member>
    <member name="T:PdfPrintingNet.PdfDestination">
      <summary>
            Destination within PDF document.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfDestination.Handle">
      <summary>
            Gets or sets the PdfDestination handle.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfDestination.Name">
      <summary>
            Gets or sets the name of destination.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfDestination.PageNumber">
      <summary>
            Gets or sets the page number of PDF page destination.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.DestinationType">
      <summary>
            Destination type
            </summary>
    </member>
    <member name="F:PdfPrintingNet.DestinationType.ScrollToPage">
      <summary>
            Scroll to page
            </summary>
    </member>
    <member name="F:PdfPrintingNet.DestinationType.LaunchApplication">
      <summary>
            Launch external application
            </summary>
    </member>
    <member name="F:PdfPrintingNet.DestinationType.ExecuteURL">
      <summary>
            Execute URL
            </summary>
    </member>
    <member name="F:PdfPrintingNet.DestinationType.ExternalDoc">
      <summary>
            External document
            </summary>
    </member>
    <member name="F:PdfPrintingNet.DestinationType.Unsupported">
      <summary>
            Unsupported
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfAction">
      <summary>
            Executed action when link is clicked.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfAction.ActionType">
      <summary>
            List of possible Action types.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfAction.ActionType.Unsupported">
      <summary>
            Unsupported action type
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfAction.ActionType.CurrentDoc">
      <summary>
            Go to a destination within current document.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfAction.ActionType.ExternalDoc">
      <summary>
            Go to a destination within another document
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfAction.ActionType.Uri">
      <summary>
            Universal Resource Identifier, including web pages and other Internet based resources
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfAction.ActionType.Application">
      <summary>
            Launch an application or open a file
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfAction.Handle">
      <summary>
            Gets or sets the action handle.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfAction.ActionURL">
      <summary>
            Gets or sets the action URL.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfAction.Destination">
      <summary>
            Gets or sets the destination.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfAction.Type">
      <summary>
            Gets or sets the action type.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfBookmark">
      <summary>
            Pdf bookmark
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfBookmark.Handle">
      <summary>
            Gets or sets the handle.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfBookmark.Title">
      <summary>
            Gets the title.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfBookmark.Children">
      <summary>
            Gets the bookmark children.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfBookmark.Destination">
      <summary>
            Gets the destination.
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfBookmark.#ctor(PdfPrintingNet.PdfDestination,PdfPrintingNet.PdfAction)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfPrintingNet.PdfBookmark" /> class.
            </summary>
      <param name="destination">The destination.</param>
      <param name="action">The action.</param>
    </member>
    <member name="M:PdfPrintingNet.PdfBookmark.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="T:PdfPrintingNet.PdfBookmarkCollection">
      <summary>
            Collection of PdfBookmarks
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfOpenFileStatus">
      <summary>
            Status of Pdf open file
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfOpenFileStatus.PdfOpenFileResult">
      <summary>
            Result of Pdf open file
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfOpenFileStatus.PdfOpenFileResult.OK">
      <summary>
            OK
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfOpenFileStatus.PdfOpenFileResult.PasswordRequired">
      <summary>
            Password required
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfOpenFileStatus.PdfOpenFileResult.InvalidPassword">
      <summary>
            Invalid password
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfOpenFileStatus.PdfOpenFileResult.InvalidPDFFile">
      <summary>
            Invalid PDF file
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfOpenFileStatus.PdfOpenFileResult.FileDoesntExist">
      <summary>
            File doesnt exist
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfOpenFileStatus.PdfOpenFileResult.Cancelled">
      <summary>
            Cancelled
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfOpenFileStatus.PdfOpenFileResult.Error">
      <summary>
            Error
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfOpenFileStatus.Status">
      <summary>
            Gets or sets the status.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfOpenFileStatus.Result">
      <summary>
            Gets or sets the result.
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfOpenFileStatus.#ctor(PdfPrintingNet.PdfOpenFileStatus.PdfOpenFileResult,System.String)">
      <summary>
            Initializes a new instance of the PdfOpenFileStatus class.
            </summary>
      <param name="result">The result.</param>
      <param name="status">The status.</param>
    </member>
    <member name="T:PdfPrintingNet.PdfSaveFileStatus">
      <summary>
            Status of Pdf open file
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfSaveFileStatus.PdfSaveFileResult">
      <summary>
            Result of Pdf open file
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfSaveFileStatus.PdfSaveFileResult.OK">
      <summary>
            OK
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfSaveFileStatus.PdfSaveFileResult.Cancelled">
      <summary>
            Cancelled
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfSaveFileStatus.PdfSaveFileResult.Error">
      <summary>
            Error
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfSaveFileStatus.Status">
      <summary>
            Gets or sets the status.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfSaveFileStatus.Result">
      <summary>
            Gets or sets the result.
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfSaveFileStatus.#ctor(PdfPrintingNet.PdfSaveFileStatus.PdfSaveFileResult,System.String)">
      <summary>
            Initializes a new instance of the PdfSaveFileStatus class.
            </summary>
      <param name="result">The result</param>
      <param name="status">The status</param>
    </member>
    <member name="T:PdfPrintingNet.DocumentPermissions">
      <summary>
            Document Permissions
            </summary>
    </member>
    <member name="P:PdfPrintingNet.DocumentPermissions.Print">
      <summary>
            Gets or sets a value indicating whether print is allowed.
            </summary>
      <value>
              True if modify is allowed; otherwise, False.
            </value>
    </member>
    <member name="P:PdfPrintingNet.DocumentPermissions.Modify">
      <summary>
            Gets or sets a value indicating whether modify is allowed.
            </summary>
      <value>
              True if modify is allowed; otherwise, False.
            </value>
    </member>
    <member name="P:PdfPrintingNet.DocumentPermissions.Annotations">
      <summary>
            Gets or sets a value indicating whether adding annotations is allowed.
            </summary>
      <value>
              True if annotations are allowed; otherwise, False.
            </value>
    </member>
    <member name="P:PdfPrintingNet.DocumentPermissions.AssembleDocument">
      <summary>
            Gets or sets a value indicating whether assemble document is allowed.
            </summary>
      <value>
              True if assemble document is allowed; otherwise, False.
            </value>
    </member>
    <member name="P:PdfPrintingNet.DocumentPermissions.ExtractContent">
      <summary>
            Gets or sets a value indicating whether extract content is allowed.
            </summary>
      <value>
              True if extract content is allowed; otherwise, False.
            </value>
    </member>
    <member name="P:PdfPrintingNet.DocumentPermissions.ExtractContentAccessibility">
      <summary>
            Gets or sets a value indicating whether extract content accessibility is allowed.
            </summary>
      <value>
            True if extract content accessibility is allowed; otherwise, False.
            </value>
    </member>
    <member name="P:PdfPrintingNet.DocumentPermissions.FormFill">
      <summary>
            Gets or sets a value indicating whether form fill is allowed.
            </summary>
      <value>
              True if form fill is allowed; otherwise, False.
            </value>
    </member>
    <member name="P:PdfPrintingNet.DocumentPermissions.FullQualityPrint">
      <summary>
            Gets or sets a value indicating whether full quality print is allowed.
            </summary>
      <value>
              True if full quality print is allowed; otherwise, false.
            </value>
    </member>
    <member name="T:PdfPrintingNet.PdfMatch">
      <summary>
            Represents a text search result match.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfMatch.Location">
      <summary>
            Top-left position of found search match.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfMatch.Text">
      <summary>
            Text found in search match.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfMatch.Page">
      <summary>
            Page number of search match.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfMatches">
      <summary>
            Represents all the results of a text search operation.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfMatches.StartPage">
      <summary>
            Start page of search.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfMatches.EndPage">
      <summary>
            End page of search.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfMatches.Items">
      <summary>
            Search result items.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPage">
      <summary>
            Page object of a PDF document.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPage.DisplayMatrix">
      <summary>
            The display matrix for the page.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPage.Document">
      <summary>
            The <see cref="T:PdfPrintingNet.PdfPrintDocument" /> to which this page belongs.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPage.Rectangle">
      <summary>
            The page rectangle.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPage.PageNumber">
      <summary>
            The page number.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPage.OriginalSizeFor72DPI">
      <summary>
            The original size for 72 DPI
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPage.SizeForCustomDPI">
      <summary>
            The size for custom DPI
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPage.PageSizeStrValue">
      <summary>
            The page size as a string value, based on <see cref="P:PdfPrintingNet.PdfPage.OriginalSizeFor72DPI" /></summary>
    </member>
    <member name="M:PdfPrintingNet.PdfPage.GetAllImagesFromPage">
      <summary>
            Returns the images from this page.
            </summary>
      <returns>Images if everything is OK.</returns>
    </member>
    <member name="T:PdfPrintingNet.PdfPrintDocument">
      <summary>
            Provides functionality for working with a PDF document.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintDocument.Pages">
      <summary>
            Pages in this PDF document.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintDocument.FileName">
      <summary>
            File name from which this instance originated. 
            Will be blank if originated from stream.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintDocument.FileContent">
      <summary>
            File stream from which this instance originated. 
            Will be null if originated from file name.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintDocument.FileSize">
      <summary>
            File size of PDF document.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintDocument.Password">
      <summary>
            Password for the PDF document. 
            Can be empty.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintDocument.Bookmarks">
      <summary>
            Bookmarks stored in this PdfFile.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintDocument.DocumentPermissions">
      <summary>
            Document permissions for this PDF.
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfPrintDocument.GetPermissionProperties">
      <summary>
            Gets the document permissions for this PDF.
            </summary>
      <returns>Permissions and values</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrintDocument.GetFileVersion">
      <summary>
            Gets the PDF file version.
            </summary>
      <returns>PDF file version</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrintDocument.GetPDFProperty(System.String)">
      <summary>
            Gets the data for the specified property.
            </summary>
      <param name="property">Property for which to get data</param>
      <returns>PDF property data</returns>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintDocument.DocumentProperties">
      <summary>
            Gets the document properties.
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfPrintDocument.GetText(System.Int32)">
      <summary>
            Gets the text from the specified page.
            </summary>
      <param name="pageNumber">Number of page from which to get text</param>
      <returns>Page text</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrintDocument.Search(System.String,System.Boolean,System.Boolean)">
      <summary>
            Searches the PDF for the specified text.
            </summary>
      <param name="text">Text to search for</param>
      <param name="matchCase">Match case</param>
      <param name="wholeWord">Match whole word</param>
      <returns>Text search matches</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrintDocument.Search(System.String,System.Boolean,System.Boolean,System.Int32)">
      <summary>
            Searches the PDF for the specified text.
            </summary>
      <param name="text">Text to search for</param>
      <param name="matchCase">Match case</param>
      <param name="wholeWord">Match whole word</param>
      <param name="page">Page on which to search</param>
      <returns>Text search matches</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrintDocument.Search(System.String,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Searches the PDF for the specified text.
            </summary>
      <param name="text">Text to search for</param>
      <param name="matchCase">Match case</param>
      <param name="wholeWord">Match whole word</param>
      <param name="startPage">Page on which to start search</param>
      <param name="endPage">Page on which to end search</param>
      <returns>Text search matches</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrintDocument.GetAllImagesFromPage(System.Int32)">
      <summary>
            Returns the images from the page in the PDF file.
            </summary>
      <param name="pageNumber">PDF page number</param>
      <returns>Images if everything is OK, exception if something went wrong.</returns>
    </member>
    <member name="T:PdfPrintingNet.PdfPrintImageSettings">
      <summary>
            Provides image settings to use for BMP, GIF, JPG/JPEG, PNG and TIFF files.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettings.FromPage">
      <summary>
            Gets or sets the from PDF page. <para />
            Note: When working with a single page, set <see cref="P:PdfPrintingNet.PdfPrintImageSettings.ToPage" /> to same value.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettings.ToPage">
      <summary>
            Gets or sets the to PDF page. <para />
            Note: When working with a single page, set <see cref="P:PdfPrintingNet.PdfPrintImageSettings.FromPage" /> to same value.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettings.ZoomFactor">
      <summary>
            Gets or sets the zoom factor. 
            Valid values are from 1 to 10. If omitted value 5 is used. Value 5 is the closest one to original PDF page size.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettings.ResolutionX">
      <summary>
            Gets or sets the X Resolution of the output image.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettings.ResolutionY">
      <summary>
            Gets or sets the Y Resolution of the output image.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettings.ColorType">
      <summary>
            Gets or sets the Color type - BW, Gray, Color, Same as in the PDF.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettings.Quality">
      <summary>
            Gets or sets the image quality in % (between 0 and 100).
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettings.ImageType">
      <summary>
            Gets or sets the image type of output image file.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettings.ColorBits">
      <summary>
            Gets or sets the color bits.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettings.CheckPdfFile">
      <summary>
            Gets or sets the value to check if PDF file and page number are valid.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrintImageSettingsBmp">
      <summary>
            Provides image settings to use for BMP files.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettingsBmp.FromPage">
      <summary>
            Gets or sets the from PDF page. <para />
            Note: When working with a single page, set <see cref="P:PdfPrintingNet.PdfPrintImageSettingsBmp.ToPage" /> to same value.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettingsBmp.ToPage">
      <summary>
            Gets or sets the to PDF page. <para />
            Note: When working with a single page, set <see cref="P:PdfPrintingNet.PdfPrintImageSettingsBmp.FromPage" /> to same value.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettingsBmp.ZoomFactor">
      <summary>
            Gets or sets the zoom factor. 
            Valid values are from 1 to 10. If omitted value 5 is used. Value 5 is the closest one to original PDF page size.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettingsBmp.CheckPdfFile">
      <summary>
            Gets or sets the value to check if PDF file and page number are valid.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettingsBmp.DpiX">
      <summary>
            Gets or sets the DPI resolution X value.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettingsBmp.DpiY">
      <summary>
            Gets or sets the DPI resolution Y value.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrintImageSettingsTiff">
      <summary>
            Provides image settings to use for TIFF files.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettingsTiff.FromPage">
      <summary>
            Gets or sets the from PDF page. <para />
            Note: When working with a single page, set <see cref="P:PdfPrintingNet.PdfPrintImageSettingsTiff.ToPage" /> to same value.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettingsTiff.ToPage">
      <summary>
            Gets or sets the to PDF page. <para />
            Note: When working with a single page, set <see cref="P:PdfPrintingNet.PdfPrintImageSettingsTiff.FromPage" /> to same value.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettingsTiff.ZoomFactor">
      <summary>
            Gets or sets the zoom factor. 
            Valid values are from 1 to 10. If omitted value 5 is used. Value 5 is the closest one to original PDF page size.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettingsTiff.ResolutionX">
      <summary>
            Gets or sets the X Resolution of the output image.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettingsTiff.ResolutionY">
      <summary>
            Gets or sets the Y Resolution of the output image.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettingsTiff.ColorType">
      <summary>
            Gets or sets the Color type - BW, Gray, Color, Same as in the PDF.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettingsTiff.TiffCompression">
      <summary>
            Gets or sets the compression used in TIFF image.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintImageSettingsTiff.ColorBits">
      <summary>
            Gets or sets the color bits.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrint">
      <summary>
            PdfPrint
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.PageAutoSize">
      <summary>
            If set to true, automatically sets printer paper size according to page size of each page in the PDF. Size will be set if printer supports that paper size.
            If successful, it will override <see cref="P:PdfPrintingNet.PdfPrint.PaperSize" /> property.
            Default value is false. It doesnt't have effect in PrintWithAdobe. <para />
            See also: <see cref="P:PdfPrintingNet.PdfPrint.AllowCustomSize" /></summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.PaperSourceTrayInfo">
      <summary>
            List of paper source tray names and supported page sizes for that tray.
            It must be manully set.        
            It is used in combination when PageAutoSize doesn't work on its own.
            It is ignored if PageAutoSize = false.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.AllowCustomSize">
      <summary>
            Used only in combination with <see cref="P:PdfPrintingNet.PdfPrint.PageAutoSize" /> = true.
            If the PDF page size isn't found in the list of available printer paper sizes, it will try to set the custom paper size.
            Most virtual PDF printers support the custom paper size, and most physical printers don't.
            The default value is false.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:PdfPrintingNet.PdfPrint.Rotation" -->
    <member name="P:PdfPrintingNet.PdfPrint.IsContentCentered">
      <summary>
            If set to true, it will center content in standard Print method. It doesn't have effect in PrintWithAdobe method.
            Default value is True.        
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.CheckPrinterExistence">
      <summary>
            If set to false, it will not check for printer name existence if the non-default printer is used.
            This is useful in a situation where checking of the printer existence is slow due to many printers or some network printer.
            Default value is true.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.Watermark">
      <summary>
            Watermark to be printed (it can be Image or Text).
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.UseOldPrintingSystem">
      <summary>
            This uses .NET built-in printing API. It is (much) slower for some printers, but for some printers this is the only way it will work.
            Default value is false.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.Collate">
      <summary>
            If set to true, it will collate the pages.
            If set to false, it will not collate the pages.
            If not set, it will use the printer default settings.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.PrinterName">
      <summary>
            Name of the printer used for printing.
            If not set, it will use the default printer.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.Scale">
      <summary>
            If set, it will scale the page according to the chosen scale type.
            If not set, it will use the Shrink scaling type.
            If PrintWithAdobe method both Shrink and FitToMargins behaves like Shrink.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.CustomScale">
      <summary>
            If set, it will scale the page according to the specified value. 
            To be used, <see cref="P:PdfPrintingNet.PdfPrint.Scale" /> must be set to <see cref="F:PdfPrintingNet.PdfPrint.ScaleTypes.CustomScale" />. 
            Default value is 100%.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.Margins">
      <summary>
            If set, it will apply the margins. Units are 1/100 inch (i.e. 100 = 1 inch). 
            Setting <see cref="P:PdfPrintingNet.PdfPrint.Scale" /> influences the print result. 
            When set to <see cref="F:PdfPrintingNet.PdfPrint.ScaleTypes.None" />, the margins are adjusted (if needed) to preserve the actual size of the print content. 
            If opposite margins are set, their values are canceled out, applying only the remaining value (if any). 
            If non-opposite margins are set, their value positions ("pushes") the content. 
            For all other <see cref="P:PdfPrintingNet.PdfPrint.Scale" /> values, the print content size is adjusted (if needed) to preserve the specified margins.
            Default value is (0,0,0,0).
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.Pages">
      <summary>
            Defines the pages that are to be printed.
            Pages and page intervals can be specified explicitly (ex.: 1,2,3,4), using ranges (ex.: 1-4), 
            and in forward (ex.: 1-4,5,6), reverse (ex.: 6,5,4-1) or mixed order (ex. 5,1-4,6).
            If not set, all pages will be printed.
            If PrintWithAdobe method is used, Pages can't have more than one interval defined.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.Copies">
      <summary>
            Set the number of copies to be printed.
            If not selected, it will use the printer default settings.
            When used for multi document printing, it represents the number of copies for the entire printer job.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.InverseForm">
      <summary>
            It forces content of AdobeForm to be rendered before the page. 
            Needed in some rare cases.
            It doesn't have effect in PrintWithAdobe method.
            Default is false.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DuplexType">
      <summary>
            Duplex type used in printing.
            If not set, it will use the printer default settings.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.SettingDialog">
      <summary>
            Use the printer settings dialog.
            If not set, it will not use the printer settings dialog.
            </summary>
      <remarks>NOTE: Will not work if not used in Windows desktop environment</remarks>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.PrintInColor">
      <summary>
            If set to true, it will print in color.
            If set to false, it will print as grayscale.
            If not set, it will use the printer default settings.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.IsLandscape">
      <summary>
            If set to true, it will print as landscape if IsAutoRotate = false. 
            If set to false, it will print as portrait if IsAutoRotate = false.
            If not set, it will use the printer default settings.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.IsAutoRotate">
      <summary>
            If set to true, it will override selected value for IsLandscape and it will set orientation to landscape or portrait based on the content width / height.
            If not set, selected value for IsLandscape will be used. 
            It doesn't have effect in PrintWithAdobe method.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.PaperSize">
      <summary>
            What type of paper size to use?
            If not set, it will use the printer default settings. <para />
            See also: <see cref="P:PdfPrintingNet.PdfPrint.PageAutoSize" /></summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.PaperSource">
      <summary>
            Paper source used for printing.
            If not set, it will use the printer default settings.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.PrinterResolution">
      <summary>
            Printer resolution used for printing.
            If not set, it will use the printer default settings.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.RangeType">
      <summary>
            Range type.
            If not set, it will print both even and odd pages in the selected range interval.
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.CancelCurrentPrinting">
      <summary>
            Cancels the current printing.
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.#ctor(System.String,System.String)">
      <summary>
            Creates the PDFPrint object. If company name or license key is empty string or company name / license keys are not valid, it will behave as demo.
            </summary>
      <param name="companyName">Company name of the license owner.</param>
      <param name="licenseKey">License key</param>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.LoadDocument(System.String,System.String)">
      <summary>
            Loads the specified file into an in-memory <see cref="T:PdfPrintingNet.PdfPrintDocument" /> document.
            </summary>
      <param name="fileName">File to load</param>
      <param name="password">Password (if needed)</param>
      <returns>
      </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.LoadDocument(System.Byte[],System.String)">
      <summary>
            Loads the specified stream into an in-memory <see cref="T:PdfPrintingNet.PdfPrintDocument" /> document.
            </summary>
      <param name="fileContent">Stream to load</param>
      <param name="password">Password (if needed)</param>
      <returns>
      </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetText(System.String,System.Int32)">
      <summary>
            Return text from PDF page.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="pageNumber">PDF page number</param>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetText(System.String,System.String,System.Int32)">
      <summary>
            Return text from PDF page.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="password">Password - pdf file password. </param>
      <param name="pageNumber">PDF page number</param>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetText(System.Byte[],System.Int32)">
      <summary>
            Return text from PDF page.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="pageNumber">PDF page number</param>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetText(System.Byte[],System.String,System.Int32)">
      <summary>
            Return text from PDF page.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="password">Password - pdf file password. </param>
      <param name="pageNumber">PDF page number</param>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetPdfPageSize(System.String,System.Int32)">
      <summary>
            Returns the width and height(in inches) of the page in the PDF file.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="pageNumber">PDF page number</param>
      <returns>Width and height (in inches) of selected page, exception in case of error.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetPdfPageSize(System.String,System.Int32,System.String)">
      <summary>
            Returns the width and height(in inches) of the page in the PDF file.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="pageNumber">PDF page number</param>
      <param name="password">Password - pdf file password. </param>
      <returns>Width and height (in inches) of selected page, exception in case of error.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetPdfPageSize(System.Byte[],System.Int32)">
      <summary>
            Returns the width and height(in inches) of the page in the PDF file.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="pageNumber">PDF page number</param>
      <returns>Width and height (in inches) of selected page, exception in case of error.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetPdfPageSize(System.Byte[],System.Int32,System.String)">
      <summary>
            Returns the width and height(in inches) of the page in the PDF file.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="pageNumber">PDF page number</param>
      <param name="password">Password - pdf file password. </param>
      <returns>Width and height (in inches) of selected page, exception in case of error.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetNumberOfPages(System.String)">
      <summary>
            Returns the number of pages in the PDF file.
            <param name="fileName">PDF file name</param><returns>Number of pages in the PDF file, exception in case of error.</returns></summary>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetNumberOfPages(System.String,System.String)">
      <summary>
            Returns the number of pages in the PDF file.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="password">Password - pdf file password. </param>
      <returns>Number of pages in the PDF file, exception in case of error.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetNumberOfPages(System.Byte[])">
      <summary>
            Returns the number of pages in the PDF document.
            </summary>
      <param name="pdfArray">PDF content</param>
      <returns>Number of pages in the PDF document, exception in case of error.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetNumberOfPages(System.Byte[],System.String)">
      <summary>
            Returns the number of pages in the PDF document.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="password">Password - pdf document password </param>
      <returns>Number of pages in the PDF document, exception in case of error.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.String,System.String,System.Int32)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Output image file name</param>
      <param name="pageNumber">PDF page number</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.String,System.String,System.Int32,System.Int32)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Output image file name</param>
      <param name="pageNumber">PDF page number</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.String,System.String,System.Int32,System.Int32,System.Single,System.Single)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Output image file name</param>
      <param name="pageNumber">PDF page number</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.String,System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Output image file name</param>
      <param name="pageNumber">PDF page number</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.String,System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int32)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Output image file name</param>
      <param name="pageNumber">PDF page number</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
      <param name="quality">Image quality in % (between 0 and 100)</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.String,System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int32,System.String)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Output image file name</param>
      <param name="pageNumber">PDF page number</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
      <param name="quality">Image quality in % (between 0 and 100)</param>
      <param name="password">PDF Password - pdf file password</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.String,System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int32,System.String,PdfPrintingNet.PdfPrint.ImageType)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Output image file name</param>
      <param name="pageNumber">PDF page number</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
      <param name="quality">Image quality in % (between 0 and 100)</param>
      <param name="password">PDF Password - pdf file password</param>
      <param name="imageType">Image type of output image file</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.String,System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String,PdfPrintingNet.PdfPrint.ImageType,System.Boolean)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Output image file name</param>
      <param name="pageNumber">PDF page number</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
      <param name="quality">Image quality in % (between 0 and 100)</param>
      <param name="password">PDF Password - pdf file password</param>
      <param name="imageType">Image type of output image file</param>
      <param name="checkPDFFile">Check if PDF file and page number is valid</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.String,System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String,PdfPrintingNet.PdfPrint.ImageType,System.Boolean,PdfPrintingNet.PdfPrint.ColorBitsType)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Output image file name</param>
      <param name="pageNumber">PDF page number</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
      <param name="quality">Image quality in % (between 0 and 100)</param>
      <param name="password">PDF Password - pdf file password</param>
      <param name="imageType">Image type of output image file</param>
      <param name="checkPDFFile">Check if PDF file and page number is valid</param>
      <param name="colorBits">24 or 32 bits per pixel for the image in color.Ignored if a selected color type is BW or Gray.The default is 32 bits.</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.Byte[],System.String,System.Int32)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Output image file name</param>
      <param name="pageNumber">PDF page number</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.Byte[],System.String,System.Int32,System.Int32)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Output image file name</param>
      <param name="pageNumber">PDF page number</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.Byte[],System.String,System.Int32,System.Int32,System.Single,System.Single)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Output image file name</param>
      <param name="pageNumber">PDF page number</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.Byte[],System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Output image file name</param>
      <param name="pageNumber">PDF page number</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.Byte[],System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Output image file name</param>
      <param name="pageNumber">PDF page number</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
      <param name="quality">Image quality in % (between 0 and 100)</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.Byte[],System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Output image file name</param>
      <param name="pageNumber">PDF page number</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
      <param name="quality">Image quality in % (between 0 and 100)</param>
      <param name="password">PDF Password - pdf file password</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.Byte[],System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String,PdfPrintingNet.PdfPrint.ImageType)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Output image file name</param>
      <param name="pageNumber">PDF page number</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
      <param name="quality">Image quality in % (between 0 and 100)</param>
      <param name="password">PDF Password - pdf file password</param>
      <param name="imageType">Image type of output image file</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.Byte[],System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String,PdfPrintingNet.PdfPrint.ImageType,System.Boolean)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Output image file name</param>
      <param name="pageNumber">PDF page number</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
      <param name="quality">Image quality in % (between 0 and 100)</param>
      <param name="password">PDF Password - pdf file password</param>
      <param name="imageType">Image type of output image file</param>
      <param name="checkPDFFile">Check if PDF file and page number is valid</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.Byte[],System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String,PdfPrintingNet.PdfPrint.ImageType,System.Boolean,PdfPrintingNet.PdfPrint.ColorBitsType)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Output image file name</param>
      <param name="pageNumber">PDF page number</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
      <param name="quality">Image quality in % (between 0 and 100)</param>
      <param name="password">PDF Password - pdf file password</param>
      <param name="imageType">Image type of output image file</param>
      <param name="checkPDFFile">Check if PDF file and page number is valid</param>
      <param name="colorBits">Color bits</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(PdfPrintingNet.PdfPrintDocument,System.String,PdfPrintingNet.PdfPrintImageSettings)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfDocument">PDF document</param>
      <param name="outputFileName">Output image file name</param>
      <param name="imageSettings">Image settings to use</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(PdfPrintingNet.PdfPrintDocument,System.IO.Stream,PdfPrintingNet.PdfPrintImageSettings)">
      <summary>
            Saves pdf page as an image. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfDocument">PDF document</param>
      <param name="stream">Memory stream to write to - exception thrown if null</param>
      <param name="imageSettings">Image settings to use</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.String,System.String)">
      <summary>
            Saves all pdf pages as images. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Image output file name</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.String,System.String,System.Int32)">
      <summary>
            Saves multiple pdf pages as images starting with fromPage. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.String,System.String,System.Int32,System.Int32)">
      <summary>
            Saves multiple pdf pages as images in the range fromPage and toPage. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.String,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
      <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType)">
      <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64)">
      <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
      <param name="quality">Image quality in % (between 0 and 100)</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String)">
      <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
      <param name="quality">Image quality in % (between 0 and 100)</param>
      <param name="password">PDF Password - if pdf file is password protected.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String,PdfPrintingNet.PdfPrint.ImageType)">
      <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
      <param name="quality">Image quality in % (between 0 and 100)</param>
      <param name="password">PDF Password - if pdf file is password protected.</param>
      <param name="imageType">Image type of output image file.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String,PdfPrintingNet.PdfPrint.ImageType,PdfPrintingNet.PdfPrint.ColorBitsType)">
      <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
      <param name="quality">Image quality in % (between 0 and 100)</param>
      <param name="password">PDF Password - if pdf file is password protected.</param>
      <param name="imageType">Image type of output image file.</param>
      <param name="colorBits">24 or 32 bits per pixel for the image in color.Ignored if a selected color type is BW or Gray.The default is 32 bits.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.Byte[],System.String)">
      <summary>
            Saves all pdf pages as images. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Image output file name</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.Byte[],System.String,System.Int32)">
      <summary>
            Saves pdf pages as images from page. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG. 
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.Byte[],System.String,System.Int32,System.Int32)">
      <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.Byte[],System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
      <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType)">
      <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64)">
      <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
      <param name="quality">Image quality in % (between 0 and 100)</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String)">
      <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
      <param name="quality">Image quality in % (between 0 and 100)</param>
      <param name="password">PDF Password - if pdf file is password protected.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String,PdfPrintingNet.PdfPrint.ImageType)">
      <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
      <param name="quality">Image quality in % (between 0 and 100)</param>
      <param name="password">PDF Password - if pdf file is password protected.</param>
      <param name="imageType">Image type of output image file.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String,PdfPrintingNet.PdfPrint.ImageType,PdfPrintingNet.PdfPrint.ColorBitsType)">
      <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
      <param name="quality">Image quality in % (between 0 and 100)</param>
      <param name="password">PDF Password - if pdf file is password protected.</param>
      <param name="imageType">Image type of output image file.</param>
      <param name="colorBits">24 or 32 bits per pixel for the image in color.Ignored if a selected color type is BW or Gray.The default is 32 bits.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(PdfPrintingNet.PdfPrintDocument,System.String,PdfPrintingNet.PdfPrintImageSettings)">
      <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIF/TIFF, GIF, JPG/JPEG and PNG.
            </summary>
      <param name="pdfDocument">PDF document</param>
      <param name="outputFileName">Output image file name</param>
      <param name="imageSettings">Image settings to use</param>
      <returns>Status, if unexpected error returns exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.String,System.String)">
      <summary>
            Saves all PDF pages in one multipage TIFF file.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Image output file name</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.String,System.String,System.Int32)">
      <summary>
            Saves PDF pages starting with fromPage in one multipage TIFF file.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.String,System.String,System.Int32,System.Int32)">
      <summary>
            Saves PDF pages in one multipage TIFF file.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.String,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Saves PDF pages in one multipage TIFF file.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
      <summary>
            Saves PDF pages in one multipage TIFF file.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType)">
      <summary>
            Saves PDF pages in one multipage TIFF file.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.String)">
      <summary>
            Saves PDF pages in one multipage TIFF file.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
      <param name="password">PDF Password - if pdf file is password protected.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.String,PdfPrintingNet.PdfPrint.TiffCompression)">
      <summary>
            Saves PDF pages in one multipage TIFF file.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
      <param name="password">PDF Password - if pdf file is password protected.</param>
      <param name="tiffCompression">TiffCompression - Compression used in TIFF image.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.String,PdfPrintingNet.PdfPrint.TiffCompression,PdfPrintingNet.PdfPrint.ColorBitsType)">
      <summary>
            Saves PDF pages in one multipage TIFF file.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
      <param name="password">PDF Password - if pdf file is password protected.</param>
      <param name="tiffCompression">TiffCompression - Compression used in TIFF image.</param>
      <param name="colorBits">24 or 32 bits per pixel for the image in color.Ignored if a selected color type is BW or Gray.The default is 32 bits.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.Byte[],System.String)">
      <summary>
            Saves all PDF pages in one multipage TIFF file.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Image output file name</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.Byte[],System.String,System.Int32)">
      <summary>
            Saves PDF pages starting with fromPage in one multipage TIFF file.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.Byte[],System.String,System.Int32,System.Int32)">
      <summary>
            Saves PDF pages in one multipage TIFF file.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.Byte[],System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Saves PDF pages in one multipage TIFF file.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
      <summary>
            Saves PDF pages in one multipage TIFF file.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType)">
      <summary>
            Saves PDF pages in one multipage TIFF file.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.String)">
      <summary>
            Saves PDF pages in one multipage TIFF file.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
      <param name="password">PDF Password - if pdf file is password protected.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.String,PdfPrintingNet.PdfPrint.TiffCompression)">
      <summary>
            Saves PDF pages in one multipage TIFF file.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
      <param name="password">PDF Password - if pdf file is password protected.</param>
      <param name="tiffCompression">TiffCompression - Compression used in TIFF image.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.String,PdfPrintingNet.PdfPrint.TiffCompression,PdfPrintingNet.PdfPrint.ColorBitsType)">
      <summary>
            Saves PDF pages in one multipage TIFF file.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="outputFileName">Image output file name</param>
      <param name="fromPage">From PDF page.</param>
      <param name="toPage">To PDF page.</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xResolution">X Resolution of the output image.</param>
      <param name="yResolution">Y resolution of the output image.</param>
      <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
      <param name="password">PDF Password - if pdf file is password protected.</param>
      <param name="tiffCompression">TiffCompression - Compression used in TIFF image.</param>
      <param name="colorBits">24 or 32 bits per pixel for the image in color. Ignored if a selected color type is BW or Gray. The default is 32 bits.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(PdfPrintingNet.PdfPrintDocument,System.String,PdfPrintingNet.PdfPrintImageSettingsTiff)">
      <summary>
            Saves PDF pages in one multipage TIFF file.
            </summary>
      <param name="pdfDocument">PDF document</param>
      <param name="outputFileName">Output image file name</param>
      <param name="imageSettings">Image settings to use</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(PdfPrintingNet.PdfPrintDocument,System.IO.Stream,PdfPrintingNet.PdfPrintImageSettingsTiff)">
      <summary>
            Saves PDF pages in one multipage TIFF file.
            </summary>
      <param name="pdfDocument">PDF document</param>
      <param name="stream">Memory stream to write to - exception thrown if null</param>
      <param name="imageSettings">Image settings to use</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.IsPasswordProtected(System.String)">
      <summary>
            Checks if the PDF file is password protected.
            </summary>
      <param name="fileName">PDF file name</param>
      <returns>True if PDF file is password protected, otherwise false.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.IsPasswordProtected(System.Byte[])">
      <summary>
            Checks if the PDF file is password protected.
            </summary>
      <param name="pdfArray">PDF byte array content</param>
      <returns>True if PDF file is password protected, otherwise false.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.IsSupportedFile(System.String)">
      <summary>
            Checks if the file is a valid PDF
            </summary>
      <param name="fileName">PDF file name</param>
      <returns>True if the file is a valid PDF, otherwise false.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.IsSupportedFile(System.Byte[])">
      <summary>
            Checks if the file is a valid PDF.
            </summary>
      <param name="pdfArray">PDF content</param>
      <returns>True if the file is a valid PDF, otherwise false.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.IsValidPassword(System.String,System.String)">
      <summary>
            Checks if the password is valid.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="password">PDF password</param>
      <returns>True if the password is valid, otherwise false.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.IsValidPassword(System.Byte[],System.String)">
      <summary>
            Checks if the password is valid.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="password">PDF password</param>
      <returns>True if the password is valid, otherwise false.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.String,System.Int32)">
      <summary>
            Returns bitmap from the pdf page.
            </summary>
      <param name="fileName">PDF filename</param>
      <param name="pageNumber">Page number</param>
      <returns>Bitmap if everything is OK, exception if something went wrong </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns bitmap from the pdf page.
            </summary>
      <param name="fileName">PDF filename</param>
      <param name="pageNumber">Page number</param>
      <param name="xDPI">X DPI resolution</param>
      <param name="yDPI">Y DPI resolution</param>
      <returns>Bitmap if everything is OK, exception if something went wrong </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.String,System.Int32,System.Int32)">
      <summary>
            Returns bitmap from the pdf page.
            </summary>
      <param name="fileName">PDF filename</param>
      <param name="pageNumber">Page number</param>
      <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <returns>Bitmap if everything is OK, exception if something went wrong </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns bitmap from the pdf page.
            </summary>
      <param name="fileName">PDF filename</param>
      <param name="pageNumber">Page number</param>
      <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="xDPI">X DPI resolution</param>
      <param name="yDPI">Y DPI resolution</param>
      <returns>Bitmap if everything is OK, exception if something went wrong </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.Byte[],System.Int32)">
      <summary>
            Returns bitmap from the pdf page.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="pageNumber">Page number</param>
      <returns>Bitmap if everything is OK, exception if something went wrong </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.Byte[],System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns bitmap from the pdf page.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="pageNumber">Page number</param>
      <param name="xDPI">X DPI resolution</param>
      <param name="yDPI">Y DPI resolution</param>
      <returns>Bitmap if everything is OK, exception if something went wrong </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.String,System.Int32,System.Int32,System.String)">
      <summary>
            Returns bitmap from the pdf page.
            </summary>
      <param name="fileName">PDF filename</param>
      <param name="pageNumber">Page number</param>
      <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="password">PDF password - pdf file password.</param>
      <returns>Bitmap if everything is OK, exception if something went wrong </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>
            Returns bitmap from the pdf page.
            </summary>
      <param name="fileName">PDF filename</param>
      <param name="pageNumber">Page number</param>
      <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="password">PDF password - pdf file password.</param>
      <param name="xDPI">X DPI resolution</param>
      <param name="yDPI">Y DPI resolution</param>
      <returns>Bitmap if everything is OK, exception if something went wrong </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.String,System.Int32,System.Int32,System.String,System.Boolean)">
      <summary>
            Returns bitmap from the pdf page.
            </summary>
      <param name="fileName">PDF filename</param>
      <param name="pageNumber">Page number</param>
      <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="password">PDF password (optional) - if pdf file is password protected.</param>
      <param name="checkPDFFile">Check if PDF file and page number is valid. </param>
      <returns>Bitmap if everything is OK, exception if something went wrong </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Returns bitmap from the pdf page.
            </summary>
      <param name="fileName">PDF filename</param>
      <param name="pageNumber">Page number</param>
      <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
      <param name="password">PDF password (optional) - if pdf file is password protected.</param>
      <param name="checkPDFFile">Check if PDF file and page number is valid. </param>
      <param name="xDPI">X DPI resolution</param>
      <param name="yDPI">Y DPI resolution</param>
      <returns>Bitmap if everything is OK, exception if something went wrong </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Returns bitmap from the pdf page.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="pageNumber">Page number</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. If omitted value 5 is used. Value 5 is the closest one to original PDF page size.</param>
      <returns>Bitmap if everything is OK, exception if something went wrong </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns bitmap from the pdf page.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="pageNumber">Page number</param>
      <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. If omitted value 5 is used. Value 5 is the closest one to original PDF page size.</param>
      <param name="xDPI">X DPI resolution</param>
      <param name="yDPI">Y DPI resolution</param>
      <returns>Bitmap if everything is OK, exception if something went wrong </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.Byte[],System.Int32,System.Int32,System.String)">
      <summary>
            Returns bitmap from the pdf page.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="pageNumber">Page number</param>
      <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. If omitted value 5 is used. Value 5 is the closest one to original PDF page size.</param>
      <param name="password">PDF password - pdf file password. </param>
      <returns>Bitmap if everything is OK, exception if something went wrong </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.Byte[],System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>
            Returns bitmap from the pdf page.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="pageNumber">Page number</param>
      <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. If omitted value 5 is used. Value 5 is the closest one to original PDF page size.</param>
      <param name="xDPI">X DPI resolution</param>
      <param name="yDPI">Y DPI resolution</param>
      <param name="password">PDF password - pdf file password. </param>
      <returns>Bitmap if everything is OK, exception if something went wrong </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.Byte[],System.Int32,System.Int32,System.String,System.Boolean)">
      <summary>
            Returns bitmap from the pdf page.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="pageNumber">Page number</param>
      <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. If omitted value 5 is used. Value 5 is the closest one to original PDF page size.</param>
      <param name="password">PDF password - pdf file password. </param>
      <param name="checkPDFFile">Check if PDF file and page number is valid.</param>
      <returns>Bitmap if everything is OK, exception if something went wrong </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.Byte[],System.Int32,System.Int32,System.String,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Returns bitmap from the pdf page.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="pageNumber">Page number</param>
      <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. If omitted value 5 is used. Value 5 is the closest one to original PDF page size.</param>
      <param name="password">PDF password - pdf file password. </param>
      <param name="checkPDFFile">Check if PDF file and page number is valid.</param>
      <param name="xDPI">X DPI resolution</param>
      <param name="yDPI">Y DPI resolution</param>
      <returns>Bitmap if everything is OK, exception if something went wrong </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(PdfPrintingNet.PdfPrintDocument,PdfPrintingNet.PdfPrintImageSettingsBmp)">
      <summary>
            Returns bitmap from the pdf page.
            </summary>
      <param name="pdfDocument">PDF document</param>
      <param name="imageSettings">Image settings to use</param>
      <returns>Bitmap if everything is OK, exception if something went wrong </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetBitmapsFromPdfPages(PdfPrintingNet.PdfPrintDocument,PdfPrintingNet.PdfPrintImageSettingsBmp)">
      <summary>
            Returns bitmaps from the pdf pages.
            </summary>
      <param name="pdfDocument">PDF document</param>
      <param name="imageSettings">Image settings to use</param>
      <returns>Bitmaps if everything is OK, exception if something went wrong </returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetAllImagesFromPage(System.String,System.Int32,System.String)">
      <summary>
            Returns the images from the page in the PDF file.
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="pageNumber">PDF page number</param>
      <param name="password">PDF password - PDF file password</param>
      <returns>Images if everything is OK, exception if something went wrong.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetAllImagesFromPage(System.Byte[],System.Int32,System.String)">
      <summary>
            Returns the images from the page in the PDF file.
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="pageNumber">PDF page number</param>
      <param name="password">PDF password - PDF file password</param>
      <returns>Images if everything is OK, exception if something went wrong.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetAllImagesFromPage(PdfPrintingNet.PdfPrintDocument,System.Int32)">
      <summary>
            Returns the images from the page in the PDF file.
            </summary>
      <param name="pdfDocument">PDF document</param>
      <param name="pageNumber">PDF page number</param>
      <returns>Images if everything is OK, exception if something went wrong.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,PdfPrintingNet.PdfWatermark)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="watermark">PdfWatermark to be displayed on printed page.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,PdfPrintingNet.PdfWatermark,System.String)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="watermark">PdfWatermark to be displayed on printed page.</param>
      <param name="printerJobName">Printer job name</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Boolean)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.String)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="password">Password - pdf file password. </param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.String,System.String)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="password">Password - pdf file password. </param>
      <param name="printerJobName">Printer job name</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.String,PdfPrintingNet.PdfWatermark)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="password">Password - pdf file password. </param>
      <param name="watermark">PdfWatermark to be displayed on printed page.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.String,PdfPrintingNet.PdfWatermark,System.String)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="password">Password - pdf file password. </param>
      <param name="watermark">PdfWatermark to be displayed on printed page.</param>
      <param name="printerJobName">Printer job name</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.String,System.Boolean)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="password">Password - pdf file password. </param>
      <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[])">
      <summary>
            Prints the PDF file from byte array
            </summary>
      <param name="pdfArray">PDF content</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],PdfPrintingNet.PdfWatermark)">
      <summary>
            Prints the PDF file from byte array
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="watermark">PdfWatermark to be displayed on printed page.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],PdfPrintingNet.PdfWatermark,System.String)">
      <summary>
            Prints the PDF file from byte array
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="watermark">PdfWatermark to be displayed on printed page.</param>
      <param name="printerJobName">Printer job name</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Boolean)">
      <summary>
            Prints the PDF file from byte array
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.String)">
      <summary>
            Prints the PDF file from byte array
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="password">Password - pdf file password.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.String,PdfPrintingNet.PdfWatermark)">
      <summary>
            Prints the PDF file from byte array
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="password">Password - pdf file password.</param>
      <param name="watermark">PdfWatermark to be displayed on printed page.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.String,System.Boolean)">
      <summary>
            Prints the PDF file from byte array
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="password">Password - pdf file password.</param>
      <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.String,System.String)">
      <summary>
            Prints the PDF file from byte array
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="password">Password - pdf file password</param>
      <param name="printerJobName">Printer job name</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.String,System.String,PdfPrintingNet.PdfWatermark)">
      <summary>
            Prints the PDF file from byte array
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="password">Password - pdf file password</param>
      <param name="printerJobName">Printer job name</param>
      <param name="watermark">PdfWatermark to be displayed on printed page.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.String,System.String,System.Boolean)">
      <summary>
            Prints the PDF file from byte array
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="password">Password - pdf file password</param>
      <param name="printerJobName">Printer job name</param>
      <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Drawing.Printing.PrinterSettings)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="printerSettings">Printer settings</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Drawing.Printing.PrinterSettings,System.String)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="printerSettings">Printer settings</param>
      <param name="password">Password - pdf file password</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Drawing.Printing.PrinterSettings,PdfPrintingNet.PdfWatermark)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="printerSettings">Printer settings</param>
      <param name="watermark">PdfWatermark to be displayed on printed page.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Drawing.Printing.PrinterSettings,PdfPrintingNet.PdfWatermark,System.String)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="printerSettings">Printer settings</param>
      <param name="watermark">PdfWatermark to be displayed on printed page.</param>
      <param name="printerJobName">Printer job name</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Drawing.Printing.PrinterSettings,System.Boolean)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="printerSettings">Printer settings</param>
      <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Drawing.Printing.PrinterSettings,System.String,System.String)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="printerSettings">Printer settings</param>
      <param name="password">Password - pdf file password</param>
      <param name="printerJobName">Printer job name</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Drawing.Printing.PrinterSettings,System.String,PdfPrintingNet.PdfWatermark)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="printerSettings">Printer settings</param>
      <param name="password">Password - pdf file password</param>
      <param name="watermark">PdfWatermark to be displayed on printed page.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Drawing.Printing.PrinterSettings,System.String,PdfPrintingNet.PdfWatermark,System.String)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="printerSettings">Printer settings</param>
      <param name="password">Password - pdf file password</param>
      <param name="watermark">PdfWatermark to be displayed on printed page.</param>
      <param name="printerJobName">Printer job name</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Drawing.Printing.PrinterSettings,System.String,System.Boolean)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="printerSettings">Printer settings</param>
      <param name="password">Password - pdf file password</param>
      <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="printerSettings">Printer settings</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings,PdfPrintingNet.PdfWatermark)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="printerSettings">Printer settings</param>
      <param name="watermark">PdfWatermark to be displayed on printed page.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings,PdfPrintingNet.PdfWatermark,System.String)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="printerSettings">Printer settings</param>
      <param name="watermark">PdfWatermark to be displayed on printed page.</param>
      <param name="printerJobName">Printer job name</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings,System.Boolean)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="printerSettings">Printer settings</param>
      <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings,System.String)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="printerSettings">Printer settings</param>
      <param name="password">Password - pdf file password </param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings,System.String,PdfPrintingNet.PdfWatermark)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="printerSettings">Printer settings</param>
      <param name="password">Password - pdf file password </param>
      <param name="watermark">PdfWatermark to be displayed on printed page.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings,System.String,System.Boolean)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="printerSettings">Printer settings</param>
      <param name="password">Password - pdf file password </param>
      <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings,System.String,System.String)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="printerSettings">Printer settings</param>
      <param name="password">Password - pdf file password </param>
      <param name="printerJobName">Printer job name</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings,System.String,System.String,PdfPrintingNet.PdfWatermark)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="printerSettings">Printer settings</param>
      <param name="password">Password - pdf file password </param>
      <param name="printerJobName">Printer job name</param>
      <param name="watermark">PdfWatermark to be displayed on printed page.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings,System.String,System.String,System.Boolean)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="printerSettings">Printer settings</param>
      <param name="password">Password - pdf file password </param>
      <param name="printerJobName">Printer job name</param>
      <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,PdfPrintingNet.PdfPrintDocumentPrintSettings)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="printSettings">Print settings to use</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.String,PdfPrintingNet.PdfPrintDocumentPrintSettings)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="fileName">PDF file name</param>
      <param name="password">Password - pdf file password. </param>
      <param name="printSettings">Print settings to use</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],PdfPrintingNet.PdfPrintDocumentPrintSettings)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="printSettings">Print settings to use</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.String,PdfPrintingNet.PdfPrintDocumentPrintSettings)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="pdfArray">PDF content</param>
      <param name="password">Password - pdf file password. </param>
      <param name="printSettings">Print settings to use</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(PdfPrintingNet.PdfPrintDocument)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="pdfDocument">PDF document</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(PdfPrintingNet.PdfPrintDocument,PdfPrintingNet.PdfPrintDocumentPrintSettings)">
      <summary>
            Prints the PDF file
            </summary>
      <param name="pdfDocument">PDF document</param>
      <param name="printSettings">Print settings to use</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.GetLibraryVersion">
      <summary>
            Get library version number. Useful in cases where we need library version number and library is merged with some tool with another binary.
            </summary>
      <returns>Library version number</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.OnDocumentPrintPageBegin(PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs)">
      <summary>
            Raises the DocumentPrintPageBegin event.
            </summary>
      <param name="e">DocumentPrintPageEventArgs instance containing the event data.</param>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.OnDocumentPrintPageEnd(PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs)">
      <summary>
            Raises the DocumentPrintPageEnd event.
            </summary>
      <param name="e">DocumentPrintPageEventArgs instance containing the event data.</param>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.OnDocumentPrintBegin(PdfPrintingNet.PdfPrint.DocumentPrintBeginEventArgs)">
      <summary>
            Raises the DocumentPrintBegin event.
            </summary>
      <param name="e">The DocumentPrintBeginEventArgs instance containing the event data.</param>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.OnDocumentPrintEnd(PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs)">
      <summary>
            Raises the DocumentPrintEnd event.
            </summary>
      <param name="e">DocumentPrintEndEventArgs instance containing the event data.</param>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.OnPageSettingsQuery(PdfPrintingNet.PdfPrint.DocumentPageQuerySettingsEventArgs)">
      <summary>
            Raises the OnPageSettingsQuery
            </summary>
      <param name="e">QueryPageSettingsEventArgs e containg the event data.</param>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.OnMultiDocumentPageSettingsQuery(PdfPrintingNet.PdfPrint.MultiDocumentPageQuerySettingsEventArgs)">
      <summary>
            Raises the OnMultiDocumentPageSettingsQuery
            </summary>
      <param name="e">MultiDocumentPageQuerySettingsEventArgs e containg the event data.</param>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.OnMultiDocumentPrintPageBegin(PdfPrintingNet.PdfPrint.MultiDocumentPrintPageEventArgs)">
      <summary>
            Raises the MultiDocumentPrintPageBegin event.
            </summary>
      <param name="e">MultiDocumentPrintPageEventArgs instance containing the event data.</param>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.OnMultiDocumentPrintPageEnd(PdfPrintingNet.PdfPrint.MultiDocumentPrintPageEventArgs)">
      <summary>
            Raises the MultiDocumentPrintPageEnd event.
            </summary>
      <param name="e">MultiDocumentPrintPageEventArgs instance containing the event data.</param>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.OnMultiDocumentPrintBegin(PdfPrintingNet.PdfPrint.MultiDocumentPrintBeginEventArgs)">
      <summary>
            Raises the MultiDocumentPrintBegin event.
            </summary>
      <param name="e">MultiDocumentPrintBeginEventArgs instance containing the event data.</param>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.OnMultiDocumentPrintEnd(PdfPrintingNet.PdfPrint.MultiDocumentPrintEndEventArgs)">
      <summary>
            Raises the MultiDocumentPrintEnd event.
            </summary>
      <param name="e">MultiDocumentPrintEndEventArgs instance containing the event data.</param>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.OnSingleDocumentPrintBegin(PdfPrintingNet.PdfPrint.SingleDocumentPrintBeginEventArgs)">
      <summary>
            Raises the SingleDocumentPrintBegin event.
            </summary>
      <param name="e">SingleDocumentPrintBeginEventArgs instance containing the event data.</param>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.OnSingleDocumentPrintEnd(PdfPrintingNet.PdfPrint.SingleDocumentPrintEndEventArgs)">
      <summary>
            Raises the SingleDocumentPrintEnd event.
            </summary>
      <param name="e">SingleDocumentPrintEndEventArgs instance containing the event data.</param>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.Print(PdfPrintingNet.MultiPdfDocumentPrintSettings)">
      <summary>
            Prints one or more PDF file as single print job
            </summary>
      <param name="multiDocument">Multi document PDF print settings</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.PrintWithAdobe(System.String)">
      <summary>
            Prints the PDF file by sillently using Adobe <para />
            NOTE: Will not work if not used in Windows desktop environment
            </summary>
      <param name="fileName">Full path of PDF file name</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.PrintWithAdobe(System.String,System.String@)">
      <summary>
            Prints the PDF file by sillently using Adobe <para />
            NOTE: Will not work if not used in Windows desktop environment
            </summary>
      <param name="fileName">Full path of PDF file name</param>
      <param name="resultMessage">Result message</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.PrintWithAdobe(System.String,System.Drawing.Printing.PrinterSettings)">
      <summary>
            Prints the PDF file by sillently using Adobe <para />
            NOTE: Will not work if not used in Windows desktop environment
            </summary>
      <param name="fileName">Full path of PDF file name</param>
      <param name="printerSettings">Printer settings</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.PrintWithAdobe(System.String,System.Drawing.Printing.PrinterSettings,System.String@)">
      <summary>
            Prints the PDF file by sillently using Adobe <para />
            NOTE: Will not work if not used in Windows desktop environment
            </summary>
      <param name="fileName">Full path of PDF file name</param>
      <param name="printerSettings">Printer settings</param>
      <param name="resultMessage">Result message</param>
      <returns>Status - in case of an unexpected error it throws an exception.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SerializePrinterSettings(System.Drawing.Printing.PrinterSettings)">
      <summary>
            Serializes the provided <see cref="T:System.Drawing.Printing.PrinterSettings" /> object into a string which can be deserialized during later use.
            </summary>
      <param name="printerSettings">The printer settings object to serialize.</param>
      <returns>Serialized printer settings string if everything is OK, <c>null</c> if provided object is null.</returns>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.DeserializePrinterSettings(System.String)">
      <summary>
            Deserializes the provided printer settings string into a <see cref="T:System.Drawing.Printing.PrinterSettings" /> object.
            </summary>
      <param name="printerSettings">The previously serialized printer settings string to deserialize.</param>
      <returns>Deserialized <see cref="T:System.Drawing.Printing.PrinterSettings" /> object if everything is OK, otherwise <c>null</c>.</returns>
    </member>
    <member name="E:PdfPrintingNet.PdfPrint.DocumentPrintBegin">
      <summary>
            Occurs when document print begins.
            </summary>
    </member>
    <member name="E:PdfPrintingNet.PdfPrint.DocumentPrintEnd">
      <summary>
            Occurs when document print ends.
            </summary>
    </member>
    <member name="E:PdfPrintingNet.PdfPrint.DocumentPrintPageBegin">
      <summary>
            Occurs when document print page begins.
            </summary>
    </member>
    <member name="E:PdfPrintingNet.PdfPrint.DocumentPrintPageEnd">
      <summary>
            Occurs when document print page ends.
            </summary>
    </member>
    <member name="E:PdfPrintingNet.PdfPrint.MultiDocumentPrintBegin">
      <summary>
            Occurs when multi document print begins.
            </summary>
    </member>
    <member name="E:PdfPrintingNet.PdfPrint.MultiDocumentPrintEnd">
      <summary>
            Occurs when multi document print ends.
            </summary>
    </member>
    <member name="E:PdfPrintingNet.PdfPrint.SingleDocumentPrintBegin">
      <summary>
            Occurs when single document print begins.
            </summary>
    </member>
    <member name="E:PdfPrintingNet.PdfPrint.SingleDocumentPrintEnd">
      <summary>
            Occurs when single document print ends.
            </summary>
    </member>
    <member name="E:PdfPrintingNet.PdfPrint.MultiDocumentPrintPageBegin">
      <summary>
            Occurs when multi document print page begins.
            </summary>
    </member>
    <member name="E:PdfPrintingNet.PdfPrint.MultiDocumentPrintPageEnd">
      <summary>
            Occurs when multi document print page ends.
            </summary>
    </member>
    <member name="E:PdfPrintingNet.PdfPrint.PageSettingsQuery">
      <summary>
            Occurs on single page settings query
            </summary>
    </member>
    <member name="E:PdfPrintingNet.PdfPrint.MultiDocumentPageSettingsQuery">
      <summary>
            Occurs on multi document page settings query
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo">
      <summary>
            Event Info of MultiDocument printing 
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.JobName">
      <summary>
            Gets or sets the name of the printer job.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.CurrentDocument">
      <summary>
            Gets or sets the current document.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.CurrentDocumentNumberOfPages">
      <summary>
            Gets or sets the current document number of all pages.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.CurrentDocumentNumberOfPagesForPrint">
      <summary>
            Gets or sets the current document number of pages for print.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.CurrentDocumentOriginalPageNumber">
      <summary>
            Gets or sets the current document original page number.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.CurrentDocumentCurrentPrintPageIndex">
      <summary>
            Gets or sets the index of the current document current print page.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.CurrentDocumentIndex">
      <summary>
            Gets or sets the index of the current document.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.MultiDocumentCurrentPrintPageIndex">
      <summary>
            Gets or sets the index of the multi document current print page.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.NumberOfDocuments">
      <summary>
            Gets or sets the number of documents.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.MultiDocumentTotalNumberOfPages">
      <summary>
            Gets or sets the multi document total number of pages.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.MultiDocumentNumberOfPagesForPrint">
      <summary>
            Gets or sets the multi document number of pages for print.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.PrinterName">
      <summary>
            Gets the name of the printer used to perform the print.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.JobId">
      <summary>
            Printer spooler JobID. If UseOldPrintingSystem = true JobID isn't available (it has value 0).
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrint.DocumentPrintBeginEventArgs">
      <summary>
            Document Print Begin Event Arguments
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.DocumentPrintBeginEventArgs.#ctor(PdfPrintingNet.PdfPrintDocument,System.String,System.Byte[],System.Int32,System.Int32,System.String,System.Int32)">
      <summary>
            Initializes a new instance of the DocumentPrintBeginEventArgs class.
            </summary>
      <param name="document">The document.</param>
      <param name="fileName">Name of the file.</param>
      <param name="content">The content.</param>
      <param name="numberOfPagesInDocument">The number of pages in document.</param>
      <param name="numberOfPagesToPrint">The number of pages to print.</param>
      <param name="printerName">The printer name.</param>
      <param name="jobId">JobId. It doesn't have value for UseOldPrintingSystem == true </param>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintBeginEventArgs.Document">
      <summary>
            Gets or sets the document.
            </summary>
      <value>
            The document.
            </value>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintBeginEventArgs.FileName">
      <summary>
            Gets or sets the name of the file.
            </summary>
      <value>
            The name of the file.
            </value>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintBeginEventArgs.Content">
      <summary>
            Gets or sets the content.
            </summary>
      <value>
            The content.
            </value>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintBeginEventArgs.NumberOfPagesInDocument">
      <summary>
            Gets or sets the number of pages in document.
            </summary>
      <value>
            The number of pages in document.
            </value>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintBeginEventArgs.NumberOfPagesToPrint">
      <summary>
            Gets or sets the number of pages to print.
            </summary>
      <value>
            The number of pages to print.
            </value>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintBeginEventArgs.PrinterName">
      <summary>
            Gets the name of the printer used to perform the print.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintBeginEventArgs.JobId">
      <summary>
            Printer spooler JobID. If UseOldPrintingSystem == true JobID isn't available (it has value 0).
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs">
      <summary>
            Document Print Page Event Arguments
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs.#ctor(PdfPrintingNet.PdfPrintDocument,System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
      <summary>
            Initializes a new instance of the DocumentPrintPageEventArgs class.
            </summary>
      <param name="document">The document.</param>
      <param name="currentPageIndex">Index of the current page.</param>
      <param name="pageNumber">The page number.</param>
      <param name="totalNumberOfPagesToPrint">The total number of pages to print.</param>
      <param name="printerName">The printer name.</param>
      <param name="jobId">JobId</param>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs.Document">
      <summary>
            Gets or sets the document.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs.CurrentPageIndex">
      <summary>
            Gets or sets the index of the current page.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs.PageNumber">
      <summary>
            Gets or sets the page number.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs.TotalNumberOfPagesToPrint">
      <summary>
            Gets or sets the total number of pages to print.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs.PrinterName">
      <summary>
            Gets the name of the printer used to perform the print.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs.JobId">
      <summary>
            Printer spooler JobID. If UseOldPrintingSystem == true JobID isn't available (it has value 0).
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrint.QueryPageSettingsEventArgs">
      <summary>
            Query Page Settings Event Arguments
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.QueryPageSettingsEventArgs.#ctor(PdfPrintingNet.PdfPrintPageSettings,PdfPrintingNet.PdfPrintDocument)">
      <summary>
            Constructor for QueryPageSettingsEventArgs
            </summary>
      <param name="pageSettings">Page setings</param>
      <param name="document">Document</param>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.QueryPageSettingsEventArgs.PageSettings">
      <summary>
            Page settings
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.QueryPageSettingsEventArgs.Document">
      <summary>
            Document
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrint.DocumentPageQuerySettingsEventArgs">
      <summary>
            Document Print Page Event Arguments
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.DocumentPageQuerySettingsEventArgs.#ctor(PdfPrintingNet.PdfPrintDocument,System.String,System.Byte[],System.Int32,System.Int32,System.Int32,PdfPrintingNet.PdfPrint.QueryPageSettingsEventArgs,System.String,System.Int32)">
      <summary>
            Initializes a new instance of the DocumentPrintPageEventArgs class.
            </summary>
      <param name="document">PDF document</param>
      <param name="fileName">Filename of the PDF document</param>
      <param name="content">PDF content</param>
      <param name="currentPageIndex">Index of the current page.</param>
      <param name="pageNumber">The page number.</param>
      <param name="totalNumberOfPagesToPrint">The total number of pages to print.</param>
      <param name="queryPageSettingsEventArgs">Page settings</param>
      <param name="printerName">The printer name.</param>
      <param name="jobId">JobId</param>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPageQuerySettingsEventArgs.Document">
      <summary>
            Gets document
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPageQuerySettingsEventArgs.FileName">
      <summary>
            Gets filename of the PDF document
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPageQuerySettingsEventArgs.Content">
      <summary>
            Gets PDF content
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPageQuerySettingsEventArgs.CurrentPageIndex">
      <summary>
            Gets the index of the current page.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPageQuerySettingsEventArgs.PageNumber">
      <summary>
            Gets the page number.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPageQuerySettingsEventArgs.TotalNumberOfPagesToPrint">
      <summary>
            Gets the total number of pages to print.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPageQuerySettingsEventArgs.QueryPageSettingsEventArgs">
      <summary>
            Gets or sets parent QueryPageSettingsEventArgs
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPageQuerySettingsEventArgs.PrinterName">
      <summary>
            Gets the name of the printer used to perform the print.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPageQuerySettingsEventArgs.JobId">
      <summary>
            Printer spooler JobID. If UseOldPrintingSystem == true JobID isn't available (it has value 0).
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs">
      <summary>
            Document Print End Event Arguments
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs.#ctor(PdfPrintingNet.PdfPrintDocument,System.String,System.Byte[],System.Int32,System.Int32,PdfPrintingNet.PdfPrint.Status,System.String,System.Int32)">
      <summary>
            Initializes a new instance of the DocumentPrintEndEventArgs class.
            </summary>
      <param name="document">The document.</param>
      <param name="fileName">Name of the file.</param>
      <param name="content">The content.</param>
      <param name="numberOfPagesInDocument">The number of pages in document.</param>
      <param name="numberOfPagesPrinted">The number of pages printed.</param>
      <param name="status">The status.</param>
      <param name="printerName">The printer name.</param>
      <param name="jobId">JobId</param>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs.Document">
      <summary>
            Gets or sets the document.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs.FileName">
      <summary>
            Gets or sets the name of the file.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs.Content">
      <summary>
            Gets or sets the content.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs.NumberOfPagesInDocument">
      <summary>
            Gets or sets the number of pages in document.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs.NumberOfPagesPrinted">
      <summary>
            Gets or sets the number of pages printed.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs.Status">
      <summary>
            Gets or sets the status.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs.PrinterName">
      <summary>
            Gets the name of the printer used to perform the print.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs.JobId">
      <summary>
            Printer spooler JobID. If UseOldPrintingSystem == true JobID isn't available (it has value 0).
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrint.SingleDocumentPrintBeginEventArgs">
      <summary>
            Single Document Print Begin Event Arguments
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SingleDocumentPrintBeginEventArgs.#ctor(PdfPrintingNet.PdfPrintDocument,System.String,System.Byte[],PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo)">
      <summary>
            Initializes a new instance of the SingleDocumentPrintBeginEventArgs class.
            </summary>
      <param name="document">The document.</param>
      <param name="fileName">Name of the file.</param>
      <param name="content">The content.</param>
      <param name="multiDocPrintEventInfo">The multi document print event information.</param>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.SingleDocumentPrintBeginEventArgs.Document">
      <summary>
            Gets or sets the document.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.SingleDocumentPrintBeginEventArgs.FileName">
      <summary>
            Gets or sets the name of the file.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.SingleDocumentPrintBeginEventArgs.Content">
      <summary>
            Gets or sets the content.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.SingleDocumentPrintBeginEventArgs.MultiDocPrintEventInfo">
      <summary>
            Gets or sets the multi document print event information.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrint.SingleDocumentPrintEndEventArgs">
      <summary>
            Single Document Print End Event Arguments
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.SingleDocumentPrintEndEventArgs.#ctor(PdfPrintingNet.PdfPrintDocument,System.String,System.Byte[],PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo,System.Int32,PdfPrintingNet.PdfPrint.Status)">
      <summary>
            Initializes a new instance of the SingleDocumentPrintEndEventArgs class.
            </summary>
      <param name="document">The document.</param>
      <param name="fileName">Name of the file.</param>
      <param name="content">The content.</param>
      <param name="multiDocPrintEventInfo">The multi document print event information.</param>
      <param name="numberOfPagesPrinted">The number of pages printed.</param>
      <param name="status">The status.</param>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.SingleDocumentPrintEndEventArgs.Document">
      <summary>
            Gets or sets the document.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.SingleDocumentPrintEndEventArgs.FileName">
      <summary>
            Gets or sets the name of the file.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.SingleDocumentPrintEndEventArgs.Content">
      <summary>
            Gets or sets the content.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.SingleDocumentPrintEndEventArgs.MultiDocPrintEventInfo">
      <summary>
            Gets or sets the multi document print event information.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.SingleDocumentPrintEndEventArgs.NumberOfPagesPrinted">
      <summary>
            Gets or sets the number of pages printed.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.SingleDocumentPrintEndEventArgs.Status">
      <summary>
            Gets or sets the status.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrint.MultiDocumentPrintBeginEventArgs">
      <summary>
            Multi Document Print Begin Event Arguments
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.MultiDocumentPrintBeginEventArgs.#ctor(PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo)">
      <summary>
            Initializes a new instance of the MultiDocumentPrintBeginEventArgs class.
            </summary>
      <param name="multiDocPrintEventInfo">The multi document print event information.</param>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocumentPrintBeginEventArgs.MultiDocPrintEventInfo">
      <summary>
            Gets or sets the multi document print event information.
            </summary>
      <value>
            The multi document print event information.
            </value>
    </member>
    <member name="T:PdfPrintingNet.PdfPrint.MultiDocumentPrintPageEventArgs">
      <summary>
            Multi Document Print Page Event Arguments
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.MultiDocumentPrintPageEventArgs.#ctor(PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo)">
      <summary>
            Initializes a new instance of the MultiDocumentPrintPageEventArgs class.
            </summary>
      <param name="multiDocPrintEventInfo">The multi document print event information.</param>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocumentPrintPageEventArgs.MultiDocPrintEventInfo">
      <summary>
            Gets or sets the multi document print event information.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrint.MultiDocumentPageQuerySettingsEventArgs">
      <summary>
            Document Print Page Event Arguments
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.MultiDocumentPageQuerySettingsEventArgs.#ctor(PdfPrintingNet.PdfPrint.DocumentPageQuerySettingsEventArgs,PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo)">
      <summary>
            Initializes a new instance of the DocumentPrintPageEventArgs class.
            </summary>
      <param name="queryPageSettingsEventArgs">Page settings</param>
      <param name="multiDocPrintEventInfo">The multi document print event information.</param>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocumentPageQuerySettingsEventArgs.DocumentPageQuerySettingsEventArgs">
      <summary>
            Gets or sets parent QueryPageSettingsEventArgs
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocumentPageQuerySettingsEventArgs.MultiDocPrintEventInfo">
      <summary>
            Gets or sets the multi document print event information.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrint.MultiDocumentPrintEndEventArgs">
      <summary>
            Multi Document Print End Event Arguments
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfPrint.MultiDocumentPrintEndEventArgs.#ctor(PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo,System.Int32,PdfPrintingNet.PdfPrint.Status)">
      <summary>
            Initializes a new instance of the MultiDocumentPrintEndEventArgs class.
            </summary>
      <param name="multiDocPrintEventInfo">The multi document print event information.</param>
      <param name="numberOfPagesPrinted">The number of pages printed.</param>
      <param name="status">The status.</param>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocumentPrintEndEventArgs.MultiDocPrintEventInfo">
      <summary>
            Gets or sets the multi document print event information.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocumentPrintEndEventArgs.NumberOfPagesPrinted">
      <summary>
            Gets or sets the number of pages printed.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrint.MultiDocumentPrintEndEventArgs.Status">
      <summary>
            Gets or sets the status.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrint.ScaleTypes">
      <summary>
            Defines available scale types for the page content.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.ScaleTypes.None">
      <summary>
            No scaling. Uses actual size. <para />
            Any content within printer hard margins will not be printed because of printer limitations.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.ScaleTypes.Shrink">
      <summary>
            Shrink content to margins. Shrinks only if oversized, otherwise no scaling performed. <para />
            Content is scaled within printer hard margins.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.ScaleTypes.FitToMargins">
      <summary>
            Fit content within margins. <para />
            Content is scaled within printer hard margins.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.ScaleTypes.CustomScale">
      <summary>
            Scale content based on specified value, set with <see cref="P:PdfPrintingNet.PdfPrint.CustomScale" /> property. <para />
            Content is scaled within printer hard margins.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrint.TiffCompression">
      <summary>
            Compression used in Tiff images 
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.TiffCompression.CompressionCCITT3">
      <summary>
            CCCITT4 compression is mostly used for black and white images - 1 bit images.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.TiffCompression.CompressionCCITT4">
      <summary>
            CCCITT4 compression is mostly used for black and white images - 1 bit images.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.TiffCompression.CompressionLZW">
      <summary>
            LZW compression. Default value.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.TiffCompression.CompressionNone">
      <summary>
            No compression.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "T:PdfPrintingNet.PdfPrint.ColorBitsType" -->
    <member name="F:PdfPrintingNet.PdfPrint.ColorBitsType.Bit24">
      <summary>
            24 bits are used for pixel: 8 bits each are used for the red, green and blue components.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.ColorBitsType.Bit32">
      <summary>
            32 bits are used for pixel: 8 bits each are used for the alpha, red, green, and blue components.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrint.Status">
      <summary>
            Status of PDFPrint operation execution
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.Status.OK">
      <summary>
            Everything is OK.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.Status.FILE_DOESNT_EXIST">
      <summary>
            File doesn't exist.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.Status.CANNOT_PRINT_FILE">
      <summary>
            Cannot print file.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.Status.PRINTER_DOESNT_EXIST">
      <summary>
            Printer doesn't exist.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.Status.INVALID_DEVMOD">
      <summary>
            Invalid printer properties structure.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.Status.NOT_AVAILABLE_PRINTER_PROPERTIES">
      <summary>
            Printer properties are not available.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.Status.CANT_INITIALIZE_PRINTER">
      <summary>
            Can't initialize printer.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.Status.PASSWORD_INVALID">
      <summary>
            Invalid password for password protected PDF.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.Status.INVALID_PDF">
      <summary>
            Not a valid PDF file.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.Status.FILENAME_NOT_SET">
      <summary>
            PDF file name not set.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.Status.PASSWORD_NOT_PROVIDED">
      <summary>
            PDF is password protected and password isn't provided.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.Status.UNKNOWN_ERROR">
      <summary>
            Unknown error.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.Status.INVALID_PRINT_RANGE">
      <summary>
            Invalid print range.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.Status.PAGE_NUMBER_DOESNT_EXIST">
      <summary>
            Page number doesn't exist.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.Status.PRINTING_CANCELLED">
      <summary>
            Printing cancelled.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.Status.INVALID_ADOBE_PRINT_RANGE">
      <summary>
            Invalid adobe print range.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.Status.NOT_32_BIT">
      <summary>
            With Adobe only 32 bit is supported.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.Status.INVALID_IMAGE_TYPE">
      <summary>
            Invalid image type.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.Status.NOT_ENOUGH_MEMORY">
      <summary>
            Not enough memory for printing.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrint.RangeTypes">
      <summary>
            Defines available range options.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.RangeTypes.EvenAndOdd">
      <summary>
            Print even and odd pages within the selected range.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.RangeTypes.JustEven">
      <summary>
            Print only even pages within the selected range.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.RangeTypes.JustOdd">
      <summary>
            Print only odd pages within the selected range.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrint.ImageType">
      <summary>
            Definies available image types.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.ImageType.FindFromFileName">
      <summary>
            Image type will be determined from the output image file name.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.ImageType.BMP">
      <summary>
            Image type will be BMP.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.ImageType.GIF">
      <summary>
            Image type will be GIF.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.ImageType.JPEG">
      <summary>
            Image type will be JPEG.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.ImageType.PNG">
      <summary>
            Image type will be PNG.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.ImageType.TIFF">
      <summary>
            Image type will be TIFF.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrint.ColorType">
      <summary>
            ColorType used for converting pdf pages to images.       
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.ColorType.BlackAndWhite">
      <summary>
            Black and white.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.ColorType.GrayScale">
      <summary>
            Grayscale.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.ColorType.Color">
      <summary>
            Color. 
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfPrint.ColorType.Original">
      <summary>
            The same color type as it already is in the pdf page.
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfPrintPageSettings">
      <summary>
            print page settings
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintPageSettings.Bounds">
      <summary>
            Gets the rectangular area that represents the total area of the page taking into account the Landscape property. Most printers cannot print at the very edge of the page.        
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintPageSettings.Color">
      <summary>
            Gets or sets a value indicating whether the page is printed in color.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintPageSettings.HardMarginX">
      <summary>
            Gets the x-coordinate, in hundredths of an inch, of the hard margin (the physical margin set by the printer) at the left of the page.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintPageSettings.HardMarginY">
      <summary>
            Gets the y-coordinate, in hundredths of an inch, of the hard margin (the physical margin set by the printer) at the top of the page.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintPageSettings.Landscape">
      <summary>
            Gets or sets a value indicating whether the page should be printed in landscape or portrait orientation.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintPageSettings.Margins">
      <summary>
            Gets or sets a value indicating the user defined margins for this page. Units are 1/100 inch (i.e. 100 = 1 inch). 
            Setting <see cref="P:PdfPrintingNet.PdfPrintPageSettings.Scale" /> influences the print result. 
            When set to <see cref="F:PdfPrintingNet.PdfPrint.ScaleTypes.None" />, the margins are adjusted (if needed) to preserve the actual size of the print content. 
            And when content is smaller, existing whitespace is considered as part of margin space. 
            For all other values, the print content size is adjusted (if needed) to preserve the specified margins.
            Default value is (0,0,0,0).
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintPageSettings.PaperSize">
      <summary>
            Paper size
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintPageSettings.PrintableArea">
      <summary>
            A RectangleF representing the length and width, in hundredths of an inch, of the area the printer is capable of printing in. 
            Returns the correct value, whether the page orientation is landscape or portrait.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintPageSettings.PrinterResolution">
      <summary>
             Gets or sets the printer resolution for the page.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintPageSettings.PaperSource">
      <summary>
            Gets or sets a value indicating the paper source (i.e. upper bin).
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintPageSettings.Scale">
      <summary>
            Gets or sets the scale type for the page. 
            If not set, it will use the Shrink scaling type.
            If PrintWithAdobe method both Shrink and FitToMargins behaves like Shrink.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfPrintPageSettings.CustomScale">
      <summary>
            Gets or sets the custom scale to scale the page. 
            To be used, <see cref="P:PdfPrintingNet.PdfPrintPageSettings.Scale" /> must be set to <see cref="F:PdfPrintingNet.PdfPrint.ScaleTypes.CustomScale" />. 
            Default value is 100%.
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfPrintPageSettings.Copy">
      <summary>
            Creates a new object of PdfPrintPageSettings and copies all properties
            </summary>
      <returns>new PdfPrintPageSettings object</returns>
    </member>
    <member name="T:PdfPrintingNet.PdfRotation">
      <summary>
            Rotation of the PDF page. It is applied after PrintOrientation.
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfRotation.Rotate0">
      <summary>
            None rotation
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfRotation.Rotate90">
      <summary>
            90 degrees rotation
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfRotation.Rotate180">
      <summary>
            180 degrees rotation
            </summary>
    </member>
    <member name="F:PdfPrintingNet.PdfRotation.Rotate270">
      <summary>
            R270 degrees rotation
            </summary>
    </member>
    <member name="T:PdfPrintingNet.PdfWatermark">
      <summary>
            Watermark on printed PDF document
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfWatermark.Image">
      <summary>
            If set, it will draw image at X,Y at angle of RotationAngle property.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfWatermark.X">
      <summary>
            Absolute or relative X position. It is related with UseRelativeCoordinates.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfWatermark.Y">
      <summary>
            Absolute or relative Y position. It is related with UseRelativeCoordinates.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfWatermark.UseRelativeCoordinates">
      <summary>
            If set to true than X and Y are in percentage of paper size.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfWatermark.UseRelativeTextSize">
      <summary>
            If set to true than text size is relative to 100% page size. 
            Exampple: if defined font size is 12 than for 50% page size displayed font size will be 6.
            Default is false.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfWatermark.UseRelativeImageSize">
      <summary>
            If set to true than image size is relative to 100% page size.
            Exampple: if defined image size is 120 x 120 than for 50% page size displayed image size will be 60 x 60.
            Default is false.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfWatermark.RotationAngle">
      <summary>
            Rotation angle of watermark.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfWatermark.TextFont">
      <summary>
            Watermark text font used for drawing value of Text property.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfWatermark.Text">
      <summary>
            Is set, it will draw text at X,Y at angle of RotationAngle propery.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfWatermark.TextColor">
      <summary>
            Color of watermark text.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfWatermark.PrintWatermark">
      <summary>
            If true, this watermark will be printed if a PDF with it is printed. Default is true.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfWatermark.IsSet">
      <summary>
            Returns true or false - based on that if Image or Text for watermark is set.
            </summary>
    </member>
    <member name="P:PdfPrintingNet.PdfWatermark.Opacity">
      <summary>
            Opacity value in percentage - 0 is invisible and at 100 isn't transparent at all.
            </summary>
    </member>
    <member name="M:PdfPrintingNet.PdfWatermark.#ctor">
      <summary>
            Constructor. Creates PdfWatermark object with default values.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.Axis">
      <summary>
            This class represents an axis in a chart.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Axis.Clone">
      <summary>
            Creates a deep copy of this object.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Axis.DeepCopy">
      <summary>
            Implements the deep copy of the object.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Axis.Title">
      <summary>
            Gets the title of the axis.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Axis.MinimumScale">
      <summary>
            Gets or sets the minimum value of the axis.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Axis.MaximumScale">
      <summary>
            Gets or sets the maximum value of the axis.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Axis.MajorTick">
      <summary>
            Gets or sets the interval of the primary tick.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Axis.MinorTick">
      <summary>
            Gets or sets the interval of the secondary tick.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Axis.MajorTickMark">
      <summary>
            Gets or sets the type of the primary tick mark.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Axis.MinorTickMark">
      <summary>
            Gets or sets the type of the secondary tick mark.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Axis.TickLabels">
      <summary>
            Gets the label of the primary tick.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Axis.LineFormat">
      <summary>
            Gets the format of the axis line.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Axis.MajorGridlines">
      <summary>
            Gets the primary gridline object.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Axis.MinorGridlines">
      <summary>
            Gets the secondary gridline object.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Axis.HasMajorGridlines">
      <summary>
            Gets or sets, whether the axis has a primary gridline object.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Axis.HasMinorGridlines">
      <summary>
            Gets or sets, whether the axis has a secondary gridline object.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.AxisTitle">
      <summary>
            Represents the title of an axis.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.AxisTitle.#ctor">
      <summary>
            Initializes a new instance of the AxisTitle class.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.AxisTitle.Clone">
      <summary>
            Creates a deep copy of this object.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.AxisTitle.DeepCopy">
      <summary>
            Implements the deep copy of the object.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.AxisTitle.Caption">
      <summary>
            Gets or sets the caption of the title.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.AxisTitle.Font">
      <summary>
            Gets the font of the title.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.AxisTitle.Orientation">
      <summary>
            Gets or sets the orientation of the caption.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.AxisTitle.Alignment">
      <summary>
            Gets or sets the horizontal alignment of the caption.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.AxisTitle.VerticalAlignment">
      <summary>
            Gets or sets the vertical alignment of the caption.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.Chart">
      <summary>
            Represents charts with different types.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Chart.#ctor">
      <summary>
            Initializes a new instance of the Chart class.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Chart.#ctor(PdfEdit.Charting.ChartType)">
      <summary>
            Initializes a new instance of the Chart class with the specified chart type.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Chart.Clone">
      <summary>
            Creates a deep copy of this object.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Chart.DeepCopy">
      <summary>
            Implements the deep copy of the object.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Chart.Type">
      <summary>
            Gets or sets the base type of the chart.
            ChartType of the series can be overwritten.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Chart.Font">
      <summary>
            Gets or sets the font for the chart. This will be the default font for all objects which are
            part of the chart.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Chart.Legend">
      <summary>
            Gets the legend of the chart.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Chart.XAxis">
      <summary>
            Gets the X-Axis of the Chart.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Chart.YAxis">
      <summary>
            Gets the Y-Axis of the Chart.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Chart.ZAxis">
      <summary>
            Gets the Z-Axis of the Chart.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Chart.SeriesCollection">
      <summary>
            Gets the collection of the data series.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Chart.XValues">
      <summary>
            Gets the collection of the values written on the X-Axis.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Chart.PlotArea">
      <summary>
            Gets the plot (drawing) area of the chart.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Chart.DisplayBlanksAs">
      <summary>
            Gets or sets a value defining how blanks in the data series should be shown.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Chart.DataLabel">
      <summary>
            Gets the DataLabel of the chart.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Chart.HasDataLabel">
      <summary>
            Gets or sets whether the chart has a DataLabel.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.ChartFrame">
      <summary>
            Represents the frame which holds one or more charts.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.ChartFrame.#ctor">
      <summary>
            Initializes a new instance of the ChartFrame class.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.ChartFrame.#ctor(PdfEdit.Drawing.XRect)">
      <summary>
            Initializes a new instance of the ChartFrame class with the specified rectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.ChartFrame.Location">
      <summary>
            Gets or sets the location of the ChartFrame.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.ChartFrame.Size">
      <summary>
            Gets or sets the size of the ChartFrame.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.ChartFrame.Add(PdfEdit.Charting.Chart)">
      <summary>
            Adds a chart to the ChartFrame.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.ChartFrame.Draw(PdfEdit.Drawing.XGraphics)">
      <summary>
            Draws all charts inside the ChartFrame.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.ChartFrame.DrawChart(PdfEdit.Drawing.XGraphics)">
      <summary>
            Draws first chart only.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.ChartObject">
      <summary>
            Base class for all chart classes.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.ChartObject.#ctor">
      <summary>
            Initializes a new instance of the ChartObject class.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.DataLabel">
      <summary>
            Represents a DataLabel of a Series
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.DataLabel.#ctor">
      <summary>
            Initializes a new instance of the DataLabel class.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.DataLabel.Clone">
      <summary>
            Creates a deep copy of this object.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.DataLabel.DeepCopy">
      <summary>
            Implements the deep copy of the object.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.DataLabel.Format">
      <summary>
            Gets or sets a numeric format string for the DataLabel.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.DataLabel.Font">
      <summary>
            Gets the Font for the DataLabel.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.DataLabel.Position">
      <summary>
            Gets or sets the position of the DataLabel.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.DataLabel.Type">
      <summary>
            Gets or sets the type of the DataLabel.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.DocumentObject">
      <summary>
            Base class for all chart classes.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.DocumentObject.#ctor">
      <summary>
            Initializes a new instance of the DocumentObject class.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.DocumentObject.#ctor(PdfEdit.Charting.DocumentObject)">
      <summary>
            Initializes a new instance of the DocumentObject class with the specified parent.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.DocumentObject.Clone">
      <summary>
            Creates a deep copy of the DocumentObject. The parent of the new object is null.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.DocumentObject.DeepCopy">
      <summary>
            Implements the deep copy of the object.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.DocumentObject.Parent">
      <summary>
            Gets the parent object.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.DocumentObjectCollection">
      <summary>
            Base class of all collections.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.DocumentObjectCollection.Item(System.Int32)">
      <summary>
            Gets the element at the specified index.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.DocumentObjectCollection.Clone">
      <summary>
            Creates a deep copy of this object.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.DocumentObjectCollection.DeepCopy">
      <summary>
            Implements the deep copy of the object.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.DocumentObjectCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the Array_List or a portion of it to a one-dimensional array.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.DocumentObjectCollection.Clear">
      <summary>
            Removes all elements from the collection.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.DocumentObjectCollection.InsertObject(System.Int32,PdfEdit.Charting.DocumentObject)">
      <summary>
            Inserts an element into the collection at the specified position.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.DocumentObjectCollection.IndexOf(PdfEdit.Charting.DocumentObject)">
      <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.DocumentObjectCollection.RemoveObjectAt(System.Int32)">
      <summary>
            Removes the element at the specified index.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.DocumentObjectCollection.Add(PdfEdit.Charting.DocumentObject)">
      <summary>
            Adds the specified document object to the collection.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.DocumentObjectCollection.Count">
      <summary>
            Gets the number of elements actually contained in the collection.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.DocumentObjectCollection.First">
      <summary>
            Gets the first value in the collection, if there is any, otherwise null.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.DocumentObjectCollection.LastObject">
      <summary>
            Gets the last element or null, if no such element exists.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.DocumentObjectCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="T:PdfEdit.Charting.BlankType">
      <summary>
            Determines how null values will be handled in a chart.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.BlankType.NotPlotted">
      <summary>
            Null value is not plotted.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.BlankType.Interpolated">
      <summary>
            Null value will be interpolated.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.BlankType.Zero">
      <summary>
            Null value will be handled as zero.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.ChartType">
      <summary>
            Specifies with type of chart will be drawn.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.ChartType.Line">
      <summary>
            A line chart.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.ChartType.Column2D">
      <summary>
            A clustered 2d column chart.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.ChartType.ColumnStacked2D">
      <summary>
            A stacked 2d column chart.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.ChartType.Area2D">
      <summary>
            A 2d area chart.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.ChartType.Bar2D">
      <summary>
            A clustered 2d bar chart.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.ChartType.BarStacked2D">
      <summary>
            A stacked 2d bar chart.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.ChartType.Pie2D">
      <summary>
            A 2d pie chart.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.ChartType.PieExploded2D">
      <summary>
            An exploded 2d pie chart.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.DataLabelPosition">
      <summary>
            Determines where the data label will be positioned.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.DataLabelPosition.Center">
      <summary>
            DataLabel will be centered inside the bar or pie.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.DataLabelPosition.InsideBase">
      <summary>
            Inside the bar or pie at the origin.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.DataLabelPosition.InsideEnd">
      <summary>
            Inside the bar or pie at the edge.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.DataLabelPosition.OutsideEnd">
      <summary>
            Outside the bar or pie.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.DataLabelType">
      <summary>
            Determines the type of the data label.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.DataLabelType.None">
      <summary>
            No DataLabel.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.DataLabelType.Percent">
      <summary>
            Percentage of the data. For pie charts only.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.DataLabelType.Value">
      <summary>
            Value of the data.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.DockingType">
      <summary>
            Specifies the legend's position inside the chart.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.DockingType.Top">
      <summary>
            Above the chart.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.DockingType.Bottom">
      <summary>
            Below the chart.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.DockingType.Left">
      <summary>
            Left from the chart.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.DockingType.Right">
      <summary>
            Right from the chart.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.HorizontalAlignment">
      <summary>
            Used to determine the horizontal alignment of the axis title.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.HorizontalAlignment.Left">
      <summary>
            Axis title will be left aligned.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.HorizontalAlignment.Right">
      <summary>
            Axis title will be right aligned.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.HorizontalAlignment.Center">
      <summary>
            Axis title will be centered.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.LineStyle">
      <summary>
            Specifies the line style of the LineFormat object.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.LineStyle.Single">
      <summary>
      </summary>
    </member>
    <member name="T:PdfEdit.Charting.MarkerStyle">
      <summary>
            Symbols of a data point in a line chart.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.MarkerStyle.None">
      <summary>
      </summary>
    </member>
    <member name="F:PdfEdit.Charting.MarkerStyle.Circle">
      <summary>
      </summary>
    </member>
    <member name="F:PdfEdit.Charting.MarkerStyle.Dash">
      <summary>
      </summary>
    </member>
    <member name="F:PdfEdit.Charting.MarkerStyle.Diamond">
      <summary>
      </summary>
    </member>
    <member name="F:PdfEdit.Charting.MarkerStyle.Dot">
      <summary>
      </summary>
    </member>
    <member name="F:PdfEdit.Charting.MarkerStyle.Plus">
      <summary>
      </summary>
    </member>
    <member name="F:PdfEdit.Charting.MarkerStyle.Square">
      <summary>
      </summary>
    </member>
    <member name="F:PdfEdit.Charting.MarkerStyle.Star">
      <summary>
      </summary>
    </member>
    <member name="F:PdfEdit.Charting.MarkerStyle.Triangle">
      <summary>
      </summary>
    </member>
    <member name="F:PdfEdit.Charting.MarkerStyle.X">
      <summary>
      </summary>
    </member>
    <member name="T:PdfEdit.Charting.TickMarkType">
      <summary>
            Determines the position where the Tickmarks will be rendered.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.TickMarkType.None">
      <summary>
            Tickmarks are not rendered.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.TickMarkType.Inside">
      <summary>
            Tickmarks are rendered inside the plot area.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.TickMarkType.Outside">
      <summary>
            Tickmarks are rendered outside the plot area.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.TickMarkType.Cross">
      <summary>
            Tickmarks are rendered inside and outside the plot area.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.Underline">
      <summary>
            Specifies the underline type for the font.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.Underline.None">
      <summary>
      </summary>
    </member>
    <member name="F:PdfEdit.Charting.Underline.Single">
      <summary>
      </summary>
    </member>
    <member name="F:PdfEdit.Charting.Underline.Words">
      <summary>
      </summary>
    </member>
    <member name="F:PdfEdit.Charting.Underline.Dotted">
      <summary>
      </summary>
    </member>
    <member name="F:PdfEdit.Charting.Underline.Dash">
      <summary>
      </summary>
    </member>
    <member name="F:PdfEdit.Charting.Underline.DotDash">
      <summary>
      </summary>
    </member>
    <member name="F:PdfEdit.Charting.Underline.DotDotDash">
      <summary>
      </summary>
    </member>
    <member name="T:PdfEdit.Charting.VerticalAlignment">
      <summary>
            Used to determine the vertical alignment of the axis title.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.VerticalAlignment.Top">
      <summary>
            Axis title will be top aligned.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.VerticalAlignment.Center">
      <summary>
            Axis title will be centered.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.VerticalAlignment.Bottom">
      <summary>
            Axis title will be bottom aligned.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.FillFormat">
      <summary>
            Defines the background filling of the shape.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.FillFormat.#ctor">
      <summary>
            Initializes a new instance of the FillFormat class.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.FillFormat.Clone">
      <summary>
            Creates a deep copy of this object.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.FillFormat.Color">
      <summary>
            Gets or sets the color of the filling.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.FillFormat.Visible">
      <summary>
            Gets or sets a value indicating whether the background color should be visible.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.Font">
      <summary>
            Font represents the formatting of characters in a paragraph.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Font.#ctor">
      <summary>
            Initializes a new instance of the Font class that can be used as a template.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Font.#ctor(System.String,PdfEdit.Drawing.XUnit)">
      <summary>
            Initializes a new instance of the Font class with the specified name and size.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Font.Clone">
      <summary>
            Creates a copy of the Font.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Font.Name">
      <summary>
            Gets or sets the name of the font.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Font.Size">
      <summary>
            Gets or sets the size of the font.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Font.Bold">
      <summary>
            Gets or sets the bold property.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Font.Italic">
      <summary>
            Gets or sets the italic property.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Font.Underline">
      <summary>
            Gets or sets the underline property.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Font.Color">
      <summary>
            Gets or sets the color property.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Font.Superscript">
      <summary>
            Gets or sets the superscript property.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Font.Subscript">
      <summary>
            Gets or sets the subscript property.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.Gridlines">
      <summary>
            Represents the gridlines on the axes.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Gridlines.#ctor">
      <summary>
            Initializes a new instance of the Gridlines class.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Gridlines.Clone">
      <summary>
            Creates a deep copy of this object.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Gridlines.DeepCopy">
      <summary>
            Implements the deep copy of the object.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Gridlines.LineFormat">
      <summary>
            Gets the line format of the grid.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.Legend">
      <summary>
            Represents a legend of a chart.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Legend.#ctor">
      <summary>
            Initializes a new instance of the Legend class.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Legend.Clone">
      <summary>
            Creates a deep copy of this object.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Legend.DeepCopy">
      <summary>
            Implements the deep copy of the object.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Legend.LineFormat">
      <summary>
            Gets the line format of the legend's border.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Legend.Font">
      <summary>
            Gets the font of the legend.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Legend.Docking">
      <summary>
            Gets or sets the docking type.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.LineFormat">
      <summary>
            Defines the format of a line in a shape object.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.LineFormat.#ctor">
      <summary>
            Initializes a new instance of the LineFormat class.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.LineFormat.Clone">
      <summary>
            Creates a deep copy of this object.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.LineFormat.Visible">
      <summary>
            Gets or sets a value indicating whether the line should be visible.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.LineFormat.Width">
      <summary>
            Gets or sets the width of the line in XUnit.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.LineFormat.Color">
      <summary>
            Gets or sets the color of the line.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.LineFormat.DashStyle">
      <summary>
            Gets or sets the dash style of the line.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.LineFormat.Style">
      <summary>
            Gets or sets the style of the line.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.PlotArea">
      <summary>
            Represents the area where the actual chart is drawn.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.PlotArea.Clone">
      <summary>
            Creates a deep copy of this object.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.PlotArea.DeepCopy">
      <summary>
            Implements the deep copy of the object.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.PlotArea.LineFormat">
      <summary>
            Gets the line format of the plot area's border.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.PlotArea.FillFormat">
      <summary>
            Gets the background filling of the plot area.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.PlotArea.LeftPadding">
      <summary>
            Gets or sets the left padding of the area.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.PlotArea.RightPadding">
      <summary>
            Gets or sets the right padding of the area.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.PlotArea.TopPadding">
      <summary>
            Gets or sets the top padding of the area.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.PlotArea.BottomPadding">
      <summary>
            Gets or sets the bottom padding of the area.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.Point">
      <summary>
            Represents a formatted value on the data series.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Point.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the Point class with a real value.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Point.#ctor(System.String)">
      <summary>
            Initializes a new instance of the Point class with a real value.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Point.Clone">
      <summary>
            Creates a deep copy of this object.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Point.DeepCopy">
      <summary>
            Implements the deep copy of the object.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Point.LineFormat">
      <summary>
            Gets the line format of the data point's border.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Point.FillFormat">
      <summary>
            Gets the filling format of the data point.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Point.Value">
      <summary>
            The actual value of the data point.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.Series">
      <summary>
            Represents a series of data on the chart.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Series.#ctor">
      <summary>
            Initializes a new instance of the Series class.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Series.Clone">
      <summary>
            Creates a deep copy of this object.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Series.DeepCopy">
      <summary>
            Implements the deep copy of the object.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Series.AddBlank">
      <summary>
            Adds a blank to the series.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Series.Add(System.Double)">
      <summary>
            Adds a real value to the series.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.Series.Add(System.Double[])">
      <summary>
            Adds an array of real values to the series.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Series.Elements">
      <summary>
            The actual value container of the series.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Series.Name">
      <summary>
            Gets or sets the name of the series which will be used in the legend.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Series.LineFormat">
      <summary>
            Gets the line format of the border of each data.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Series.FillFormat">
      <summary>
            Gets the background filling of the data.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Series.MarkerSize">
      <summary>
            Gets or sets the size of the marker in a line chart.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Series.MarkerStyle">
      <summary>
            Gets or sets the style of the marker in a line chart.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Series.MarkerForegroundColor">
      <summary>
            Gets or sets the foreground color of the marker in a line chart.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Series.MarkerBackgroundColor">
      <summary>
            Gets or sets the background color of the marker in a line chart.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Series.ChartType">
      <summary>
            Gets or sets the chart type of the series if it's intended to be different than the
            global chart type.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Series.DataLabel">
      <summary>
            Gets the DataLabel of the series.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Series.HasDataLabel">
      <summary>
            Gets or sets whether the series has a DataLabel.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.Series.Count">
      <summary>
            Gets the element count of the series.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.SeriesCollection">
      <summary>
            The collection of data series.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.SeriesCollection.Item(System.Int32)">
      <summary>
            Gets a series by its index.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.SeriesCollection.Clone">
      <summary>
            Creates a deep copy of this object.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.SeriesCollection.AddSeries">
      <summary>
            Adds a new series to the collection.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.SeriesElements">
      <summary>
            Represents the collection of the values in a data series.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.SeriesElements.Item(System.Int32)">
      <summary>
            Gets a point by its index.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.SeriesElements.Clone">
      <summary>
            Creates a deep copy of this object.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.SeriesElements.AddBlank">
      <summary>
            Adds a blank to the series.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.SeriesElements.Add(System.Double)">
      <summary>
            Adds a new point with a real value to the series.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.SeriesElements.Add(System.Double[])">
      <summary>
            Adds an array of new points with real values to the series.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.TickLabels">
      <summary>
            Represents the format of the label of each value on the axis.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.TickLabels.#ctor">
      <summary>
            Initializes a new instance of the TickLabels class.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.TickLabels.Clone">
      <summary>
            Creates a deep copy of this object.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.TickLabels.DeepCopy">
      <summary>
            Implements the deep copy of the object.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.TickLabels.Format">
      <summary>
            Gets or sets the label's number format.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.TickLabels.Font">
      <summary>
            Gets the font of the label.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.XSeries">
      <summary>
            Represents a series of data on the X-Axis.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.XSeries.#ctor">
      <summary>
            Initializes a new instance of the XSeries class.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.XSeries.Item(System.Int32)">
      <summary>
            Gets the xvalue at the specified index.
            </summary>
    </member>
    <member name="F:PdfEdit.Charting.XSeries._xSeriesElements">
      <summary>
            The actual value container of the XSeries.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.XSeries.Clone">
      <summary>
            Creates a deep copy of this object.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.XSeries.DeepCopy">
      <summary>
            Implements the deep copy of the object.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.XSeries.AddBlank">
      <summary>
            Adds a blank to the XSeries.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.XSeries.Add(System.String)">
      <summary>
            Adds a value to the XSeries.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.XSeries.Add(System.String[])">
      <summary>
            Adds an array of values to the XSeries.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.XSeries.GetEnumerator">
      <summary>
            Gets the enumerator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PdfEdit.Charting.XSeries.Count">
      <summary>
            Gets the number of xvalues actually contained in the xseries.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.XSeriesElements">
      <summary>
            Represents the collection of the value in an XSeries.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.XSeriesElements.#ctor">
      <summary>
            Initializes a new instance of the XSeriesElements class.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.XSeriesElements.Clone">
      <summary>
            Creates a deep copy of this object.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.XSeriesElements.AddBlank">
      <summary>
            Adds a blank to the XSeries.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.XSeriesElements.Add(System.String)">
      <summary>
            Adds a value to the XSeries.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.XSeriesElements.Add(System.String[])">
      <summary>
            Adds an array of values to the XSeries.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.XValue">
      <summary>
            Represents the actual value on the XSeries.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.XValue.#ctor(System.String)">
      <summary>
            Initializes a new instance of the XValue class with the specified value.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.XValue.Clone">
      <summary>
            Creates a deep copy of this object.
            </summary>
    </member>
    <member name="T:PdfEdit.Charting.XValues">
      <summary>
            Represents the collection of values on the X-Axis.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.XValues.#ctor">
      <summary>
            Initializes a new instance of the XValues class.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.XValues.Clone">
      <summary>
            Creates a deep copy of this object.
            </summary>
    </member>
    <member name="P:PdfEdit.Charting.XValues.Item(System.Int32)">
      <summary>
            Gets an XSeries by its index.
            </summary>
    </member>
    <member name="M:PdfEdit.Charting.XValues.AddXSeries">
      <summary>
            Adds a new XSeries to the collection.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.BarCodes.BarCode">
      <summary>
            Represents the base class of all bar codes.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.BarCode.#ctor(System.String,PdfEdit.Drawing.XSize,PdfEdit.Drawing.BarCodes.CodeDirection)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.BarCodes.BarCode" /> class.
            </summary>
      <param name="text">
      </param>
      <param name="size">
      </param>
      <param name="direction">
      </param>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.BarCode.FromType(PdfEdit.Drawing.BarCodes.CodeType,System.String,PdfEdit.Drawing.XSize,PdfEdit.Drawing.BarCodes.CodeDirection)">
      <summary>
            Creates a bar code from the specified code type.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.BarCode.FromType(PdfEdit.Drawing.BarCodes.CodeType,System.String,PdfEdit.Drawing.XSize)">
      <summary>
            Creates a bar code from the specified code type.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.BarCode.FromType(PdfEdit.Drawing.BarCodes.CodeType,System.String)">
      <summary>
            Creates a bar code from the specified code type.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.BarCode.FromType(PdfEdit.Drawing.BarCodes.CodeType)">
      <summary>
            Creates a bar code from the specified code type.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.BarCodes.BarCode.WideNarrowRatio">
      <summary>
            When overridden in a derived class gets or sets the wide narrow ratio.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.BarCodes.BarCode.TextLocation">
      <summary>
            Gets or sets the location of the text next to the bar code.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.BarCodes.BarCode.DataLength">
      <summary>
            Gets or sets the length of the data that defines the bar code.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.BarCodes.BarCode.StartChar">
      <summary>
            Gets or sets the optional start character.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.BarCodes.BarCode.EndChar">
      <summary>
            Gets or sets the optional end character.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.BarCodes.BarCode.TurboBit">
      <summary>
            Gets or sets a value indicating whether the turbo bit is to be drawn.
            (A turbo bit is something special to Kern (computer output processing) company (as far as I know))
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.BarCode.Render(PdfEdit.Drawing.XGraphics,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XFont,PdfEdit.Drawing.XPoint)">
      <summary>
            When defined in a derived class renders the code.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.BarCodes.Code2of5Interleaved">
      <summary>
            Implementation of the Code 2 of 5 bar code.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.Code2of5Interleaved.#ctor">
      <summary>
            Initializes a new instance of Interleaved2of5.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.Code2of5Interleaved.#ctor(System.String)">
      <summary>
            Initializes a new instance of Interleaved2of5.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.Code2of5Interleaved.#ctor(System.String,PdfEdit.Drawing.XSize)">
      <summary>
            Initializes a new instance of Interleaved2of5.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.Code2of5Interleaved.#ctor(System.String,PdfEdit.Drawing.XSize,PdfEdit.Drawing.BarCodes.CodeDirection)">
      <summary>
            Initializes a new instance of Interleaved2of5.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.Code2of5Interleaved.Render(PdfEdit.Drawing.XGraphics,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XFont,PdfEdit.Drawing.XPoint)">
      <summary>
            Renders the bar code.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.Code2of5Interleaved.CheckCode(System.String)">
      <summary>
            Checks the code to be convertible into an interleaved 2 of 5 bar code.
            </summary>
      <param name="text">The code to be checked.</param>
    </member>
    <member name="T:PdfEdit.Drawing.BarCodes.Code3of9Standard">
      <summary>
            Imlpementation of the Code 3 of 9 bar code.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.Code3of9Standard.#ctor">
      <summary>
            Initializes a new instance of Standard3of9.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.Code3of9Standard.#ctor(System.String)">
      <summary>
            Initializes a new instance of Standard3of9.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.Code3of9Standard.#ctor(System.String,PdfEdit.Drawing.XSize)">
      <summary>
            Initializes a new instance of Standard3of9.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.Code3of9Standard.#ctor(System.String,PdfEdit.Drawing.XSize,PdfEdit.Drawing.BarCodes.CodeDirection)">
      <summary>
            Initializes a new instance of Standard3of9.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.Code3of9Standard.CheckCode(System.String)">
      <summary>
            Checks the code to be convertible into an standard 3 of 9 bar code.
            </summary>
      <param name="text">The code to be checked.</param>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.Code3of9Standard.Render(PdfEdit.Drawing.XGraphics,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XFont,PdfEdit.Drawing.XPoint)">
      <summary>
            Renders the bar code.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.BarCodes.CodeBase">
      <summary>
            Represents the base class of all codes.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.CodeBase.#ctor(System.String,PdfEdit.Drawing.XSize,PdfEdit.Drawing.BarCodes.CodeDirection)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.BarCodes.CodeBase" /> class.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.BarCodes.CodeBase.Size">
      <summary>
            Gets or sets the size.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.BarCodes.CodeBase.Text">
      <summary>
            Gets or sets the text the bar code shall represent.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.BarCodes.CodeBase.Anchor">
      <summary>
            Always MiddleCenter.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.BarCodes.CodeBase.Direction">
      <summary>
            Gets or sets the drawing direction.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.CodeBase.CheckCode(System.String)">
      <summary>
            When implemented in a derived class, determines whether the specified string can be used as Text
            for this bar code type.
            </summary>
      <param name="text">The code string to check.</param>
      <returns>True if the text can be used for the actual barcode.</returns>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.CodeBase.CalcDistance(PdfEdit.Drawing.BarCodes.AnchorType,PdfEdit.Drawing.BarCodes.AnchorType,PdfEdit.Drawing.XSize)">
      <summary>
            Calculates the distance between an old anchor point and a new anchor point.
            </summary>
      <param name="oldType">
      </param>
      <param name="newType">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="T:PdfEdit.Drawing.BarCodes.CodeDataMatrix">
      <summary>
            Defines the DataMatrix 2D barcode. THIS IS AN EMPIRA INTERNAL IMPLEMENTATION. THE CODE IN
            THE OPEN SOURCE VERSION IS A FAKE.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.CodeDataMatrix.#ctor">
      <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,System.Int32,PdfEdit.Drawing.XSize)">
      <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,PdfEdit.Drawing.BarCodes.DataMatrixEncoding,System.Int32,PdfEdit.Drawing.XSize)">
      <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,System.Int32,System.Int32,PdfEdit.Drawing.XSize)">
      <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,PdfEdit.Drawing.BarCodes.DataMatrixEncoding,System.Int32,System.Int32,PdfEdit.Drawing.XSize)">
      <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,PdfEdit.Drawing.XSize)">
      <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.CodeDataMatrix.SetEncoding(PdfEdit.Drawing.BarCodes.DataMatrixEncoding)">
      <summary>
            Sets the encoding of the DataMatrix.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.BarCodes.CodeDataMatrix.QuietZone">
      <summary>
            Gets or sets the size of the Matrix' Quiet Zone.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.CodeDataMatrix.Render(PdfEdit.Drawing.XGraphics,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XPoint)">
      <summary>
            Renders the matrix code.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.CodeDataMatrix.CheckCode(System.String)">
      <summary>
            Determines whether the specified string can be used as data in the DataMatrix.
            </summary>
      <param name="text">The code to be checked.</param>
    </member>
    <member name="T:PdfEdit.Drawing.BarCodes.CodeOmr">
      <summary>
            Represents an OMR code.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.CodeOmr.#ctor(System.String,PdfEdit.Drawing.XSize,PdfEdit.Drawing.BarCodes.CodeDirection)">
      <summary>
            initializes a new OmrCode with the given data.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.CodeOmr.Render(PdfEdit.Drawing.XGraphics,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XFont,PdfEdit.Drawing.XPoint)">
      <summary>
            Renders the OMR code.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.BarCodes.CodeOmr.SynchronizeCode">
      <summary>
            Gets or sets a value indicating whether a synchronize mark is rendered.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.BarCodes.CodeOmr.MakerDistance">
      <summary>
            Gets or sets the distance of the markers.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.BarCodes.CodeOmr.MakerThickness">
      <summary>
            Gets or sets the thickness of the makers.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.CodeOmr.CheckCode(System.String)">
      <summary>
            Determines whether the specified string can be used as Text for the OMR code.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.BarCodes.AnchorType">
      <summary>
            Specifies whether and how the text is displayed at the code area.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.AnchorType.TopLeft">
      <summary>
            The anchor is located top left.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.AnchorType.TopCenter">
      <summary>
            The anchor is located top center.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.AnchorType.TopRight">
      <summary>
            The anchor is located top right.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.AnchorType.MiddleLeft">
      <summary>
            The anchor is located middle left.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.AnchorType.MiddleCenter">
      <summary>
            The anchor is located middle center.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.AnchorType.MiddleRight">
      <summary>
            The anchor is located middle right.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.AnchorType.BottomLeft">
      <summary>
            The anchor is located bottom left.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.AnchorType.BottomCenter">
      <summary>
            The anchor is located bottom center.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.AnchorType.BottomRight">
      <summary>
            The anchor is located bottom right.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.BarCodes.CodeDirection">
      <summary>
            Specifies the drawing direction of the code.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.CodeDirection.LeftToRight">
      <summary>
            Does not rotate the code.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.CodeDirection.BottomToTop">
      <summary>
            Rotates the code 180° at the anchor position.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.CodeDirection.RightToLeft">
      <summary>
            Rotates the code 180° at the anchor position.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.CodeDirection.TopToBottom">
      <summary>
            Rotates the code 180° at the anchor position.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.BarCodes.CodeType">
      <summary>
            Specifies the type of the bar code.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.CodeType.Code2of5Interleaved">
      <summary>
            The standard 2 of 5 interleaved bar code.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.CodeType.Code3of9Standard">
      <summary>
            The standard 3 of 9 bar code.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.CodeType.Omr">
      <summary>
            The OMR code.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.CodeType.DataMatrix">
      <summary>
            The data matrix code.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.BarCodes.DataMatrixEncoding">
      <summary>
            docDaSt
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.DataMatrixEncoding.Ascii">
      <summary>
            docDaSt
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.DataMatrixEncoding.C40">
      <summary>
            docDaSt
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.DataMatrixEncoding.Text">
      <summary>
            docDaSt
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.DataMatrixEncoding.X12">
      <summary>
            docDaSt
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.DataMatrixEncoding.EDIFACT">
      <summary>
            docDaSt
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.DataMatrixEncoding.Base256">
      <summary>
            docDaSt
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.BarCodes.TextLocation">
      <summary>
            Specifies whether and how the text is displayed at the code.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.TextLocation.None">
      <summary>
            No text is drawn.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.TextLocation.Above">
      <summary>
            The text is located above the code.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.TextLocation.Below">
      <summary>
            The text is located below the code.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.TextLocation.AboveEmbedded">
      <summary>
            The text is located above within the code.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.BarCodes.TextLocation.BelowEmbedded">
      <summary>
            The text is located below within the code.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.BarCodes.MatrixCode">
      <summary>
            Represents the base class of all 2D codes.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.MatrixCode.#ctor(System.String,System.String,System.Int32,System.Int32,PdfEdit.Drawing.XSize)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.BarCodes.MatrixCode" /> class.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.BarCodes.MatrixCode.Encoding">
      <summary>
            Gets or sets the encoding. docDaSt
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.BarCodes.MatrixCode.Columns">
      <summary>
            docDaSt
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.BarCodes.MatrixCode.Rows">
      <summary>
            docDaSt
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.BarCodes.MatrixCode.Text">
      <summary>
            docDaSt
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.MatrixCode.Render(PdfEdit.Drawing.XGraphics,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XPoint)">
      <summary>
            When implemented in a derived class renders the 2D code.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.MatrixCode.CheckCode(System.String)">
      <summary>
            Determines whether the specified string can be used as Text for this matrix code type.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.BarCodes.ThickThinBarCode">
      <summary>
            Internal base class for several bar code types.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.BarCodes.ThickThinBarCode.#ctor(System.String,PdfEdit.Drawing.XSize,PdfEdit.Drawing.BarCodes.CodeDirection)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.BarCodes.ThickThinBarCode" /> class.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.BarCodes.ThickThinBarCode.WideNarrowRatio">
      <summary>
            Gets or sets the ration between thick an thin lines. Must be between 2 and 3.
            Optimal and also default value is 2.6.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.Layout.XParagraphAlignment">
      <summary>
            Specifies the alignment of a paragraph.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.Layout.XParagraphAlignment.Default">
      <summary>
            Default alignment, typically left alignment.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.Layout.XParagraphAlignment.Left">
      <summary>
            The paragraph is rendered left aligned.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.Layout.XParagraphAlignment.Center">
      <summary>
            The paragraph is rendered centered.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.Layout.XParagraphAlignment.Right">
      <summary>
            The paragraph is rendered right aligned.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.Layout.XParagraphAlignment.Justify">
      <summary>
            The paragraph is rendered justified.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.Layout.XTextFormatter">
      <summary>
            Represents a very simple text formatter.    
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.Layout.XTextFormatter.#ctor(PdfEdit.Drawing.XGraphics)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.Layout.XTextFormatter" /> class.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.Layout.XTextFormatter.Text">
      <summary>
            Gets or sets the text.
            </summary>
      <value>The text.</value>
    </member>
    <member name="P:PdfEdit.Drawing.Layout.XTextFormatter.Font">
      <summary>
            Gets or sets the font.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.Layout.XTextFormatter.LayoutRectangle">
      <summary>
            Gets or sets the bounding box of the layout.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.Layout.XTextFormatter.Alignment">
      <summary>
            Gets or sets the alignment of the text.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.Layout.XTextFormatter.DrawString(System.String,PdfEdit.Drawing.XFont,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XRect)">
      <summary>
            Draws the text.
            </summary>
      <param name="text">The text to be drawn.</param>
      <param name="font">The font.</param>
      <param name="brush">The text brush.</param>
      <param name="layoutRectangle">The layout rectangle.</param>
    </member>
    <member name="M:PdfEdit.Drawing.Layout.XTextFormatter.DrawString(System.String,PdfEdit.Drawing.XFont,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XRect,PdfEdit.Drawing.XStringFormat)">
      <summary>
            Draws the text.
            </summary>
      <param name="text">The text to be drawn.</param>
      <param name="font">The font.</param>
      <param name="brush">The text brush.</param>
      <param name="layoutRectangle">The layout rectangle.</param>
      <param name="format">The format.</param>
    </member>
    <member name="T:PdfEdit.Drawing.XColorSpace">
      <summary>
             Currently not used. Only DeviceRGB is rendered in PDF.
             </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XColorSpace.Rgb">
      <summary>
            Identifies the RGB color space.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XColorSpace.Cmyk">
      <summary>
            Identifies the CMYK color space.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XColorSpace.GrayScale">
      <summary>
            Identifies the gray scale color space.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XCombineMode">
      <summary>
            Specifies how different clipping regions can be combined.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XCombineMode.Replace">
      <summary>
            One clipping region is replaced by another.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XCombineMode.Intersect">
      <summary>
            Two clipping regions are combined by taking their intersection.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XCombineMode.Union">
      <summary>
            Not yet implemented in PDFEdit.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XCombineMode.Xor">
      <summary>
            Not yet implemented in PDFEdit.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XCombineMode.Exclude">
      <summary>
            Not yet implemented in PDFEdit.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XCombineMode.Complement">
      <summary>
            Not yet implemented in PDFEdit.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XDashStyle">
      <summary>
            Specifies the style of dashed lines drawn with an XPen object.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XDashStyle.Solid">
      <summary>
            Specifies a solid line.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XDashStyle.Dash">
      <summary>
            Specifies a line consisting of dashes.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XDashStyle.Dot">
      <summary>
            Specifies a line consisting of dots.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XDashStyle.DashDot">
      <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XDashStyle.DashDotDot">
      <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XDashStyle.Custom">
      <summary>
            Specifies a user-defined custom dash style.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XFillMode">
      <summary>
            Specifies how the interior of a closed path is filled.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XFillMode.Alternate">
      <summary>
            Specifies the alternate fill mode. Called the 'odd-even rule' in PDF terminology.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XFillMode.Winding">
      <summary>
            Specifies the winding fill mode. Called the 'nonzero winding number rule' in PDF terminology.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XFontStyle">
      <summary>
            Specifies style information applied to text.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XFontStyle.Regular">
      <summary>
            Normal text.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XFontStyle.Bold">
      <summary>
            Bold text.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XFontStyle.Italic">
      <summary>
            Italic text.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XFontStyle.BoldItalic">
      <summary>
            Bold and italic text. 
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XFontStyle.Underline">
      <summary>
            Underlined text.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XFontStyle.Strikeout">
      <summary>
            Text with a line through the middle.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XGraphicsPdfPageOptions">
      <summary>
            Specifies how the content of an existing PDF page and new content is combined.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XGraphicsPdfPageOptions.Append">
      <summary>
            The new content is inserted behind the old content and any subsequent drawing in done above the existing graphic.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XGraphicsPdfPageOptions.Prepend">
      <summary>
            The new content is inserted before the old content and any subsequent drawing in done beneath the existing graphic.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XGraphicsPdfPageOptions.Replace">
      <summary>
            The new content entirely replaces the old content and any subsequent drawing in done on a blank page.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XGraphicsUnit">
      <summary>
            Specifies the unit of measure.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XGraphicsUnit.Point">
      <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XGraphicsUnit.Inch">
      <summary>
            Specifies the inch (2.54 cm) as the unit of measure.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XGraphicsUnit.Millimeter">
      <summary>
            Specifies the millimeter as the unit of measure.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XGraphicsUnit.Centimeter">
      <summary>
            Specifies the centimeter as the unit of measure.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XGraphicsUnit.Presentation">
      <summary>
            Specifies a presentation point (1/96 inch) as the unit of measure.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XKnownColor">
      <summary>
             Specifies all pre-defined colors. Used to identify the pre-defined colors and to 
             localize their names.
             </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.AliceBlue">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.AntiqueWhite">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Aqua">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Aquamarine">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Azure">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Beige">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Bisque">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Black">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.BlanchedAlmond">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Blue">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.BlueViolet">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Brown">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.BurlyWood">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.CadetBlue">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Chartreuse">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Chocolate">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Coral">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.CornflowerBlue">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Cornsilk">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Crimson">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Cyan">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DarkBlue">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DarkCyan">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DarkGoldenrod">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DarkGray">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DarkGreen">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DarkKhaki">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DarkMagenta">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DarkOliveGreen">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DarkOrange">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DarkOrchid">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DarkRed">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DarkSalmon">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DarkSeaGreen">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DarkSlateBlue">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DarkSlateGray">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DarkTurquoise">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DarkViolet">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DeepPink">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DeepSkyBlue">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DimGray">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.DodgerBlue">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Firebrick">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.FloralWhite">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.ForestGreen">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Fuchsia">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Gainsboro">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.GhostWhite">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Gold">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Goldenrod">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Gray">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Green">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.GreenYellow">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Honeydew">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.HotPink">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.IndianRed">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Indigo">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Ivory">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Khaki">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Lavender">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.LavenderBlush">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.LawnGreen">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.LemonChiffon">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.LightBlue">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.LightCoral">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.LightCyan">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.LightGoldenrodYellow">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.LightGray">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.LightGreen">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.LightPink">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.LightSalmon">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.LightSeaGreen">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.LightSkyBlue">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.LightSlateGray">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.LightSteelBlue">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.LightYellow">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Lime">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.LimeGreen">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Linen">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Magenta">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Maroon">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.MediumAquamarine">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.MediumBlue">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.MediumOrchid">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.MediumPurple">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.MediumSeaGreen">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.MediumSlateBlue">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.MediumSpringGreen">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.MediumTurquoise">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.MediumVioletRed">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.MidnightBlue">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.MintCream">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.MistyRose">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Moccasin">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.NavajoWhite">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Navy">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.OldLace">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Olive">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.OliveDrab">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Orange">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.OrangeRed">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Orchid">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.PaleGoldenrod">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.PaleGreen">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.PaleTurquoise">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.PaleVioletRed">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.PapayaWhip">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.PeachPuff">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Peru">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Pink">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Plum">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.PowderBlue">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Purple">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Red">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.RosyBrown">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.RoyalBlue">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.SaddleBrown">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Salmon">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.SandyBrown">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.SeaGreen">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.SeaShell">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Sienna">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Silver">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.SkyBlue">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.SlateBlue">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.SlateGray">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Snow">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.SpringGreen">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.SteelBlue">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Tan">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Teal">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Thistle">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Tomato">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Transparent">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Turquoise">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Violet">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Wheat">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.White">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.WhiteSmoke">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.Yellow">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="F:PdfEdit.Drawing.XKnownColor.YellowGreen">
      <summary>A pre-defined color.</summary>
    </member>
    <member name="T:PdfEdit.Drawing.XLineAlignment">
      <summary>
            Specifies the alignment of a text string relative to its layout rectangle
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XLineAlignment.Near">
      <summary>
            Specifies the text be aligned near the layout.
            In a left-to-right layout, the near position is left. In a right-to-left layout, the near
            position is right.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XLineAlignment.Center">
      <summary>
            Specifies that text is aligned in the center of the layout rectangle.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XLineAlignment.Far">
      <summary>
            Specifies that text is aligned far from the origin position of the layout rectangle.
            In a left-to-right layout, the far position is right. In a right-to-left layout, the far
            position is left. 
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XLineAlignment.BaseLine">
      <summary>
            Specifies that text is aligned relative to its base line.
            With this option the layout rectangle must have a height of 0.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XLinearGradientMode">
      <summary>
            Specifies the direction of a linear gradient.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XLinearGradientMode.Horizontal">
      <summary>
            Specifies a gradient from left to right.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XLinearGradientMode.Vertical">
      <summary>
            Specifies a gradient from top to bottom.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XLinearGradientMode.ForwardDiagonal">
      <summary>
            Specifies a gradient from upper left to lower right.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XLinearGradientMode.BackwardDiagonal">
      <summary>
            Specifies a gradient from upper right to lower left.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XLineCap">
      <summary>
            Specifies the available cap styles with which an XPen object can start and end a line.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XLineCap.Flat">
      <summary>
            Specifies a flat line cap.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XLineCap.Round">
      <summary>
            Specifies a round line cap.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XLineCap.Square">
      <summary>
            Specifies a square line cap.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XLineJoin">
      <summary>
            Specifies how to join consecutive line or curve segments in a figure or subpath.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XLineJoin.Miter">
      <summary>
            Specifies a mitered join. This produces a sharp corner or a clipped corner,
            depending on whether the length of the miter exceeds the miter limit
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XLineJoin.Round">
      <summary>
            Specifies a circular join. This produces a smooth, circular arc between the lines.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XLineJoin.Bevel">
      <summary>
            Specifies a beveled join. This produces a diagonal corner.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XMatrixOrder">
      <summary>
            Specifies the order for matrix transform operations.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XMatrixOrder.Prepend">
      <summary>
            The new operation is applied before the old operation.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XMatrixOrder.Append">
      <summary>
            The new operation is applied after the old operation.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XPageDirection">
      <summary>
            Specifies the direction of the y-axis.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XPageDirection.Downwards">
      <summary>
            Increasing Y values go downwards. This is the default.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XPageDirection.Upwards">
      <summary>
            Increasing Y values go upwards. This is only possible when drawing on a PDF page.
            It is not implemented when drawing on a System.Drawing.Graphics object.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XSmoothingMode">
      <summary>
            Specifies whether smoothing (or antialiasing) is applied to lines and curves
            and the edges of filled areas.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XSmoothingMode.Invalid">
      <summary>
            Specifies an invalid mode.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XSmoothingMode.Default">
      <summary>
            Specifies the default mode.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XSmoothingMode.HighSpeed">
      <summary>
            Specifies high speed, low quality rendering.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XSmoothingMode.HighQuality">
      <summary>
            Specifies high quality, low speed rendering.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XSmoothingMode.None">
      <summary>
            Specifies no antialiasing.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XSmoothingMode.AntiAlias">
      <summary>
            Specifies antialiased rendering.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XStringAlignment">
      <summary>
            Specifies the alignment of a text string relative to its layout rectangle.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XStringAlignment.Near">
      <summary>
            Specifies the text be aligned near the layout.
            In a left-to-right layout, the near position is left. In a right-to-left layout, the near
            position is right.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XStringAlignment.Center">
      <summary>
            Specifies that text is aligned in the center of the layout rectangle.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XStringAlignment.Far">
      <summary>
            Specifies that text is aligned far from the origin position of the layout rectangle.
            In a left-to-right layout, the far position is right. In a right-to-left layout, the far
            position is left. 
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XStyleSimulations">
      <summary>
            Describes the simulation style of a font.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XStyleSimulations.None">
      <summary>
            No font style simulation.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XStyleSimulations.BoldSimulation">
      <summary>
            Bold style simulation.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XStyleSimulations.ItalicSimulation">
      <summary>
            Italic style simulation.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XStyleSimulations.BoldItalicSimulation">
      <summary>
            Bold and Italic style simulation.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XSweepDirection">
      <summary>
            Defines the direction an elliptical arc is drawn.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XSweepDirection.Counterclockwise">
      <summary>
            Specifies that arcs are drawn in a counter clockwise (negative-angle) direction.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XSweepDirection.Clockwise">
      <summary>
            Specifies that arcs are drawn in a clockwise (positive-angle) direction.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XPdfFontOptions">
      <summary>
            Specifies details about how the font is used in PDF creation.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPdfFontOptions.#ctor(PdfEdit.Pdf.PdfFontEncoding)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XPdfFontOptions" /> class.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPdfFontOptions.FontEmbedding">
      <summary>
            Gets a value indicating the font embedding.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPdfFontOptions.FontEncoding">
      <summary>
            Gets a value indicating how the font is encoded.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPdfFontOptions.WinAnsiDefault">
      <summary>
            Gets the default options with WinAnsi encoding and always font embedding.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPdfFontOptions.UnicodeDefault">
      <summary>
            Gets the default options with Unicode encoding and always font embedding.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XBitmapDecoder">
      <summary>
            Provides functionality to load a bitmap image encoded in a specific format.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XBitmapDecoder.GetPngDecoder">
      <summary>
            Gets a new instance of the PNG image decoder.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XBitmapEncoder">
      <summary>
            Provides functionality to save a bitmap image in a specific format.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XBitmapEncoder.GetPngEncoder">
      <summary>
            Gets a new instance of the PNG image encoder.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBitmapEncoder.Source">
      <summary>
            Gets or sets the bitmap source to be encoded.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XBitmapEncoder.Save(System.IO.Stream)">
      <summary>
            When overridden in a derived class saves the image on the specified stream
            in the respective format.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XBitmapImage">
      <summary>
            Defines a pixel based bitmap image.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XBitmapImage.CreateBitmap(System.Int32,System.Int32)">
      <summary>
            Creates a default 24 bit ARGB bitmap with the specified pixel size.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XBitmapSource">
      <summary>
            Defines an abstract base class for pixel based images.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBitmapSource.PixelWidth">
      <summary>
            Gets the width of the image in pixels.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBitmapSource.PixelHeight">
      <summary>
            Gets the height of the image in pixels.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XBrush">
      <summary>
            Classes derived from this abstract base class define objects used to fill the 
            interiors of paths.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XBrush.op_Implicit(System.Drawing.Brush)~PdfEdit.Drawing.XBrush">
      <summary>
            Converts from a System.Drawing.Brush.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XBrushes">
      <summary>
            Brushes for all the pre-defined colors.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.AliceBlue">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.AntiqueWhite">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Aqua">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Aquamarine">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Azure">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Beige">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Bisque">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Black">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.BlanchedAlmond">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Blue">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.BlueViolet">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Brown">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.BurlyWood">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.CadetBlue">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Chartreuse">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Chocolate">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Coral">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.CornflowerBlue">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Cornsilk">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Crimson">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Cyan">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DarkBlue">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DarkCyan">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DarkGoldenrod">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DarkGray">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DarkGreen">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DarkKhaki">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DarkMagenta">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DarkOliveGreen">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DarkOrange">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DarkOrchid">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DarkRed">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DarkSalmon">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DarkSeaGreen">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DarkSlateBlue">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DarkSlateGray">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DarkTurquoise">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DarkViolet">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DeepPink">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DeepSkyBlue">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DimGray">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.DodgerBlue">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Firebrick">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.FloralWhite">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.ForestGreen">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Fuchsia">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Gainsboro">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.GhostWhite">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Gold">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Goldenrod">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Gray">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Green">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.GreenYellow">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Honeydew">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.HotPink">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.IndianRed">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Indigo">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Ivory">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Khaki">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Lavender">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.LavenderBlush">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.LawnGreen">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.LemonChiffon">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.LightBlue">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.LightCoral">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.LightCyan">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.LightGoldenrodYellow">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.LightGray">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.LightGreen">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.LightPink">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.LightSalmon">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.LightSeaGreen">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.LightSkyBlue">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.LightSlateGray">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.LightSteelBlue">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.LightYellow">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Lime">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.LimeGreen">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Linen">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Magenta">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Maroon">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.MediumAquamarine">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.MediumBlue">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.MediumOrchid">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.MediumPurple">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.MediumSeaGreen">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.MediumSlateBlue">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.MediumSpringGreen">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.MediumTurquoise">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.MediumVioletRed">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.MidnightBlue">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.MintCream">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.MistyRose">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Moccasin">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.NavajoWhite">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Navy">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.OldLace">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Olive">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.OliveDrab">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Orange">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.OrangeRed">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Orchid">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.PaleGoldenrod">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.PaleGreen">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.PaleTurquoise">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.PaleVioletRed">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.PapayaWhip">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.PeachPuff">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Peru">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Pink">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Plum">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.PowderBlue">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Purple">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Red">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.RosyBrown">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.RoyalBlue">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.SaddleBrown">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Salmon">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.SandyBrown">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.SeaGreen">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.SeaShell">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Sienna">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Silver">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.SkyBlue">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.SlateBlue">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.SlateGray">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Snow">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.SpringGreen">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.SteelBlue">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Tan">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Teal">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Thistle">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Tomato">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Transparent">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Turquoise">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Violet">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Wheat">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.White">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.WhiteSmoke">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.Yellow">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XBrushes.YellowGreen">
      <summary>Gets a pre-defined XBrush object.</summary>
    </member>
    <member name="T:PdfEdit.Drawing.XColor">
      <summary>
             Represents a RGB, CMYK, or gray scale color.
             </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.FromArgb(System.Int32)">
      <summary>
            Creates an XColor structure from a 32-bit ARGB value.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.FromArgb(System.UInt32)">
      <summary>
            Creates an XColor structure from a 32-bit ARGB value.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.FromArgb(System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates an XColor structure from the specified 8-bit color values (red, green, and blue).
            The alpha value is implicitly 255 (fully opaque).
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates an XColor structure from the four ARGB component (alpha, red, green, and blue) values.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.FromArgb(System.Drawing.Color)">
      <summary>
            Creates an XColor structure from the specified System.Drawing.Color.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.FromArgb(System.Int32,PdfEdit.Drawing.XColor)">
      <summary>
            Creates an XColor structure from the specified alpha value and color.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.FromArgb(System.Int32,System.Drawing.Color)">
      <summary>
            Creates an XColor structure from the specified alpha value and color.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.FromCmyk(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates an XColor structure from the specified CMYK values.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.FromCmyk(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates an XColor structure from the specified CMYK values.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.FromGrayScale(System.Double)">
      <summary>
            Creates an XColor structure from the specified gray value.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.FromKnownColor(PdfEdit.Drawing.XKnownColor)">
      <summary>
            Creates an XColor from the specified pre-defined color.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.FromKnownColor(System.Drawing.KnownColor)">
      <summary>
            Creates an XColor from the specified pre-defined color.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.FromName(System.String)">
      <summary>
            Creates an XColor from the specified name of a pre-defined color.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColor.ColorSpace">
      <summary>
            Gets or sets the color space to be used for PDF generation.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColor.IsEmpty">
      <summary>
            Indicates whether this XColor structure is uninitialized.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.op_Implicit(System.Drawing.Color)~PdfEdit.Drawing.XColor">
      <summary>
            Implicit conversion from Color to XColor
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.ToGdiColor">
      <summary>
             Creates a System.Drawing.Color object from this color.
             </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.Equals(System.Object)">
      <summary>
            Determines whether the specified object is a Color structure and is equivalent to this 
            Color structure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.op_Equality(PdfEdit.Drawing.XColor,PdfEdit.Drawing.XColor)">
      <summary>
            Determines whether two colors are equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.op_Inequality(PdfEdit.Drawing.XColor,PdfEdit.Drawing.XColor)">
      <summary>
            Determines whether two colors are not equal.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColor.IsKnownColor">
      <summary>
            Gets a value indicating whether this color is a known color.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.GetHue">
      <summary>
            Gets the hue-saturation-brightness (HSB) hue value, in degrees, for this color.
            </summary>
      <returns>The hue, in degrees, of this color. The hue is measured in degrees, ranging from 0 through 360, in HSB color space.</returns>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.GetSaturation">
      <summary>
            Gets the hue-saturation-brightness (HSB) saturation value for this color.
            </summary>
      <returns>The saturation of this color. The saturation ranges from 0 through 1, where 0 is grayscale and 1 is the most saturated.</returns>
    </member>
    <member name="M:PdfEdit.Drawing.XColor.GetBrightness">
      <summary>
            Gets the hue-saturation-brightness (HSB) brightness value for this color.
            </summary>
      <returns>The brightness of this color. The brightness ranges from 0 through 1, where 0 represents black and 1 represents white.</returns>
    </member>
    <member name="P:PdfEdit.Drawing.XColor.A">
      <summary>
            Gets or sets the alpha value the specifies the transparency. 
            The value is in the range from 1 (opaque) to 0 (completely transparent).
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColor.R">
      <summary>
            Gets or sets the red value.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColor.G">
      <summary>
            Gets or sets the green value.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColor.B">
      <summary>
            Gets or sets the blue value.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColor.C">
      <summary>
            Gets or sets the cyan value.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColor.M">
      <summary>
            Gets or sets the magenta value.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColor.Y">
      <summary>
            Gets or sets the yellow value.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColor.K">
      <summary>
            Gets or sets the black (or key) value.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColor.GS">
      <summary>
            Gets or sets the gray scale value.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XColor.Empty">
      <summary>
            Represents the null color.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColor.RgbCmykG">
      <summary>
             Special property for XmlSerializer only.
             </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XColorResourceManager">
      <summary>
            Manages the localization of the color class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColorResourceManager.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XColorResourceManager" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColorResourceManager.#ctor(System.Globalization.CultureInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XColorResourceManager" /> class.
            </summary>
      <param name="cultureInfo">The culture info.</param>
    </member>
    <member name="M:PdfEdit.Drawing.XColorResourceManager.GetKnownColor(System.UInt32)">
      <summary>
            Gets a known color from an ARGB value. Throws an ArgumentException if the value is not a known color.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColorResourceManager.GetKnownColors(System.Boolean)">
      <summary>
            Gets all known colors.
            </summary>
      <param name="includeTransparent">Indicates whether to include the color Transparent.</param>
    </member>
    <member name="M:PdfEdit.Drawing.XColorResourceManager.ToColorName(PdfEdit.Drawing.XKnownColor)">
      <summary>
            Converts a known color to a localized color name.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XColorResourceManager.ToColorName(PdfEdit.Drawing.XColor)">
      <summary>
            Converts a color to a localized color name or an ARGB value.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XColors">
      <summary>
             Represents a set of 141 pre-defined RGB colors. Incidentally the values are the same
             as in System.Drawing.Color.
             </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.AliceBlue">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.AntiqueWhite">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Aqua">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Aquamarine">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Azure">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Beige">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Bisque">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Black">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.BlanchedAlmond">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Blue">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.BlueViolet">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Brown">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.BurlyWood">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.CadetBlue">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Chartreuse">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Chocolate">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Coral">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.CornflowerBlue">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Cornsilk">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Crimson">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Cyan">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DarkBlue">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DarkCyan">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DarkGoldenrod">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DarkGray">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DarkGreen">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DarkKhaki">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DarkMagenta">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DarkOliveGreen">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DarkOrange">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DarkOrchid">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DarkRed">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DarkSalmon">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DarkSeaGreen">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DarkSlateBlue">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DarkSlateGray">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DarkTurquoise">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DarkViolet">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DeepPink">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DeepSkyBlue">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DimGray">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.DodgerBlue">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Firebrick">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.FloralWhite">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.ForestGreen">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Fuchsia">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Gainsboro">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.GhostWhite">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Gold">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Goldenrod">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Gray">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Green">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.GreenYellow">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Honeydew">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.HotPink">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.IndianRed">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Indigo">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Ivory">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Khaki">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Lavender">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.LavenderBlush">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.LawnGreen">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.LemonChiffon">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.LightBlue">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.LightCoral">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.LightCyan">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.LightGoldenrodYellow">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.LightGray">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.LightGreen">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.LightPink">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.LightSalmon">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.LightSeaGreen">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.LightSkyBlue">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.LightSlateGray">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.LightSteelBlue">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.LightYellow">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Lime">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.LimeGreen">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Linen">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Magenta">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Maroon">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.MediumAquamarine">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.MediumBlue">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.MediumOrchid">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.MediumPurple">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.MediumSeaGreen">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.MediumSlateBlue">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.MediumSpringGreen">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.MediumTurquoise">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.MediumVioletRed">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.MidnightBlue">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.MintCream">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.MistyRose">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Moccasin">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.NavajoWhite">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Navy">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.OldLace">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Olive">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.OliveDrab">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Orange">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.OrangeRed">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Orchid">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.PaleGoldenrod">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.PaleGreen">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.PaleTurquoise">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.PaleVioletRed">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.PapayaWhip">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.PeachPuff">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Peru">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Pink">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Plum">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.PowderBlue">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Purple">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Red">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.RosyBrown">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.RoyalBlue">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.SaddleBrown">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Salmon">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.SandyBrown">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.SeaGreen">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.SeaShell">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Sienna">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Silver">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.SkyBlue">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.SlateBlue">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.SlateGray">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Snow">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.SpringGreen">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.SteelBlue">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Tan">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Teal">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Thistle">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Tomato">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Transparent">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Turquoise">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Violet">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Wheat">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.White">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.WhiteSmoke">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.Yellow">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XColors.YellowGreen">
      <summary>Gets a predefined color.</summary>
    </member>
    <member name="T:PdfEdit.Drawing.XFont">
      <summary>
            Defines an object used to draw text.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XFont.#ctor(System.String,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XFont" /> class.
            </summary>
      <param name="familyName">Name of the font family.</param>
      <param name="emSize">The em size.</param>
    </member>
    <member name="M:PdfEdit.Drawing.XFont.#ctor(System.String,System.Double,PdfEdit.Drawing.XFontStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XFont" /> class.
            </summary>
      <param name="familyName">Name of the font family.</param>
      <param name="emSize">The em size.</param>
      <param name="style">The font style.</param>
    </member>
    <member name="M:PdfEdit.Drawing.XFont.#ctor(PdfEdit.Drawing.XFontSource,System.Double,PdfEdit.Drawing.XPdfFontOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XFont" /> class.
            </summary>
      <param name="fontSource">Font source</param>
      <param name="emSize">The em size</param>
    </member>
    <member name="M:PdfEdit.Drawing.XFont.#ctor(System.String,System.Double,PdfEdit.Drawing.XFontStyle,PdfEdit.Drawing.XPdfFontOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XFont" /> class.
            </summary>
      <param name="familyName">Name of the font family.</param>
      <param name="emSize">The em size.</param>
      <param name="style">The font style.</param>
      <param name="pdfOptions">Additional PDF options.</param>
    </member>
    <member name="M:PdfEdit.Drawing.XFont.#ctor(System.Drawing.FontFamily,System.Double,PdfEdit.Drawing.XFontStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XFont" /> class from a System.Drawing.FontFamily.
            </summary>
      <param name="fontFamily">The System.Drawing.FontFamily.</param>
      <param name="emSize">The em size.</param>
      <param name="style">The font style.</param>
    </member>
    <member name="M:PdfEdit.Drawing.XFont.#ctor(System.Drawing.FontFamily,System.Double,PdfEdit.Drawing.XFontStyle,PdfEdit.Drawing.XPdfFontOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XFont" /> class from a System.Drawing.FontFamily.
            </summary>
      <param name="fontFamily">The System.Drawing.FontFamily.</param>
      <param name="emSize">The em size.</param>
      <param name="style">The font style.</param>
      <param name="pdfOptions">Additional PDF options.</param>
    </member>
    <member name="M:PdfEdit.Drawing.XFont.#ctor(System.Drawing.Font)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XFont" /> class from a System.Drawing.Font.
            </summary>
      <param name="font">The System.Drawing.Font.</param>
    </member>
    <member name="M:PdfEdit.Drawing.XFont.#ctor(System.Drawing.Font,PdfEdit.Drawing.XPdfFontOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XFont" /> class from a System.Drawing.Font.
            </summary>
      <param name="font">The System.Drawing.Font.</param>
      <param name="pdfOptions">Additional PDF options.</param>
    </member>
    <member name="P:PdfEdit.Drawing.XFont.FontFamily">
      <summary>
            Gets the XFontFamily object associated with this XFont object.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFont.Name">
      <summary>
            WRONG: Gets the face name of this Font object.
            Indeed it returns the font family name.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFont.Size">
      <summary>
            Gets the em-size of this font measured in the unit of this font object.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFont.Style">
      <summary>
            Gets style information for this Font object.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFont.Bold">
      <summary>
            Indicates whether this XFont object is bold.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFont.Italic">
      <summary>
            Indicates whether this XFont object is italic.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFont.Strikeout">
      <summary>
            Indicates whether this XFont object is stroke out.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFont.Underline">
      <summary>
            Indicates whether this XFont object is underlined.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFont.PdfOptions">
      <summary>
            Gets the PDF options of the font.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFont.CellSpace">
      <summary>
            Gets the cell space for the font. The CellSpace is the line spacing, the sum of CellAscent and CellDescent and optionally some extra space.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFont.CellAscent">
      <summary>
            Gets the cell ascent, the area above the base line that is used by the font.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFont.CellDescent">
      <summary>
            Gets the cell descent, the area below the base line that is used by the font.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFont.Metrics">
      <summary>
            Gets the font metrics.
            </summary>
      <value>The metrics.</value>
    </member>
    <member name="M:PdfEdit.Drawing.XFont.GetHeight">
      <summary>
            Returns the line spacing, in pixels, of this font. The line spacing is the vertical distance
            between the base lines of two consecutive lines of text. Thus, the line spacing includes the
            blank space between lines along with the height of the character itself.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XFont.GetHeight(PdfEdit.Drawing.XGraphics)">
      <summary>
            Returns the line spacing, in the current unit of a specified Graphics object, of this font.
            The line spacing is the vertical distance between the base lines of two consecutive lines of
            text. Thus, the line spacing includes the blank space between lines along with the height of
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFont.Height">
      <summary>
            Gets the line spacing of this font.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFont.GdiFontFamily">
      <summary>
            Gets the GDI family.
            </summary>
      <value>The GDI family.</value>
    </member>
    <member name="M:PdfEdit.Drawing.XFont.op_Implicit(System.Drawing.Font)~PdfEdit.Drawing.XFont">
      <summary>
            Implicit conversion form Font to XFont
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XFontFamily">
      <summary>
            Defines a group of typefaces having a similar basic design and certain variations in styles.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XFontFamily.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XFontFamily" /> class.
            </summary>
      <param name="familyName">The family name of a font.</param>
    </member>
    <member name="P:PdfEdit.Drawing.XFontFamily.Name">
      <summary>
            Gets the name of the font family.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XFontFamily.GetCellAscent(PdfEdit.Drawing.XFontStyle)">
      <summary>
            Returns the cell ascent, in design units, of the XFontFamily object of the specified style.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XFontFamily.GetCellDescent(PdfEdit.Drawing.XFontStyle)">
      <summary>
            Returns the cell descent, in design units, of the XFontFamily object of the specified style.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XFontFamily.GetEmHeight(PdfEdit.Drawing.XFontStyle)">
      <summary>
            Gets the height, in font design units, of the em square for the specified style.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XFontFamily.GetLineSpacing(PdfEdit.Drawing.XFontStyle)">
      <summary>
            Returns the line spacing, in design units, of the FontFamily object of the specified style.
            The line spacing is the vertical distance between the base lines of two consecutive lines of text.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XFontFamily.IsStyleAvailable(PdfEdit.Drawing.XFontStyle)">
      <summary>
            Indicates whether the specified FontStyle enumeration is available.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFontFamily.Families">
      <summary>
            Returns an array that contains all the FontFamily objects associated with the current graphics context.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XFontFamily.GetFamilies(PdfEdit.Drawing.XGraphics)">
      <summary>
            Returns an array that contains all the FontFamily objects available for the specified 
            graphics context.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XFontMetrics">
      <summary>
            Collects information of a font.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFontMetrics.Name">
      <summary>
            Gets the font name.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFontMetrics.UnitsPerEm">
      <summary>
            Gets the ascent value.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFontMetrics.Ascent">
      <summary>
            Gets the ascent value.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFontMetrics.Descent">
      <summary>
            Gets the descent value.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFontMetrics.AverageWidth">
      <summary>
            Gets the average width.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFontMetrics.CapHeight">
      <summary>
            Gets the height of capital letters.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFontMetrics.Leading">
      <summary>
            Gets the leading value.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFontMetrics.LineSpacing">
      <summary>
            Gets the line spacing value.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFontMetrics.MaxWidth">
      <summary>
            Gets the maximum width of a character.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFontMetrics.StemH">
      <summary>
            Gets an internal value.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFontMetrics.StemV">
      <summary>
            Gets an internal value.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFontMetrics.XHeight">
      <summary>
            Gets the height of a lower-case character.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFontMetrics.UnderlinePosition">
      <summary>
            Gets the underline position.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFontMetrics.UnderlineThickness">
      <summary>
            Gets the underline thicksness.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFontMetrics.StrikethroughPosition">
      <summary>
            Gets the strikethrough position.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFontMetrics.StrikethroughThickness">
      <summary>
            Gets the strikethrough thicksness.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XFontSource">
      <summary>
            The bytes of a font file.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XFontSource.GetOrCreateFrom(System.Byte[])">
      <summary>
            Gets an existing font source or creates a new one.
            A new font source is cached in font factory.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFontSource.FontName">
      <summary>
            Gets the name of the font's name table.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XFontSource.Bytes">
      <summary>
            Gets the bytes of the font.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XForm">
      <summary>
            Represents a graphical object that can be used to render retained graphics on it.
            In GDI+ it is represented by a Metafile, in WPF by a DrawingVisual, and in PDF by a Form XObjects.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XForm.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XForm" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XForm.#ctor(PdfEdit.Drawing.XGraphics,PdfEdit.Drawing.XSize)">
      <summary>
            Initializes a new instance of the XForm class such that it can be drawn on the specified graphics
            object.
            </summary>
      <param name="gfx">The graphics object that later is used to draw this form.</param>
      <param name="size">The size in points of the form.</param>
    </member>
    <member name="M:PdfEdit.Drawing.XForm.#ctor(PdfEdit.Drawing.XGraphics,PdfEdit.Drawing.XUnit,PdfEdit.Drawing.XUnit)">
      <summary>
            Initializes a new instance of the XForm class such that it can be drawn on the specified graphics
            object.
            </summary>
      <param name="gfx">The graphics object that later is used to draw this form.</param>
      <param name="width">The width of the form.</param>
      <param name="height">The height of the form.</param>
    </member>
    <member name="M:PdfEdit.Drawing.XForm.#ctor(PdfEdit.Pdf.PdfDocument,PdfEdit.Drawing.XRect)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XForm" /> class that represents a page of a PDF document.
            </summary>
      <param name="document">The PDF document.</param>
      <param name="viewBox">The view box of the page.</param>
    </member>
    <member name="M:PdfEdit.Drawing.XForm.#ctor(PdfEdit.Pdf.PdfDocument,PdfEdit.Drawing.XSize)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XForm" /> class that represents a page of a PDF document.
            </summary>
      <param name="document">The PDF document.</param>
      <param name="size">The size of the page.</param>
    </member>
    <member name="M:PdfEdit.Drawing.XForm.#ctor(PdfEdit.Pdf.PdfDocument,PdfEdit.Drawing.XUnit,PdfEdit.Drawing.XUnit)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XForm" /> class that represents a page of a PDF document.
            </summary>
      <param name="document">The PDF document.</param>
      <param name="width">The width of the page.</param>
      <param name="height">The height of the page</param>
    </member>
    <member name="M:PdfEdit.Drawing.XForm.DrawingFinished">
      <summary>
            This function should be called when drawing the content of this form is finished.
            The XGraphics object used for drawing the content is disposed by this function and 
            cannot be used for any further drawing operations.
            PDFEdit automatically calls this function when this form was used the first time
            in a DrawImage function. 
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XForm.Dispose(System.Boolean)">
      <summary>
            Disposes this instance.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XForm.Width">
      <summary>
            Get the width of the page identified by the property PageNumber.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XForm.Height">
      <summary>
            Get the width of the page identified by the property PageNumber.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XForm.PointWidth">
      <summary>
            Get the width in point of this image.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XForm.PointHeight">
      <summary>
            Get the height in point of this image.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XForm.PixelWidth">
      <summary>
            Get the width of the page identified by the property PageNumber.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XForm.PixelHeight">
      <summary>
            Get the height of the page identified by the property PageNumber.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XForm.Size">
      <summary>
            Get the size of the page identified by the property PageNumber.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XForm.ViewBox">
      <summary>
            Gets the view box of the form.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XForm.HorizontalResolution">
      <summary>
            Gets 72, the horizontal resolution by design of a form object.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XForm.VerticalResolution">
      <summary>
            Gets 72 always, the vertical resolution by design of a form object.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XForm.BoundingBox">
      <summary>
            Gets or sets the bounding box.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XForm.Transform">
      <summary>
            Gets or sets the transformation matrix.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XGraphics">
      <summary>
            Represents a drawing surface for a fixed size page.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.CreateMeasureContext(PdfEdit.Drawing.XSize,PdfEdit.Drawing.XGraphicsUnit,PdfEdit.Drawing.XPageDirection)">
      <summary>
            Creates the measure context. This is a graphics context created only for querying measures of text.
            Drawing on a measure context has no effect.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.FromGraphics(System.Drawing.Graphics,PdfEdit.Drawing.XSize)">
      <summary>
            Creates a new instance of the XGraphics class from a System.Drawing.Graphics object.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.FromGraphics(System.Drawing.Graphics,PdfEdit.Drawing.XSize,PdfEdit.Drawing.XGraphicsUnit)">
      <summary>
            Creates a new instance of the XGraphics class from a System.Drawing.Graphics object.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.FromPdfPage(PdfEdit.Pdf.PdfPage)">
      <summary>
            Creates a new instance of the XGraphics class from a PdfEdit.Pdf.PdfPage object.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.FromPdfPage(PdfEdit.Pdf.PdfPage,PdfEdit.Drawing.XGraphicsUnit)">
      <summary>
            Creates a new instance of the XGraphics class from a PdfEdit.Pdf.PdfPage object.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.FromPdfPage(PdfEdit.Pdf.PdfPage,PdfEdit.Drawing.XPageDirection)">
      <summary>
            Creates a new instance of the XGraphics class from a PdfEdit.Pdf.PdfPage object.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.FromPdfPage(PdfEdit.Pdf.PdfPage,PdfEdit.Drawing.XGraphicsPdfPageOptions)">
      <summary>
            Creates a new instance of the XGraphics class from a PdfEdit.Pdf.PdfPage object.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.FromPdfPage(PdfEdit.Pdf.PdfPage,PdfEdit.Drawing.XGraphicsPdfPageOptions,PdfEdit.Drawing.XPageDirection)">
      <summary>
            Creates a new instance of the XGraphics class from a PdfEdit.Pdf.PdfPage object.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.FromPdfPage(PdfEdit.Pdf.PdfPage,PdfEdit.Drawing.XGraphicsPdfPageOptions,PdfEdit.Drawing.XGraphicsUnit)">
      <summary>
            Creates a new instance of the XGraphics class from a PdfEdit.Pdf.PdfPage object.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.FromPdfPage(PdfEdit.Pdf.PdfPage,PdfEdit.Drawing.XGraphicsPdfPageOptions,PdfEdit.Drawing.XGraphicsUnit,PdfEdit.Drawing.XPageDirection)">
      <summary>
            Creates a new instance of the XGraphics class from a PdfEdit.Pdf.PdfPage object.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.FromPdfForm(PdfEdit.Drawing.XPdfForm)">
      <summary>
            Creates a new instance of the XGraphics class from a PdfEdit.Drawing.XPdfForm object.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.FromForm(PdfEdit.Drawing.XForm)">
      <summary>
            Creates a new instance of the XGraphics class from a PdfEdit.Drawing.XForm object.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.FromImage(PdfEdit.Drawing.XImage)">
      <summary>
            Creates a new instance of the XGraphics class from a PdfEdit.Drawing.XForm object.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.FromImage(PdfEdit.Drawing.XImage,PdfEdit.Drawing.XGraphicsUnit)">
      <summary>
            Creates a new instance of the XGraphics class from a PdfEdit.Drawing.XImage object.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.Dispose">
      <summary>
            Releases all resources used by this object.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XGraphics.MUH">
      <summary>
            Internal hack for MigraDoc. Will be removed in further releases.
            Unicode support requires a global refactoring of MigraDoc and will be done in further releases.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XGraphics.PageUnit">
      <summary>
            Gets or sets the unit of measure used for page coordinates.
            CURRENTLY ONLY POINT IS IMPLEMENTED.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XGraphics.PageDirection">
      <summary>
            Gets or sets the a value indicating in which direction y-value grow.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XGraphics.PageOrigin">
      <summary>
            Gets the current page origin. Setting the origin is not yet implemented.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XGraphics.PageSize">
      <summary>
            Gets the current size of the page.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawLine(PdfEdit.Drawing.XPen,System.Drawing.Point,System.Drawing.Point)">
      <summary>
            Draws a line connecting two Point structures.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawLine(PdfEdit.Drawing.XPen,System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
            Draws a line connecting two GdiPointF structures.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawLine(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XPoint)">
      <summary>
            Draws a line connecting two XPoint structures.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawLine(PdfEdit.Drawing.XPen,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draws a line connecting the two points specified by coordinate pairs.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawLines(PdfEdit.Drawing.XPen,System.Drawing.Point[])">
      <summary>
            Draws a series of line segments that connect an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawLines(PdfEdit.Drawing.XPen,System.Drawing.PointF[])">
      <summary>
            Draws a series of line segments that connect an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawLines(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XPoint[])">
      <summary>
            Draws a series of line segments that connect an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawLines(PdfEdit.Drawing.XPen,System.Double,System.Double,System.Double[])">
      <summary>
            Draws a series of line segments that connect an array of x and y pairs.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawBezier(PdfEdit.Drawing.XPen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
      <summary>
            Draws a Bézier spline defined by four points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawBezier(PdfEdit.Drawing.XPen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
            Draws a Bézier spline defined by four points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawBezier(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XPoint)">
      <summary>
            Draws a Bézier spline defined by four points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawBezier(PdfEdit.Drawing.XPen,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draws a Bézier spline defined by four points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawBeziers(PdfEdit.Drawing.XPen,System.Drawing.Point[])">
      <summary>
            Draws a series of Bézier splines from an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawBeziers(PdfEdit.Drawing.XPen,System.Drawing.PointF[])">
      <summary>
            Draws a series of Bézier splines from an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawBeziers(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XPoint[])">
      <summary>
            Draws a series of Bézier splines from an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawCurve(PdfEdit.Drawing.XPen,System.Drawing.Point[])">
      <summary>
            Draws a cardinal spline through a specified array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawCurve(PdfEdit.Drawing.XPen,System.Drawing.Point[],System.Int32,System.Int32,System.Double)">
      <summary>
            Draws a cardinal spline through a specified array of point using a specified tension.
            The drawing begins offset from the beginning of the array.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawCurve(PdfEdit.Drawing.XPen,System.Drawing.PointF[])">
      <summary>
            Draws a cardinal spline through a specified array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawCurve(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XPoint[])">
      <summary>
            Draws a cardinal spline through a specified array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawCurve(PdfEdit.Drawing.XPen,System.Drawing.Point[],System.Double)">
      <summary>
            Draws a cardinal spline through a specified array of points using a specified tension. 
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawCurve(PdfEdit.Drawing.XPen,System.Drawing.PointF[],System.Double)">
      <summary>
            Draws a cardinal spline through a specified array of points using a specified tension. 
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawCurve(PdfEdit.Drawing.XPen,System.Drawing.PointF[],System.Int32,System.Int32)">
      <summary>
            Draws a cardinal spline through a specified array of point. The drawing begins offset from the beginning of the array.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawCurve(PdfEdit.Drawing.XPen,System.Drawing.PointF[],System.Int32,System.Int32,System.Double)">
      <summary>
            Draws a cardinal spline through a specified array of point using a specified tension.
            The drawing begins offset from the beginning of the array.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawCurve(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XPoint[],System.Int32,System.Int32,System.Double)">
      <summary>
            Draws a cardinal spline through a specified array of point using a specified tension.
            The drawing begins offset from the beginning of the array.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawCurve(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XPoint[],System.Double)">
      <summary>
            Draws a cardinal spline through a specified array of points using a specified tension. 
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawArc(PdfEdit.Drawing.XPen,System.Drawing.Rectangle,System.Double,System.Double)">
      <summary>
            Draws an arc representing a portion of an ellipse.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawArc(PdfEdit.Drawing.XPen,System.Drawing.RectangleF,System.Double,System.Double)">
      <summary>
            Draws an arc representing a portion of an ellipse.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawArc(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XRect,System.Double,System.Double)">
      <summary>
            Draws an arc representing a portion of an ellipse.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawArc(PdfEdit.Drawing.XPen,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draws an arc representing a portion of an ellipse.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangle(PdfEdit.Drawing.XPen,System.Drawing.Rectangle)">
      <summary>
            Draws a rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangle(PdfEdit.Drawing.XPen,System.Drawing.RectangleF)">
      <summary>
            Draws a rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangle(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XRect)">
      <summary>
            Draws a rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangle(PdfEdit.Drawing.XPen,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draws a rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangle(PdfEdit.Drawing.XBrush,System.Drawing.Rectangle)">
      <summary>
            Draws a rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangle(PdfEdit.Drawing.XBrush,System.Drawing.RectangleF)">
      <summary>
            Draws a rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangle(PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XRect)">
      <summary>
            Draws a rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangle(PdfEdit.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draws a rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangle(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Drawing.Rectangle)">
      <summary>
            Draws a rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangle(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Drawing.RectangleF)">
      <summary>
            Draws a rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangle(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XRect)">
      <summary>
            Draws a rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangle(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draws a rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangles(PdfEdit.Drawing.XPen,System.Drawing.Rectangle[])">
      <summary>
            Draws a series of rectangles.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangles(PdfEdit.Drawing.XPen,System.Drawing.RectangleF[])">
      <summary>
            Draws a series of rectangles.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangles(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XRect[])">
      <summary>
            Draws a series of rectangles.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangles(PdfEdit.Drawing.XBrush,System.Drawing.Rectangle[])">
      <summary>
            Draws a series of rectangles.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangles(PdfEdit.Drawing.XBrush,System.Drawing.RectangleF[])">
      <summary>
            Draws a series of rectangles.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangles(PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XRect[])">
      <summary>
            Draws a series of rectangles.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangles(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Drawing.Rectangle[])">
      <summary>
            Draws a series of rectangles.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangles(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Drawing.RectangleF[])">
      <summary>
            Draws a series of rectangles.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRectangles(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XRect[])">
      <summary>
            Draws a series of rectangles.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRoundedRectangle(PdfEdit.Drawing.XPen,System.Drawing.Rectangle,System.Drawing.Size)">
      <summary>
            Draws a rectangles with round corners.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRoundedRectangle(PdfEdit.Drawing.XPen,System.Drawing.RectangleF,System.Drawing.SizeF)">
      <summary>
            Draws a rectangles with round corners.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRoundedRectangle(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XRect,PdfEdit.Drawing.XSize)">
      <summary>
            Draws a rectangles with round corners.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRoundedRectangle(PdfEdit.Drawing.XPen,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draws a rectangles with round corners.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRoundedRectangle(PdfEdit.Drawing.XBrush,System.Drawing.Rectangle,System.Drawing.Size)">
      <summary>
            Draws a rectangles with round corners.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRoundedRectangle(PdfEdit.Drawing.XBrush,System.Drawing.RectangleF,System.Drawing.SizeF)">
      <summary>
            Draws a rectangles with round corners.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRoundedRectangle(PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XRect,PdfEdit.Drawing.XSize)">
      <summary>
            Draws a rectangles with round corners.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRoundedRectangle(PdfEdit.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draws a rectangles with round corners.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRoundedRectangle(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Drawing.Rectangle,System.Drawing.Size)">
      <summary>
            Draws a rectangles with round corners.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRoundedRectangle(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Drawing.RectangleF,System.Drawing.SizeF)">
      <summary>
            Draws a rectangles with round corners.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRoundedRectangle(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XRect,PdfEdit.Drawing.XSize)">
      <summary>
            Draws a rectangles with round corners.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawRoundedRectangle(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draws a rectangles with round corners.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawEllipse(PdfEdit.Drawing.XPen,System.Drawing.Rectangle)">
      <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawEllipse(PdfEdit.Drawing.XPen,System.Drawing.RectangleF)">
      <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawEllipse(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XRect)">
      <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawEllipse(PdfEdit.Drawing.XPen,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawEllipse(PdfEdit.Drawing.XBrush,System.Drawing.Rectangle)">
      <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawEllipse(PdfEdit.Drawing.XBrush,System.Drawing.RectangleF)">
      <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawEllipse(PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XRect)">
      <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawEllipse(PdfEdit.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawEllipse(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Drawing.Rectangle)">
      <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawEllipse(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Drawing.RectangleF)">
      <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawEllipse(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XRect)">
      <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawEllipse(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPolygon(PdfEdit.Drawing.XPen,System.Drawing.Point[])">
      <summary>
            Draws a polygon defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPolygon(PdfEdit.Drawing.XPen,System.Drawing.PointF[])">
      <summary>
            Draws a polygon defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPolygon(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XPoint[])">
      <summary>
            Draws a polygon defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPolygon(PdfEdit.Drawing.XBrush,System.Drawing.Point[],PdfEdit.Drawing.XFillMode)">
      <summary>
            Draws a polygon defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPolygon(PdfEdit.Drawing.XBrush,System.Drawing.PointF[],PdfEdit.Drawing.XFillMode)">
      <summary>
            Draws a polygon defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPolygon(PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XPoint[],PdfEdit.Drawing.XFillMode)">
      <summary>
            Draws a polygon defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPolygon(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Drawing.Point[],PdfEdit.Drawing.XFillMode)">
      <summary>
            Draws a polygon defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPolygon(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Drawing.PointF[],PdfEdit.Drawing.XFillMode)">
      <summary>
            Draws a polygon defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPolygon(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XPoint[],PdfEdit.Drawing.XFillMode)">
      <summary>
            Draws a polygon defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPie(PdfEdit.Drawing.XPen,System.Drawing.Rectangle,System.Double,System.Double)">
      <summary>
            Draws a pie defined by an ellipse.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPie(PdfEdit.Drawing.XPen,System.Drawing.RectangleF,System.Double,System.Double)">
      <summary>
            Draws a pie defined by an ellipse.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPie(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XRect,System.Double,System.Double)">
      <summary>
            Draws a pie defined by an ellipse.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPie(PdfEdit.Drawing.XPen,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draws a pie defined by an ellipse.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPie(PdfEdit.Drawing.XBrush,System.Drawing.Rectangle,System.Double,System.Double)">
      <summary>
            Draws a pie defined by an ellipse.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPie(PdfEdit.Drawing.XBrush,System.Drawing.RectangleF,System.Double,System.Double)">
      <summary>
            Draws a pie defined by an ellipse.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPie(PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XRect,System.Double,System.Double)">
      <summary>
            Draws a pie defined by an ellipse.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPie(PdfEdit.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draws a pie defined by an ellipse.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPie(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Drawing.Rectangle,System.Double,System.Double)">
      <summary>
            Draws a pie defined by an ellipse.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPie(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Drawing.RectangleF,System.Double,System.Double)">
      <summary>
            Draws a pie defined by an ellipse.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPie(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XRect,System.Double,System.Double)">
      <summary>
            Draws a pie defined by an ellipse.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPie(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draws a pie defined by an ellipse.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XPen,System.Drawing.Point[])">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XPen,System.Drawing.PointF[])">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XPoint[])">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XPen,System.Drawing.Point[],System.Double)">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XPen,System.Drawing.PointF[],System.Double)">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XPoint[],System.Double)">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XBrush,System.Drawing.Point[])">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XBrush,System.Drawing.PointF[])">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XPoint[])">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XBrush,System.Drawing.Point[],PdfEdit.Drawing.XFillMode)">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XBrush,System.Drawing.PointF[],PdfEdit.Drawing.XFillMode)">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XPoint[],PdfEdit.Drawing.XFillMode)">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XBrush,System.Drawing.Point[],PdfEdit.Drawing.XFillMode,System.Double)">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XBrush,System.Drawing.PointF[],PdfEdit.Drawing.XFillMode,System.Double)">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XPoint[],PdfEdit.Drawing.XFillMode,System.Double)">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Drawing.Point[])">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Drawing.PointF[])">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XPoint[])">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Drawing.Point[],PdfEdit.Drawing.XFillMode)">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Drawing.PointF[],PdfEdit.Drawing.XFillMode)">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XPoint[],PdfEdit.Drawing.XFillMode)">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Drawing.Point[],PdfEdit.Drawing.XFillMode,System.Double)">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,System.Drawing.PointF[],PdfEdit.Drawing.XFillMode,System.Double)">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawClosedCurve(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XPoint[],PdfEdit.Drawing.XFillMode,System.Double)">
      <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPath(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XGraphicsPath)">
      <summary>
            Draws a graphical path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPath(PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XGraphicsPath)">
      <summary>
            Draws a graphical path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawPath(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XGraphicsPath)">
      <summary>
            Draws a graphical path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawString(System.String,PdfEdit.Drawing.XFont,PdfEdit.Drawing.XBrush,System.Drawing.PointF)">
      <summary>
            Draws the specified text string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawString(System.String,PdfEdit.Drawing.XFont,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XPoint)">
      <summary>
            Draws the specified text string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawString(System.String,PdfEdit.Drawing.XFont,PdfEdit.Drawing.XBrush,System.Drawing.PointF,PdfEdit.Drawing.XStringFormat)">
      <summary>
            Draws the specified text string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawString(System.String,PdfEdit.Drawing.XFont,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XStringFormat)">
      <summary>
            Draws the specified text string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawString(System.String,PdfEdit.Drawing.XFont,PdfEdit.Drawing.XBrush,System.Double,System.Double)">
      <summary>
            Draws the specified text string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawString(System.String,PdfEdit.Drawing.XFont,PdfEdit.Drawing.XBrush,System.Double,System.Double,PdfEdit.Drawing.XStringFormat)">
      <summary>
            Draws the specified text string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawString(System.String,PdfEdit.Drawing.XFont,PdfEdit.Drawing.XBrush,System.Drawing.RectangleF)">
      <summary>
            Draws the specified text string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawString(System.String,PdfEdit.Drawing.XFont,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XRect)">
      <summary>
            Draws the specified text string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawString(System.String,PdfEdit.Drawing.XFont,PdfEdit.Drawing.XBrush,System.Drawing.RectangleF,PdfEdit.Drawing.XStringFormat)">
      <summary>
            Draws the specified text string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawString(System.String,PdfEdit.Drawing.XFont,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XRect,PdfEdit.Drawing.XStringFormat)">
      <summary>
            Draws the specified text string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.MeasureString(System.String,PdfEdit.Drawing.XFont,PdfEdit.Drawing.XStringFormat)">
      <summary>
            Measures the specified string when drawn with the specified font.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.MeasureString(System.String,PdfEdit.Drawing.XFont)">
      <summary>
            Measures the specified string when drawn with the specified font.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawImage(PdfEdit.Drawing.XImage,System.Drawing.Point)">
      <summary>
            Draws the specified image.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawImage(PdfEdit.Drawing.XImage,System.Drawing.PointF)">
      <summary>
            Draws the specified image.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawImage(PdfEdit.Drawing.XImage,PdfEdit.Drawing.XPoint)">
      <summary>
            Draws the specified image.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawImage(PdfEdit.Drawing.XImage,System.Double,System.Double)">
      <summary>
            Draws the specified image.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawImage(PdfEdit.Drawing.XImage,System.Drawing.Rectangle)">
      <summary>
            Draws the specified image.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawImage(PdfEdit.Drawing.XImage,System.Drawing.RectangleF)">
      <summary>
            Draws the specified image.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawImage(PdfEdit.Drawing.XImage,PdfEdit.Drawing.XRect)">
      <summary>
            Draws the specified image.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawImage(PdfEdit.Drawing.XImage,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draws the specified image.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawImage(PdfEdit.Drawing.XImage,System.Drawing.Rectangle,System.Drawing.Rectangle,PdfEdit.Drawing.XGraphicsUnit)">
      <summary>
            Draws the specified image.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawImage(PdfEdit.Drawing.XImage,System.Drawing.RectangleF,System.Drawing.RectangleF,PdfEdit.Drawing.XGraphicsUnit)">
      <summary>
            Draws the specified image.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawImage(PdfEdit.Drawing.XImage,PdfEdit.Drawing.XRect,PdfEdit.Drawing.XRect,PdfEdit.Drawing.XGraphicsUnit)">
      <summary>
            Draws the specified image.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawBarCode(PdfEdit.Drawing.BarCodes.BarCode,PdfEdit.Drawing.XPoint)">
      <summary>
            Draws the specified bar code.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawBarCode(PdfEdit.Drawing.BarCodes.BarCode,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XPoint)">
      <summary>
            Draws the specified bar code.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawBarCode(PdfEdit.Drawing.BarCodes.BarCode,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XFont,PdfEdit.Drawing.XPoint)">
      <summary>
            Draws the specified bar code.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawMatrixCode(PdfEdit.Drawing.BarCodes.MatrixCode,PdfEdit.Drawing.XPoint)">
      <summary>
            Draws the specified data matrix code.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.DrawMatrixCode(PdfEdit.Drawing.BarCodes.MatrixCode,PdfEdit.Drawing.XBrush,PdfEdit.Drawing.XPoint)">
      <summary>
            Draws the specified data matrix code.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.Save">
      <summary>
            Saves the current state of this XGraphics object and identifies the saved state with the
            returned XGraphicsState object.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.Restore(PdfEdit.Drawing.XGraphicsState)">
      <summary>
            Restores the state of this XGraphics object to the state represented by the specified 
            XGraphicsState object.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.Restore">
      <summary>
            Restores the state of this XGraphics object to the state before the most recently call of Save.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.BeginContainer">
      <summary>
            Saves a graphics container with the current state of this XGraphics and 
            opens and uses a new graphics container.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,PdfEdit.Drawing.XGraphicsUnit)">
      <summary>
            Saves a graphics container with the current state of this XGraphics and 
            opens and uses a new graphics container.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,PdfEdit.Drawing.XGraphicsUnit)">
      <summary>
            Saves a graphics container with the current state of this XGraphics and 
            opens and uses a new graphics container.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.BeginContainer(PdfEdit.Drawing.XRect,PdfEdit.Drawing.XRect,PdfEdit.Drawing.XGraphicsUnit)">
      <summary>
            Saves a graphics container with the current state of this XGraphics and 
            opens and uses a new graphics container.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.EndContainer(PdfEdit.Drawing.XGraphicsContainer)">
      <summary>
            Closes the current graphics container and restores the state of this XGraphics 
            to the state saved by a call to the BeginContainer method.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XGraphics.GraphicsStateLevel">
      <summary>
            Gets the current graphics state level. The default value is 0. Each call of Save or BeginContainer
            increased and each call of Restore or EndContainer decreased the value by 1.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XGraphics.SmoothingMode">
      <summary>
            Gets or sets the smoothing mode.
            </summary>
      <value>The smoothing mode.</value>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.TranslateTransform(System.Double,System.Double)">
      <summary>
            Applies the specified translation operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.TranslateTransform(System.Double,System.Double,PdfEdit.Drawing.XMatrixOrder)">
      <summary>
            Applies the specified translation operation to the transformation matrix of this object
            in the specified order.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.ScaleTransform(System.Double,System.Double)">
      <summary>
            Applies the specified scaling operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.ScaleTransform(System.Double,System.Double,PdfEdit.Drawing.XMatrixOrder)">
      <summary>
            Applies the specified scaling operation to the transformation matrix of this object
            in the specified order.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.ScaleTransform(System.Double)">
      <summary>
            Applies the specified scaling operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.ScaleTransform(System.Double,PdfEdit.Drawing.XMatrixOrder)">
      <summary>
            Applies the specified scaling operation to the transformation matrix of this object
            in the specified order.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.ScaleAtTransform(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Applies the specified scaling operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.ScaleAtTransform(System.Double,System.Double,PdfEdit.Drawing.XPoint)">
      <summary>
            Applies the specified scaling operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.RotateTransform(System.Double)">
      <summary>
            Applies the specified rotation operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.RotateTransform(System.Double,PdfEdit.Drawing.XMatrixOrder)">
      <summary>
            Applies the specified rotation operation to the transformation matrix of this object
            in the specified order. The angle unit of measure is degree.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.RotateAtTransform(System.Double,PdfEdit.Drawing.XPoint)">
      <summary>
            Applies the specified rotation operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.RotateAtTransform(System.Double,PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XMatrixOrder)">
      <summary>
            Applies the specified rotation operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.ShearTransform(System.Double,System.Double)">
      <summary>
            Applies the specified shearing operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            ShearTransform is a synonym for SkewAtTransform.
            Parameter shearX specifies the horizontal skew which is measured in degrees counterclockwise from the y-axis.
            Parameter shearY specifies the vertical skew which is measured in degrees counterclockwise from the x-axis.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.ShearTransform(System.Double,System.Double,PdfEdit.Drawing.XMatrixOrder)">
      <summary>
            Applies the specified shearing operation to the transformation matrix of this object
            in the specified order.
            ShearTransform is a synonym for SkewAtTransform.
            Parameter shearX specifies the horizontal skew which is measured in degrees counterclockwise from the y-axis.
            Parameter shearY specifies the vertical skew which is measured in degrees counterclockwise from the x-axis.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.SkewAtTransform(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Applies the specified shearing operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            ShearTransform is a synonym for SkewAtTransform.
            Parameter shearX specifies the horizontal skew which is measured in degrees counterclockwise from the y-axis.
            Parameter shearY specifies the vertical skew which is measured in degrees counterclockwise from the x-axis.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.SkewAtTransform(System.Double,System.Double,PdfEdit.Drawing.XPoint)">
      <summary>
            Applies the specified shearing operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            ShearTransform is a synonym for SkewAtTransform.
            Parameter shearX specifies the horizontal skew which is measured in degrees counterclockwise from the y-axis.
            Parameter shearY specifies the vertical skew which is measured in degrees counterclockwise from the x-axis.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.MultiplyTransform(PdfEdit.Drawing.XMatrix)">
      <summary>
            Multiplies the transformation matrix of this object and specified matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.MultiplyTransform(PdfEdit.Drawing.XMatrix,PdfEdit.Drawing.XMatrixOrder)">
      <summary>
            Multiplies the transformation matrix of this object and specified matrix in the specified order.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XGraphics.Transform">
      <summary>
            Gets the current transformation matrix.
            The transformation matrix canot be set. Insted use Save/Restore or BeginContainer/EndContainer to
            save the state before Transform is called and later restore to the previous transform.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.IntersectClip(System.Drawing.Rectangle)">
      <summary>
            Updates the clip region of this XGraphics to the intersection of the 
            current clip region and the specified rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.IntersectClip(System.Drawing.RectangleF)">
      <summary>
            Updates the clip region of this XGraphics to the intersection of the 
            current clip region and the specified rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.IntersectClip(PdfEdit.Drawing.XRect)">
      <summary>
            Updates the clip region of this XGraphics to the intersection of the 
            current clip region and the specified rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.IntersectClip(PdfEdit.Drawing.XGraphicsPath)">
      <summary>
            Updates the clip region of this XGraphics to the intersection of the 
            current clip region and the specified graphical path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.WriteComment(System.String)">
      <summary>
            Writes a comment to the output stream. Comments have no effect on the rendering of the output.
            They may be useful to mark a position in a content stream of a PDF document.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XGraphics.Internals">
      <summary>
            Permits access to internal data.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XGraphics.Transformer">
      <summary>
            (Under construction. May change in future versions.)
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XGraphics.PdfPage">
      <summary>
            Gets the PDF page that serves as drawing surface if PDF is rendered,
            or null, if no such object exists.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XGraphics.Graphics">
      <summary>
            Gets the System.Drawing.Graphics objects that serves as drawing surface if no PDF is rendered,
            or null, if no such object exists.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XGraphics.XGraphicsInternals">
      <summary>
            Provides access to internal data structures of the XGraphics class.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XGraphics.XGraphicsInternals.Graphics">
      <summary>
            Gets the underlying Graphics object.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XGraphics.SpaceTransformer">
      <summary>
            (This class is under construction.)
            Currently used in MigraDoc
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphics.SpaceTransformer.WorldToDefaultPage(PdfEdit.Drawing.XRect)">
      <summary>
            Gets the smallest rectangle in default page space units that completely encloses the specified rect
            in world space units.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XGraphicsContainer">
      <summary>
            Represents the internal state of an XGraphics object.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XGraphicsPath">
      <summary>
            Represents a series of connected lines and curves.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XGraphicsPath" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.#ctor(System.Drawing.PointF[],System.Byte[],PdfEdit.Drawing.XFillMode)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XGraphicsPath" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.Clone">
      <summary>
            Clones this instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddLine(System.Drawing.Point,System.Drawing.Point)">
      <summary>
            Adds a line segment to current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddLine(System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
            Adds  a line segment to current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddLine(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XPoint)">
      <summary>
            Adds  a line segment to current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddLine(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Adds  a line segment to current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddLines(System.Drawing.Point[])">
      <summary>
            Adds a series of connected line segments to current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddLines(System.Drawing.PointF[])">
      <summary>
            Adds a series of connected line segments to current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddLines(PdfEdit.Drawing.XPoint[])">
      <summary>
            Adds a series of connected line segments to current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddBezier(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
      <summary>
            Adds a cubic Bézier curve to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddBezier(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
            Adds a cubic Bézier curve to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddBezier(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XPoint)">
      <summary>
            Adds a cubic Bézier curve to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddBezier(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Adds a cubic Bézier curve to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddBeziers(System.Drawing.Point[])">
      <summary>
            Adds a sequence of connected cubic Bézier curves to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddBeziers(System.Drawing.PointF[])">
      <summary>
            Adds a sequence of connected cubic Bézier curves to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddBeziers(PdfEdit.Drawing.XPoint[])">
      <summary>
            Adds a sequence of connected cubic Bézier curves to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddCurve(System.Drawing.Point[])">
      <summary>
            Adds a spline curve to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddCurve(System.Drawing.PointF[])">
      <summary>
            Adds a spline curve to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddCurve(PdfEdit.Drawing.XPoint[])">
      <summary>
            Adds a spline curve to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddCurve(System.Drawing.Point[],System.Double)">
      <summary>
            Adds a spline curve to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddCurve(System.Drawing.PointF[],System.Double)">
      <summary>
            Adds a spline curve to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddCurve(PdfEdit.Drawing.XPoint[],System.Double)">
      <summary>
            Adds a spline curve to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddCurve(System.Drawing.Point[],System.Int32,System.Int32,System.Single)">
      <summary>
            Adds a spline curve to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddCurve(System.Drawing.PointF[],System.Int32,System.Int32,System.Single)">
      <summary>
            Adds a spline curve to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddCurve(PdfEdit.Drawing.XPoint[],System.Int32,System.Int32,System.Double)">
      <summary>
            Adds a spline curve to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddArc(System.Drawing.Rectangle,System.Double,System.Double)">
      <summary>
            Adds an elliptical arc to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddArc(System.Drawing.RectangleF,System.Double,System.Double)">
      <summary>
            Adds an elliptical arc to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddArc(PdfEdit.Drawing.XRect,System.Double,System.Double)">
      <summary>
            Adds an elliptical arc to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddArc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Adds an elliptical arc to the current figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddArc(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XSize,System.Double,System.Boolean,PdfEdit.Drawing.XSweepDirection)">
      <summary>
            Adds an elliptical arc to the current figure. The arc is specified WPF like.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddRectangle(System.Drawing.Rectangle)">
      <summary>
            Adds a rectangle to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddRectangle(System.Drawing.RectangleF)">
      <summary>
            Adds a rectangle to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddRectangle(PdfEdit.Drawing.XRect)">
      <summary>
            Adds a rectangle to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddRectangle(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Adds a rectangle to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddRectangles(System.Drawing.Rectangle[])">
      <summary>
            Adds a series of rectangles to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddRectangles(System.Drawing.RectangleF[])">
      <summary>
            Adds a series of rectangles to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddRectangles(PdfEdit.Drawing.XRect[])">
      <summary>
            Adds a series of rectangles to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddRoundedRectangle(System.Drawing.Rectangle,System.Drawing.Size)">
      <summary>
            Adds a rectangle with rounded corners to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddRoundedRectangle(System.Drawing.RectangleF,System.Drawing.SizeF)">
      <summary>
            Adds a rectangle with rounded corners to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddRoundedRectangle(PdfEdit.Drawing.XRect,System.Drawing.SizeF)">
      <summary>
            Adds a rectangle with rounded corners to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddRoundedRectangle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Adds a rectangle with rounded corners to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddEllipse(System.Drawing.Rectangle)">
      <summary>
            Adds an ellipse to the current path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddEllipse(System.Drawing.RectangleF)">
      <summary>
            Adds an ellipse to the current path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddEllipse(PdfEdit.Drawing.XRect)">
      <summary>
            Adds an ellipse to the current path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddEllipse(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Adds an ellipse to the current path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddPolygon(System.Drawing.Point[])">
      <summary>
            Adds a polygon to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddPolygon(System.Drawing.PointF[])">
      <summary>
            Adds a polygon to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddPolygon(PdfEdit.Drawing.XPoint[])">
      <summary>
            Adds a polygon to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddPie(System.Drawing.Rectangle,System.Double,System.Double)">
      <summary>
            Adds the outline of a pie shape to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddPie(System.Drawing.RectangleF,System.Double,System.Double)">
      <summary>
            Adds the outline of a pie shape to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddPie(PdfEdit.Drawing.XRect,System.Double,System.Double)">
      <summary>
            Adds the outline of a pie shape to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddPie(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Adds the outline of a pie shape to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddClosedCurve(System.Drawing.Point[])">
      <summary>
            Adds a closed curve to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddClosedCurve(System.Drawing.PointF[])">
      <summary>
            Adds a closed curve to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddClosedCurve(PdfEdit.Drawing.XPoint[])">
      <summary>
            Adds a closed curve to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddClosedCurve(System.Drawing.Point[],System.Double)">
      <summary>
            Adds a closed curve to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddClosedCurve(System.Drawing.PointF[],System.Double)">
      <summary>
            Adds a closed curve to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddClosedCurve(PdfEdit.Drawing.XPoint[],System.Double)">
      <summary>
            Adds a closed curve to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddPath(PdfEdit.Drawing.XGraphicsPath,System.Boolean)">
      <summary>
            Adds the specified path to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddString(System.String,PdfEdit.Drawing.XFontFamily,PdfEdit.Drawing.XFontStyle,System.Double,System.Drawing.Point,PdfEdit.Drawing.XStringFormat)">
      <summary>
            Adds a text string to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddString(System.String,PdfEdit.Drawing.XFontFamily,PdfEdit.Drawing.XFontStyle,System.Double,System.Drawing.PointF,PdfEdit.Drawing.XStringFormat)">
      <summary>
            Adds a text string to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddString(System.String,PdfEdit.Drawing.XFontFamily,PdfEdit.Drawing.XFontStyle,System.Double,PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XStringFormat)">
      <summary>
            Adds a text string to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddString(System.String,PdfEdit.Drawing.XFontFamily,PdfEdit.Drawing.XFontStyle,System.Double,System.Drawing.Rectangle,PdfEdit.Drawing.XStringFormat)">
      <summary>
            Adds a text string to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddString(System.String,PdfEdit.Drawing.XFontFamily,PdfEdit.Drawing.XFontStyle,System.Double,System.Drawing.RectangleF,PdfEdit.Drawing.XStringFormat)">
      <summary>
            Adds a text string to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.AddString(System.String,PdfEdit.Drawing.XFontFamily,PdfEdit.Drawing.XFontStyle,System.Double,PdfEdit.Drawing.XRect,PdfEdit.Drawing.XStringFormat)">
      <summary>
            Adds a text string to this path.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.CloseFigure">
      <summary>
            Closes the current figure and starts a new figure.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.StartFigure">
      <summary>
            Starts a new figure without closing the current figure.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XGraphicsPath.FillMode">
      <summary>
            Gets or sets an XFillMode that determines how the interiors of shapes are filled.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.Flatten">
      <summary>
            Converts each curve in this XGraphicsPath into a sequence of connected line segments. 
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.Flatten(PdfEdit.Drawing.XMatrix)">
      <summary>
            Converts each curve in this XGraphicsPath into a sequence of connected line segments. 
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.Flatten(PdfEdit.Drawing.XMatrix,System.Double)">
      <summary>
            Converts each curve in this XGraphicsPath into a sequence of connected line segments. 
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.Widen(PdfEdit.Drawing.XPen)">
      <summary>
            Replaces this path with curves that enclose the area that is filled when this path is drawn 
            by the specified pen.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.Widen(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XMatrix)">
      <summary>
            Replaces this path with curves that enclose the area that is filled when this path is drawn 
            by the specified pen.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XGraphicsPath.Widen(PdfEdit.Drawing.XPen,PdfEdit.Drawing.XMatrix,System.Double)">
      <summary>
            Replaces this path with curves that enclose the area that is filled when this path is drawn 
            by the specified pen.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XGraphicsPath.Internals">
      <summary>
            Grants access to internal objects of this class.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XGraphicsPathInternals">
      <summary>
            Provides access to the internal data structures of XGraphicsPath.
            This class prevents the public interface from pollution with internal functions.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XGraphicsPathInternals.GdiPath">
      <summary>
            Gets the underlying GDI+ path object.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XGraphicsState">
      <summary>
            Represents the internal state of an XGraphics object.
            This class is used as a handle for restoring the context.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XImage">
      <summary>
            Defines an object used to draw image files (bmp, png, jpeg, gif) and PDF forms.
            An abstract base class that provides functionality for the Bitmap and Metafile descended classes.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XImage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XImage" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XImage.op_Implicit(System.Drawing.Image)~PdfEdit.Drawing.XImage">
      <summary>
            Implicit conversion from Image to XImage.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XImage.FromGdiPlusImage(System.Drawing.Image)">
      <summary>
            Conversion from Image to XImage.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XImage.FromFile(System.String)">
      <summary>
            Creates an image from the specified file.
            </summary>
      <param name="path">The path to a BMP, PNG, GIF, JPEG, TIFF, or PDF file.</param>
    </member>
    <member name="M:PdfEdit.Drawing.XImage.FromStream(System.IO.Stream)">
      <summary>
            Creates an image from the specified stream.<br />
            Silverlight supports PNG and JPEF only.
            </summary>
      <param name="stream">The stream containing a BMP, PNG, GIF, JPEG, TIFF, or PDF file.</param>
    </member>
    <member name="M:PdfEdit.Drawing.XImage.ExistsFile(System.String)">
      <summary>
            Tests if a file exist. Supports PDF files with page number suffix.
            </summary>
      <param name="path">The path to a BMP, PNG, GIF, JPEG, TIFF, or PDF file.</param>
    </member>
    <member name="M:PdfEdit.Drawing.XImage.Dispose">
      <summary>
            Under construction
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XImage.Dispose(System.Boolean)">
      <summary>
            Disposes underlying GDI+ object.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XImage.Width">
      <summary>
            Gets the width of the image.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XImage.Height">
      <summary>
            Gets the height of the image.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XImage.PointWidth">
      <summary>
            Gets the width of the image in point.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XImage.PointHeight">
      <summary>
            Gets the height of the image in point.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XImage.PixelWidth">
      <summary>
            Gets the width of the image in pixels.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XImage.PixelHeight">
      <summary>
            Gets the height of the image in pixels.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XImage.Size">
      <summary>
            Gets the size in point of the image.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XImage.HorizontalResolution">
      <summary>
            Gets the horizontal resolution of the image.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XImage.VerticalResolution">
      <summary>
            Gets the vertical resolution of the image.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XImage.Interpolate">
      <summary>
            Gets or sets a flag indicating whether image interpolation is to be performed. 
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XImage.Format">
      <summary>
            Gets the format of the image.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XImageFormat">
      <summary>
            Specifies the format of the image.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XImageFormat.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XImageFormat.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XImageFormat.Png">
      <summary>
            Gets the Portable Network Graphics (PNG) image format. 
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XImageFormat.Gif">
      <summary>
            Gets the Graphics Interchange Format (GIF) image format.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XImageFormat.Jpeg">
      <summary>
            Gets the Joint Photographic Experts Group (JPEG) image format.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XImageFormat.Tiff">
      <summary>
            Gets the Tag Image File Format (TIFF) image format.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XImageFormat.Pdf">
      <summary>
            Gets the Portable Document Format (PDF) image format
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XImageFormat.Icon">
      <summary>
            Gets the Windows icon image format.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XLinearGradientBrush">
      <summary>
            Defines a Brush with a linear gradient.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XLinearGradientBrush.#ctor(System.Drawing.Point,System.Drawing.Point,PdfEdit.Drawing.XColor,PdfEdit.Drawing.XColor)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XLinearGradientBrush" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XLinearGradientBrush.#ctor(System.Drawing.PointF,System.Drawing.PointF,PdfEdit.Drawing.XColor,PdfEdit.Drawing.XColor)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XLinearGradientBrush" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XLinearGradientBrush.#ctor(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XColor,PdfEdit.Drawing.XColor)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XLinearGradientBrush" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XLinearGradientBrush.#ctor(System.Drawing.Rectangle,PdfEdit.Drawing.XColor,PdfEdit.Drawing.XColor,PdfEdit.Drawing.XLinearGradientMode)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XLinearGradientBrush" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XLinearGradientBrush.#ctor(System.Drawing.RectangleF,PdfEdit.Drawing.XColor,PdfEdit.Drawing.XColor,PdfEdit.Drawing.XLinearGradientMode)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XLinearGradientBrush" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XLinearGradientBrush.#ctor(PdfEdit.Drawing.XRect,PdfEdit.Drawing.XColor,PdfEdit.Drawing.XColor,PdfEdit.Drawing.XLinearGradientMode)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XLinearGradientBrush" /> class.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XLinearGradientBrush.Transform">
      <summary>
            Gets or sets an XMatrix that defines a local geometric transform for this LinearGradientBrush.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XLinearGradientBrush.TranslateTransform(System.Double,System.Double)">
      <summary>
            Translates the brush with the specified offset.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XLinearGradientBrush.TranslateTransform(System.Double,System.Double,PdfEdit.Drawing.XMatrixOrder)">
      <summary>
            Translates the brush with the specified offset.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XLinearGradientBrush.ScaleTransform(System.Double,System.Double)">
      <summary>
            Scales the brush with the specified scalars.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XLinearGradientBrush.ScaleTransform(System.Double,System.Double,PdfEdit.Drawing.XMatrixOrder)">
      <summary>
            Scales the brush with the specified scalars.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XLinearGradientBrush.RotateTransform(System.Double)">
      <summary>
            Rotates the brush with the specified angle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XLinearGradientBrush.RotateTransform(System.Double,PdfEdit.Drawing.XMatrixOrder)">
      <summary>
            Rotates the brush with the specified angle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XLinearGradientBrush.MultiplyTransform(PdfEdit.Drawing.XMatrix)">
      <summary>
            Multiply the brush transformation matrix with the specified matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XLinearGradientBrush.MultiplyTransform(PdfEdit.Drawing.XMatrix,PdfEdit.Drawing.XMatrixOrder)">
      <summary>
            Multiply the brush transformation matrix with the specified matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XLinearGradientBrush.ResetTransform">
      <summary>
            Resets the brush transformation matrix with identity matrix.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XMatrix">
      <summary>
            Represents a 3-by-3 matrix that represents an affine 2D transformation.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the XMatrix struct.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XMatrix.Identity">
      <summary>
            Gets the identity matrix. 
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.SetIdentity">
      <summary>
            Sets this matrix into an identity matrix.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XMatrix.IsIdentity">
      <summary>
            Gets a value indicating whether this matrix instance is the identity matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.GetElements">
      <summary>
            Gets an array of double values that represents the elements of this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.op_Multiply(PdfEdit.Drawing.XMatrix,PdfEdit.Drawing.XMatrix)">
      <summary>
            Multiplies two matrices.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Multiply(PdfEdit.Drawing.XMatrix,PdfEdit.Drawing.XMatrix)">
      <summary>
            Multiplies two matrices.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Append(PdfEdit.Drawing.XMatrix)">
      <summary>
            Appends the specified matrix to this matrix. 
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Prepend(PdfEdit.Drawing.XMatrix)">
      <summary>
            Prepends the specified matrix to this matrix. 
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Multiply(PdfEdit.Drawing.XMatrix)">
      <summary>
            Appends the specified matrix to this matrix. 
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.MultiplyPrepend(PdfEdit.Drawing.XMatrix)">
      <summary>
            Prepends the specified matrix to this matrix. 
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Multiply(PdfEdit.Drawing.XMatrix,PdfEdit.Drawing.XMatrixOrder)">
      <summary>
            Multiplies this matrix with the specified matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Translate(System.Double,System.Double)">
      <summary>
            Appends a translation of the specified offsets to this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.TranslateAppend(System.Double,System.Double)">
      <summary>
            Appends a translation of the specified offsets to this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.TranslatePrepend(System.Double,System.Double)">
      <summary>
            Prepends a translation of the specified offsets to this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Translate(System.Double,System.Double,PdfEdit.Drawing.XMatrixOrder)">
      <summary>
            Translates the matrix with the specified offsets.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Scale(System.Double,System.Double)">
      <summary>
            Appends the specified scale vector to this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.ScaleAppend(System.Double,System.Double)">
      <summary>
            Appends the specified scale vector to this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.ScalePrepend(System.Double,System.Double)">
      <summary>
            Prepends the specified scale vector to this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Scale(System.Double,System.Double,PdfEdit.Drawing.XMatrixOrder)">
      <summary>
            Scales the matrix with the specified scalars.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Scale(System.Double)">
      <summary>
            Scales the matrix with the specified scalar.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.ScaleAppend(System.Double)">
      <summary>
            Appends the specified scale vector to this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.ScalePrepend(System.Double)">
      <summary>
            Prepends the specified scale vector to this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Scale(System.Double,PdfEdit.Drawing.XMatrixOrder)">
      <summary>
            Scales the matrix with the specified scalar.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Function is obsolete.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.ScaleAtAppend(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Apppends the specified scale about the specified point of this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Prepends the specified scale about the specified point of this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Rotate(System.Double)">
      <summary>
            Function is obsolete.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.RotateAppend(System.Double)">
      <summary>
            Appends a rotation of the specified angle to this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.RotatePrepend(System.Double)">
      <summary>
            Prepends a rotation of the specified angle to this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Rotate(System.Double,PdfEdit.Drawing.XMatrixOrder)">
      <summary>
            Rotates the matrix with the specified angle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.RotateAt(System.Double,System.Double,System.Double)">
      <summary>
            Function is obsolete.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.RotateAtAppend(System.Double,System.Double,System.Double)">
      <summary>
            Appends a rotation of the specified angle at the specified point to this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.RotateAtPrepend(System.Double,System.Double,System.Double)">
      <summary>
            Prepends a rotation of the specified angle at the specified point to this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.RotateAt(System.Double,PdfEdit.Drawing.XPoint)">
      <summary>
            Rotates the matrix with the specified angle at the specified point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.RotateAtAppend(System.Double,PdfEdit.Drawing.XPoint)">
      <summary>
            Appends a rotation of the specified angle at the specified point to this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.RotateAtPrepend(System.Double,PdfEdit.Drawing.XPoint)">
      <summary>
            Prepends a rotation of the specified angle at the specified point to this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.RotateAt(System.Double,PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XMatrixOrder)">
      <summary>
            Rotates the matrix with the specified angle at the specified point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Shear(System.Double,System.Double)">
      <summary>
            Function is obsolete.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.ShearAppend(System.Double,System.Double)">
      <summary>
            Appends a skew of the specified degrees in the x and y dimensions to this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.ShearPrepend(System.Double,System.Double)">
      <summary>
            Prepends a skew of the specified degrees in the x and y dimensions to this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Shear(System.Double,System.Double,PdfEdit.Drawing.XMatrixOrder)">
      <summary>
            Shears the matrix with the specified scalars.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Skew(System.Double,System.Double)">
      <summary>
            Function is obsolete.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.SkewAppend(System.Double,System.Double)">
      <summary>
            Appends a skew of the specified degrees in the x and y dimensions to this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.SkewPrepend(System.Double,System.Double)">
      <summary>
            Prepends a skew of the specified degrees in the x and y dimensions to this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Transform(PdfEdit.Drawing.XPoint)">
      <summary>
            Transforms the specified point by this matrix and returns the result.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Transform(PdfEdit.Drawing.XPoint[])">
      <summary>
            Transforms the specified points by this matrix. 
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.TransformPoints(PdfEdit.Drawing.XPoint[])">
      <summary>
            Multiplies all points of the specified array with the this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.TransformPoints(System.Drawing.Point[])">
      <summary>
            Multiplies all points of the specified array with the this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Transform(PdfEdit.Drawing.XVector)">
      <summary>
            Transforms the specified vector by this Matrix and returns the result.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Transform(PdfEdit.Drawing.XVector[])">
      <summary>
            Transforms the specified vectors by this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.TransformVectors(System.Drawing.PointF[])">
      <summary>
            Multiplies all vectors of the specified array with the this matrix. The translation elements 
            of this matrix (third row) are ignored.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XMatrix.Determinant">
      <summary>
            Gets the determinant of this matrix.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XMatrix.HasInverse">
      <summary>
            Gets a value that indicates whether this matrix is invertible.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Invert">
      <summary>
            Inverts the matrix.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XMatrix.M11">
      <summary>
            Gets or sets the value of the first row and first column of this matrix.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XMatrix.M12">
      <summary>
            Gets or sets the value of the first row and second column of this matrix.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XMatrix.M21">
      <summary>
            Gets or sets the value of the second row and first column of this matrix.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XMatrix.M22">
      <summary>
            Gets or sets the value of the second row and second column of this matrix.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XMatrix.OffsetX">
      <summary>
            Gets or sets the value of the third row and first column of this matrix.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XMatrix.OffsetY">
      <summary>
            Gets or sets the value of the third row and second  column of this matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.ToGdiMatrix">
      <summary>
            Converts this matrix to a System.Drawing.Drawing2D.Matrix object.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.op_Explicit(PdfEdit.Drawing.XMatrix)~System.Drawing.Drawing2D.Matrix">
      <summary>
            Explicitly converts a XMatrix to a Matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.op_Implicit(System.Drawing.Drawing2D.Matrix)~PdfEdit.Drawing.XMatrix">
      <summary>
            Implicitly converts a Matrix to an XMatrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.op_Equality(PdfEdit.Drawing.XMatrix,PdfEdit.Drawing.XMatrix)">
      <summary>
            Determines whether the two matrices are equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.op_Inequality(PdfEdit.Drawing.XMatrix,PdfEdit.Drawing.XMatrix)">
      <summary>
            Determines whether the two matrices are not equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Equals(PdfEdit.Drawing.XMatrix,PdfEdit.Drawing.XMatrix)">
      <summary>
            Determines whether the two matrices are equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Equals(System.Object)">
      <summary>
            Determines whether this matrix is equal to the specified object.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Equals(PdfEdit.Drawing.XMatrix)">
      <summary>
            Determines whether this matrix is equal to the specified matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.Parse(System.String)">
      <summary>
            Parses a matrix from a string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.ToString">
      <summary>
            Converts this XMatrix to a human readable string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XMatrix.ToString(System.IFormatProvider)">
      <summary>
            Converts this XMatrix to a human readable string.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XPdfForm">
      <summary>
            Represents a so called 'PDF form external object', which is typically an imported page of an external
            PDF document. XPdfForm objects are used like images to draw an existing PDF page of an external
            document in the current document. XPdfForm objects can only be placed in PDF documents. If you try
            to draw them using a XGraphics based on an GDI+ context no action is taken if no placeholder image
            is specified. Otherwise the place holder is drawn.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPdfForm.FromFile(System.String)">
      <summary>
            Creates an XPdfForm from a file.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPdfForm.FromStream(System.IO.Stream)">
      <summary>
            Creates an XPdfForm from a stream.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPdfForm.Dispose(System.Boolean)">
      <summary>
            Frees the memory occupied by the underlying imported PDF document, even if other XPdfForm objects
            refer to this document. A reuse of this object doesn't fail, because the underlying PDF document
            is re-imported if necessary.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPdfForm.PlaceHolder">
      <summary>
            Gets or sets an image that is used for drawing if the current XGraphics object cannot handle
            PDF forms. A place holder is useful for showing a preview of a page on the display, because
            PDFEdit cannot render native PDF objects.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPdfForm.Page">
      <summary>
            Gets the underlying PdfPage (if one exists).
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPdfForm.PageCount">
      <summary>
            Gets the number of pages in the PDF form.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPdfForm.Width">
      <summary>
            Gets the width in point of the page identified by the property PageNumber.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPdfForm.Height">
      <summary>
            Gets the height in point of the page identified by the property PageNumber.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPdfForm.PointWidth">
      <summary>
            Gets the width in point of the page identified by the property PageNumber.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPdfForm.PointHeight">
      <summary>
            Gets the height in point of the page identified by the property PageNumber.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPdfForm.PixelWidth">
      <summary>
            Gets the width in point of the page identified by the property PageNumber.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPdfForm.PixelHeight">
      <summary>
            Gets the height in point of the page identified by the property PageNumber.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPdfForm.Size">
      <summary>
            Get the size of the page identified by the property PageNumber.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPdfForm.Transform">
      <summary>
            Gets or sets the transformation matrix.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPdfForm.PageNumber">
      <summary>
            Gets or sets the page number in the external PDF document this object refers to. The page number
            is one-based, i.e. it is in the range from 1 to PageCount. The default value is 1.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPdfForm.PageIndex">
      <summary>
            Gets or sets the page index in the external PDF document this object refers to. The page index
            is zero-based, i.e. it is in the range from 0 to PageCount - 1. The default value is 0.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPdfForm.ExtractPageNumber(System.String,System.Int32@)">
      <summary>
            Extracts the page number if the path has the form 'MyFile.pdf#123' and returns
            the actual path without the number sign and the following digits.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XPen">
      <summary>
            Defines an object used to draw lines and curves.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPen.#ctor(PdfEdit.Drawing.XColor)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XPen" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPen.#ctor(PdfEdit.Drawing.XColor,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XPen" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPen.#ctor(PdfEdit.Drawing.XPen)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XPen" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPen.Clone">
      <summary>
            Clones this instance.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPen.Color">
      <summary>
            Gets or sets the color.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPen.Width">
      <summary>
            Gets or sets the width.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPen.LineJoin">
      <summary>
            Gets or sets the line join.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPen.LineCap">
      <summary>
            Gets or sets the line cap.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPen.MiterLimit">
      <summary>
            Gets or sets the miter limit.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPen.DashStyle">
      <summary>
            Gets or sets the dash style.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPen.DashOffset">
      <summary>
            Gets or sets the dash offset.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPen.DashPattern">
      <summary>
            Gets or sets the dash pattern.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPen.Overprint">
      <summary>
            Gets or sets a value indicating whether the pen enables overprint when used in a PDF document.
            Experimental, takes effect only on CMYK color mode.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPen.op_Implicit(System.Drawing.Pen)~PdfEdit.Drawing.XPen">
      <summary>
            Implicit conversion from Pen to XPen
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XPens">
      <summary>
            Pens for all the pre-defined colors.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.AliceBlue">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.AntiqueWhite">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Aqua">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Aquamarine">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Azure">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Beige">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Bisque">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Black">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.BlanchedAlmond">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Blue">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.BlueViolet">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Brown">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.BurlyWood">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.CadetBlue">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Chartreuse">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Chocolate">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Coral">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.CornflowerBlue">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Cornsilk">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Crimson">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Cyan">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DarkBlue">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DarkCyan">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DarkGoldenrod">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DarkGray">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DarkGreen">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DarkKhaki">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DarkMagenta">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DarkOliveGreen">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DarkOrange">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DarkOrchid">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DarkRed">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DarkSalmon">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DarkSeaGreen">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DarkSlateBlue">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DarkSlateGray">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DarkTurquoise">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DarkViolet">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DeepPink">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DeepSkyBlue">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DimGray">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.DodgerBlue">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Firebrick">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.FloralWhite">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.ForestGreen">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Fuchsia">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Gainsboro">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.GhostWhite">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Gold">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Goldenrod">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Gray">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Green">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.GreenYellow">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Honeydew">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.HotPink">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.IndianRed">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Indigo">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Ivory">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Khaki">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Lavender">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.LavenderBlush">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.LawnGreen">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.LemonChiffon">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.LightBlue">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.LightCoral">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.LightCyan">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.LightGoldenrodYellow">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.LightGray">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.LightGreen">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.LightPink">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.LightSalmon">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.LightSeaGreen">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.LightSkyBlue">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.LightSlateGray">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.LightSteelBlue">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.LightYellow">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Lime">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.LimeGreen">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Linen">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Magenta">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Maroon">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.MediumAquamarine">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.MediumBlue">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.MediumOrchid">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.MediumPurple">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.MediumSeaGreen">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.MediumSlateBlue">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.MediumSpringGreen">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.MediumTurquoise">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.MediumVioletRed">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.MidnightBlue">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.MintCream">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.MistyRose">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Moccasin">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.NavajoWhite">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Navy">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.OldLace">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Olive">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.OliveDrab">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Orange">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.OrangeRed">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Orchid">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.PaleGoldenrod">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.PaleGreen">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.PaleTurquoise">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.PaleVioletRed">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.PapayaWhip">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.PeachPuff">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Peru">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Pink">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Plum">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.PowderBlue">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Purple">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Red">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.RosyBrown">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.RoyalBlue">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.SaddleBrown">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Salmon">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.SandyBrown">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.SeaGreen">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.SeaShell">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Sienna">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Silver">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.SkyBlue">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.SlateBlue">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.SlateGray">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Snow">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.SpringGreen">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.SteelBlue">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Tan">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Teal">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Thistle">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Tomato">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Transparent">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Turquoise">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Violet">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Wheat">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.White">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.WhiteSmoke">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.Yellow">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPens.YellowGreen">
      <summary>Gets a pre-defined XPen object.</summary>
    </member>
    <member name="T:PdfEdit.Drawing.XPoint">
      <summary>
            Represents a pair of floating point x- and y-coordinates that defines a point
            in a two-dimensional plane.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the XPoint class with the specified coordinates.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.#ctor(System.Drawing.Point)">
      <summary>
            Initializes a new instance of the XPoint class with the specified point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.#ctor(System.Drawing.PointF)">
      <summary>
            Initializes a new instance of the XPoint class with the specified point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.op_Equality(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XPoint)">
      <summary>
            Determines whether two points are equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.op_Inequality(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XPoint)">
      <summary>
            Determines whether two points are not equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.Equals(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XPoint)">
      <summary>
            Indicates whether the specified points are equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.Equals(PdfEdit.Drawing.XPoint)">
      <summary>
            Indicates whether this instance and a specified point are equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.Parse(System.String)">
      <summary>
            Parses the point from a string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.ParsePoints(System.String)">
      <summary>
            Parses an array of points from a string.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPoint.X">
      <summary>
            Gets the x-coordinate of this XPoint.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XPoint.Y">
      <summary>
            Gets the x-coordinate of this XPoint.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.ToPointF">
      <summary>
            Converts this XPoint to a System.Drawing.Point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.ToString">
      <summary>
            Converts this XPoint to a human readable string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.ToString(System.IFormatProvider)">
      <summary>
            Converts this XPoint to a human readable string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.Offset(System.Double,System.Double)">
      <summary>
            Offsets the x and y value of this point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.op_Addition(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XVector)">
      <summary>
            Adds a point and a vector.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.op_Addition(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XSize)">
      <summary>
            Adds a point and a size.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.Add(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XVector)">
      <summary>
            Adds a point and a vector.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.op_Subtraction(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XVector)">
      <summary>
            Subtracts a vector from a point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.Subtract(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XVector)">
      <summary>
            Subtracts a vector from a point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.op_Subtraction(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XPoint)">
      <summary>
            Subtracts a point from a point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.op_Subtraction(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XSize)">
      <summary>
            Subtracts a size from a point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.Subtract(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XPoint)">
      <summary>
            Subtracts a point from a point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.op_Multiply(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XMatrix)">
      <summary>
            Multiplies a point with a matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.Multiply(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XMatrix)">
      <summary>
            Multiplies a point with a matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.op_Multiply(PdfEdit.Drawing.XPoint,System.Double)">
      <summary>
            Multiplies a point with a scalar value.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.op_Multiply(System.Double,PdfEdit.Drawing.XPoint)">
      <summary>
            Multiplies a point with a scalar value.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.op_Explicit(PdfEdit.Drawing.XPoint)~PdfEdit.Drawing.XSize">
      <summary>
            Performs an explicit conversion from XPoint to XSize.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPoint.op_Explicit(PdfEdit.Drawing.XPoint)~PdfEdit.Drawing.XVector">
      <summary>
            Performs an explicit conversion from XPoint to XVector.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XPrivateFontCollection">
      <summary>
             Makes fonts that are not installed on the system available within the current application domain.<br />
             In Silverlight required for all fonts used in PDF documents.
             </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPrivateFontCollection.Add(System.IO.Stream)">
      <summary>
            Adds the specified font data to the global PrivateFontCollection.
            Family name and style are automatically retrieved from the font.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XPrivateFontCollection.Add(System.Byte[])">
      <summary>
            Adds the specified font data to the global PrivateFontCollection.
            Family name and style are automatically retrieved from the font.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XRect">
      <summary>
            Stores a set of four floating-point numbers that represent the location and size of a rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the XRect class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.#ctor(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XPoint)">
      <summary>
            Initializes a new instance of the XRect class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.#ctor(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XVector)">
      <summary>
            Initializes a new instance of the XRect class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.#ctor(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XSize)">
      <summary>
            Initializes a new instance of the XRect class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.#ctor(PdfEdit.Drawing.XSize)">
      <summary>
            Initializes a new instance of the XRect class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.#ctor(System.Drawing.PointF,System.Drawing.SizeF)">
      <summary>
            Initializes a new instance of the XRect class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.#ctor(System.Drawing.RectangleF)">
      <summary>
            Initializes a new instance of the XRect class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a rectangle from for straight lines.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.op_Equality(PdfEdit.Drawing.XRect,PdfEdit.Drawing.XRect)">
      <summary>
            Determines whether the two rectangles are equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.op_Inequality(PdfEdit.Drawing.XRect,PdfEdit.Drawing.XRect)">
      <summary>
            Determines whether the two rectangles are not equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Equals(PdfEdit.Drawing.XRect,PdfEdit.Drawing.XRect)">
      <summary>
            Determines whether the two rectangles are equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Equals(System.Object)">
      <summary>
            Determines whether this instance and the specified object are equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Equals(PdfEdit.Drawing.XRect)">
      <summary>
            Determines whether this instance and the specified rect are equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Parse(System.String)">
      <summary>
            Parses the rectangle from a string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.ToString">
      <summary>
            Converts this XRect to a human readable string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.ToString(System.IFormatProvider)">
      <summary>
            Converts this XRect to a human readable string.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XRect.Empty">
      <summary>
            Gets the empty rectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XRect.IsEmpty">
      <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XRect.Location">
      <summary>
            Gets or sets the location of the rectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XRect.Size">
      <summary>
            Gets or sets the size of the rectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XRect.X">
      <summary>
            Gets or sets the X value of the rectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XRect.Y">
      <summary>
            Gets or sets the Y value of the rectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XRect.Width">
      <summary>
            Gets or sets the width of the rectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XRect.Height">
      <summary>
            Gets or sets the height of the rectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XRect.Left">
      <summary>
            Gets the x-axis value of the left side of the rectangle. 
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XRect.Top">
      <summary>
            Gets the y-axis value of the top side of the rectangle. 
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XRect.Right">
      <summary>
            Gets the x-axis value of the right side of the rectangle. 
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XRect.Bottom">
      <summary>
            Gets the y-axis value of the bottom side of the rectangle. 
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XRect.TopLeft">
      <summary>
            Gets the position of the top-left corner of the rectangle. 
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XRect.TopRight">
      <summary>
            Gets the position of the top-right corner of the rectangle. 
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XRect.BottomLeft">
      <summary>
            Gets the position of the bottom-left corner of the rectangle. 
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XRect.BottomRight">
      <summary>
            Gets the position of the bottom-right corner of the rectangle. 
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XRect.Center">
      <summary>
            Gets the center of the rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Contains(PdfEdit.Drawing.XPoint)">
      <summary>
            Indicates whether the rectangle contains the specified point. 
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Contains(System.Double,System.Double)">
      <summary>
            Indicates whether the rectangle contains the specified point. 
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Contains(PdfEdit.Drawing.XRect)">
      <summary>
            Indicates whether the rectangle contains the specified rectangle. 
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.IntersectsWith(PdfEdit.Drawing.XRect)">
      <summary>
            Indicates whether the specified rectangle intersects with the current rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Intersect(PdfEdit.Drawing.XRect)">
      <summary>
            Sets current rectangle to the intersection of the current rectangle and the specified rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Intersect(PdfEdit.Drawing.XRect,PdfEdit.Drawing.XRect)">
      <summary>
            Returns the intersection of two rectangles.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Union(PdfEdit.Drawing.XRect)">
      <summary>
            Sets current rectangle to the union of the current rectangle and the specified rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Union(PdfEdit.Drawing.XRect,PdfEdit.Drawing.XRect)">
      <summary>
            Returns the union of two rectangles.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Union(PdfEdit.Drawing.XPoint)">
      <summary>
            Sets current rectangle to the union of the current rectangle and the specified point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Union(PdfEdit.Drawing.XRect,PdfEdit.Drawing.XPoint)">
      <summary>
            Returns the intersection of a rectangle and a point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Offset(PdfEdit.Drawing.XVector)">
      <summary>
            Moves a rectangle by the specified amount.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Offset(System.Double,System.Double)">
      <summary>
            Moves a rectangle by the specified amount.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Offset(PdfEdit.Drawing.XRect,PdfEdit.Drawing.XVector)">
      <summary>
            Returns a rectangle that is offset from the specified rectangle by using the specified vector. 
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Offset(PdfEdit.Drawing.XRect,System.Double,System.Double)">
      <summary>
            Returns a rectangle that is offset from the specified rectangle by using specified horizontal and vertical amounts. 
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.op_Addition(PdfEdit.Drawing.XRect,PdfEdit.Drawing.XPoint)">
      <summary>
            Translates the rectangle by adding the specified point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.op_Subtraction(PdfEdit.Drawing.XRect,PdfEdit.Drawing.XPoint)">
      <summary>
            Translates the rectangle by subtracting the specified point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Inflate(PdfEdit.Drawing.XSize)">
      <summary>
            Expands the rectangle by using the specified Size, in all directions.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Inflate(System.Double,System.Double)">
      <summary>
            Expands or shrinks the rectangle by using the specified width and height amounts, in all directions.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Inflate(PdfEdit.Drawing.XRect,PdfEdit.Drawing.XSize)">
      <summary>
            Returns the rectangle that results from expanding the specified rectangle by the specified Size, in all directions.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Inflate(PdfEdit.Drawing.XRect,System.Double,System.Double)">
      <summary>
            Creates a rectangle that results from expanding or shrinking the specified rectangle by the specified width and height amounts, in all directions.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Transform(PdfEdit.Drawing.XRect,PdfEdit.Drawing.XMatrix)">
      <summary>
            Returns the rectangle that results from applying the specified matrix to the specified rectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Transform(PdfEdit.Drawing.XMatrix)">
      <summary>
            Transforms the rectangle by applying the specified matrix.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.Scale(System.Double,System.Double)">
      <summary>
            Multiplies the size of the current rectangle by the specified x and y values.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.ToRectangleF">
      <summary>
            Converts this instance to a System.Drawing.RectangleF.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.op_Implicit(System.Drawing.Rectangle)~PdfEdit.Drawing.XRect">
      <summary>
            Performs an implicit  conversion from a System.Drawing.Rectangle to an XRect.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XRect.op_Implicit(System.Drawing.RectangleF)~PdfEdit.Drawing.XRect">
      <summary>
            Performs an implicit  conversion from a System.Drawing.RectangleF to an XRect.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XSize">
      <summary>
            Represents a pair of floating-point numbers, typically the width and height of a
            graphical object.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSize.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the XPoint class with the specified values.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSize.op_Equality(PdfEdit.Drawing.XSize,PdfEdit.Drawing.XSize)">
      <summary>
            Determines whether two size objects are equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSize.op_Inequality(PdfEdit.Drawing.XSize,PdfEdit.Drawing.XSize)">
      <summary>
            Determines whether two size objects are not equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSize.Equals(PdfEdit.Drawing.XSize,PdfEdit.Drawing.XSize)">
      <summary>
            Indicates whether this two instance are equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSize.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSize.Equals(PdfEdit.Drawing.XSize)">
      <summary>
            Indicates whether this instance and a specified size are equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSize.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSize.Parse(System.String)">
      <summary>
            Parses the size from a string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSize.ToPointF">
      <summary>
            Converts this XSize to a PointF.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSize.ToXPoint">
      <summary>
            Converts this XSize to an XPoint.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSize.ToXVector">
      <summary>
            Converts this XSize to an XVector.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSize.ToSizeF">
      <summary>
            Converts this XSize to a SizeF.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSize.FromSize(System.Drawing.Size)">
      <summary>
            Creates an XSize from a System.Drawing.Size.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSize.op_Implicit(System.Drawing.Size)~PdfEdit.Drawing.XSize">
      <summary>
            Implicit conversion from XSize to System.Drawing.Size. The conversion must be implicit because the
            WinForms designer uses it.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSize.FromSizeF(System.Drawing.SizeF)">
      <summary>
            Creates an XSize from a System.Drawing.Size.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSize.ToString">
      <summary>
            Converts this XSize to a human readable string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSize.ToString(System.IFormatProvider)">
      <summary>
            Converts this XSize to a human readable string.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XSize.Empty">
      <summary>
            Returns an empty size, i.e. a size with a width or height less than 0.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XSize.IsEmpty">
      <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XSize.Width">
      <summary>
            Gets or sets the width.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XSize.Height">
      <summary>
            Gets or sets the height.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSize.op_Explicit(PdfEdit.Drawing.XSize)~PdfEdit.Drawing.XVector">
      <summary>
            Performs an explicit conversion from XSize to XVector.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSize.op_Explicit(PdfEdit.Drawing.XSize)~PdfEdit.Drawing.XPoint">
      <summary>
            Performs an explicit conversion from XSize to XPoint.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XSolidBrush">
      <summary>
            Defines a single color object used to fill shapes and draw text.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSolidBrush.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XSolidBrush" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSolidBrush.#ctor(PdfEdit.Drawing.XColor)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XSolidBrush" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XSolidBrush.#ctor(PdfEdit.Drawing.XSolidBrush)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XSolidBrush" /> class.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XSolidBrush.Color">
      <summary>
            Gets or sets the color of this brush.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XSolidBrush.Overprint">
      <summary>
            Gets or sets a value indicating whether the brush enables overprint when used in a PDF document.
            Experimental, takes effect only on CMYK color mode.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XStringFormat">
      <summary>
            Represents the text layout information.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XStringFormat.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Drawing.XStringFormat" /> class.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormat.Alignment">
      <summary>
            Gets or sets horizontal text alignment information.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormat.LineAlignment">
      <summary>
            Gets or sets the line alignment.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormat.Comb">
      <summary>
            Support PdfAcroFieldFlags.Comb
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormat.CombWidth">
      <summary>
            Width of a single comb for the output-string
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormat.Default">
      <summary>
            Gets a new XStringFormat object that aligns the text left on the base line.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormat.TopLeft">
      <summary>
            Gets a new XStringFormat object that aligns the text top left of the layout rectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormat.Center">
      <summary>
            Gets a new XStringFormat object that centers the text in the middle of the layout rectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormat.TopCenter">
      <summary>
            Gets a new XStringFormat object that centers the text at the top of the layout rectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormat.BottomCenter">
      <summary>
            Gets a new XStringFormat object that centers the text at the bottom of the layout rectangle.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XStringFormats">
      <summary>
            Represents predefined text layouts.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormats.Default">
      <summary>
            Gets a new XStringFormat object that aligns the text left on the base line.
            This is the same as BaseLineLeft.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormats.BaseLineLeft">
      <summary>
            Gets a new XStringFormat object that aligns the text left on the base line.
            This is the same as Default.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormats.TopLeft">
      <summary>
            Gets a new XStringFormat object that aligns the text top left of the layout rectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormats.CenterLeft">
      <summary>
            Gets a new XStringFormat object that aligns the text center left of the layout rectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormats.BottomLeft">
      <summary>
            Gets a new XStringFormat object that aligns the text bottom left of the layout rectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormats.BaseLineCenter">
      <summary>
            Gets a new XStringFormat object that centers the text in the middle of the base line.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormats.TopCenter">
      <summary>
            Gets a new XStringFormat object that centers the text at the top of the layout rectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormats.Center">
      <summary>
            Gets a new XStringFormat object that centers the text in the middle of the layout rectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormats.BottomCenter">
      <summary>
            Gets a new XStringFormat object that centers the text at the bottom of the layout rectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormats.BaseLineRight">
      <summary>
            Gets a new XStringFormat object that aligns the text in right on the base line.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormats.TopRight">
      <summary>
            Gets a new XStringFormat object that aligns the text top right of the layout rectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormats.CenterRight">
      <summary>
            Gets a new XStringFormat object that aligns the text center right of the layout rectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XStringFormats.BottomRight">
      <summary>
            Gets a new XStringFormat object that aligns the text at the bottom right of the layout rectangle.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XUnit">
      <summary>
            Represents a value and its unit of measure. The structure converts implicitly from and to
            double with a value measured in point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XUnit.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the XUnit class with type set to point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XUnit.#ctor(System.Double,PdfEdit.Drawing.XGraphicsUnit)">
      <summary>
            Initializes a new instance of the XUnit class.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XUnit.Value">
      <summary>
            Gets the raw value of the object without any conversion.
            To determine the XGraphicsUnit use property <code>Type</code>.
            To get the value in point use the implicit conversion to double.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XUnit.Type">
      <summary>
            Gets the unit of measure.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XUnit.Point">
      <summary>
            Gets or sets the value in point.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XUnit.Inch">
      <summary>
            Gets or sets the value in inch.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XUnit.Millimeter">
      <summary>
            Gets or sets the value in millimeter.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XUnit.Centimeter">
      <summary>
            Gets or sets the value in centimeter.
            </summary>
    </member>
    <member name="P:PdfEdit.Drawing.XUnit.Presentation">
      <summary>
            Gets or sets the value in presentation units (1/96 inch).
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XUnit.ToString(System.IFormatProvider)">
      <summary>
            Returns the object as string using the format information.
            The unit of measure is appended to the end of the string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XUnit.ToString">
      <summary>
            Returns the object as string. The unit of measure is appended to the end of the string.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XUnit.FromPoint(System.Double)">
      <summary>
            Returns an XUnit object. Sets type to point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XUnit.FromInch(System.Double)">
      <summary>
            Returns an XUnit object. Sets type to inch.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XUnit.FromMillimeter(System.Double)">
      <summary>
            Returns an XUnit object. Sets type to millimeters.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XUnit.FromCentimeter(System.Double)">
      <summary>
            Returns an XUnit object. Sets type to centimeters.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XUnit.FromPresentation(System.Double)">
      <summary>
            Returns an XUnit object. Sets type to Presentation.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XUnit.op_Implicit(System.String)~PdfEdit.Drawing.XUnit">
      <summary>
            Converts a string to an XUnit object.
            If the string contains a suffix like 'cm' or 'in' the object will be converted
            to the appropriate type, otherwise point is assumed.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XUnit.op_Implicit(System.Int32)~PdfEdit.Drawing.XUnit">
      <summary>
            Converts an int to an XUnit object with type set to point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XUnit.op_Implicit(System.Double)~PdfEdit.Drawing.XUnit">
      <summary>
            Converts a double to an XUnit object with type set to point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XUnit.op_Implicit(PdfEdit.Drawing.XUnit)~System.Double">
      <summary>
            Returns a double value as point.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XUnit.op_Equality(PdfEdit.Drawing.XUnit,PdfEdit.Drawing.XUnit)">
      <summary>
            Memberwise comparison. To compare by value, 
            use code like Math.Abs(a.Pt - b.Pt) &lt; 1e-5.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XUnit.op_Inequality(PdfEdit.Drawing.XUnit,PdfEdit.Drawing.XUnit)">
      <summary>
            Memberwise comparison. To compare by value, 
            use code like Math.Abs(a.Pt - b.Pt) &lt; 1e-5.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XUnit.Equals(System.Object)">
      <summary>
            Calls base class Equals.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XUnit.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XUnit.Parse(System.String)">
      <summary>
            This member is intended to be used by XmlDomainObjectReader only.
            </summary>
    </member>
    <member name="M:PdfEdit.Drawing.XUnit.ConvertType(PdfEdit.Drawing.XGraphicsUnit)">
      <summary>
            Converts an existing object from one unit into another unit type.
            </summary>
    </member>
    <member name="F:PdfEdit.Drawing.XUnit.Zero">
      <summary>
            Represents a unit with all values zero.
            </summary>
    </member>
    <member name="T:PdfEdit.Drawing.XVector">
      <summary>
            Represents a two-dimensional vector specified by x- and y-coordinates.
            </summary>
    </member>
    <member name="T:PdfEdit.Fonts.ArabicTextUtil">
      <summary>
            Tools for working with Arabic text.
            </summary>
    </member>
    <member name="M:PdfEdit.Fonts.ArabicTextUtil.ConvertToRTL(System.String)">
      <summary>
            Convert Arabic text to Right-To-Left format
            </summary>
      <param name="text">Arabic text</param>
      <returns>
      </returns>
    </member>
    <member name="T:PdfEdit.Fonts.FontResolverInfo">
      <summary>
            Describes the physical font that must be used to render a particular XFont.
            </summary>
    </member>
    <member name="M:PdfEdit.Fonts.FontResolverInfo.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Fonts.FontResolverInfo" /> struct.
            </summary>
      <param name="faceName">The name that uniquely identifies the fontface.</param>
    </member>
    <member name="M:PdfEdit.Fonts.FontResolverInfo.#ctor(System.String,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Fonts.FontResolverInfo" /> struct.
            </summary>
      <param name="faceName">The name that uniquely identifies the fontface.</param>
      <param name="mustSimulateBold">Set to <c>true</c> to simulate bold when rendered. Not implemented and must be false.</param>
      <param name="mustSimulateItalic">Set to <c>true</c> to simulate italic when rendered.</param>
    </member>
    <member name="M:PdfEdit.Fonts.FontResolverInfo.#ctor(System.String,PdfEdit.Drawing.XStyleSimulations)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Fonts.FontResolverInfo" /> struct.
            </summary>
      <param name="faceName">The name that uniquely identifies the fontface.</param>
      <param name="styleSimulations">The style simulation flags.</param>
    </member>
    <member name="P:PdfEdit.Fonts.FontResolverInfo.FaceName">
      <summary>
            A name that uniquely identifies the font (not the family), e.g. the file name of the font. PDFEdit does not use this
            name internally, but passes it to the GetFont function of the IFontResolver interface to retrieve the font data.
            </summary>
    </member>
    <member name="P:PdfEdit.Fonts.FontResolverInfo.MustSimulateBold">
      <summary>
            Indicates whether bold must be simulated. Bold simulation is not implemented in PDFEdit.
            </summary>
    </member>
    <member name="P:PdfEdit.Fonts.FontResolverInfo.MustSimulateItalic">
      <summary>
            Indicates whether italic must be simulated.
            </summary>
    </member>
    <member name="P:PdfEdit.Fonts.FontResolverInfo.StyleSimulations">
      <summary>
            Gets the style simulation flags.
            </summary>
    </member>
    <member name="T:PdfEdit.Fonts.GlobalFontSettings">
      <summary>
            Provides functionality to specify information about the handling of fonts in the current application domain.
            </summary>
    </member>
    <member name="F:PdfEdit.Fonts.GlobalFontSettings.DefaultFontName">
      <summary>
            The name of the default font.
            </summary>
    </member>
    <member name="P:PdfEdit.Fonts.GlobalFontSettings.FontResolver">
      <summary>
            Gets or sets the global font resolver for the current application domain.
            This static function must be called only once and before any font operation was executed by PDFEdit.
            If this is not easily to obtain, e.g. because your code is running on a web server, you must provide the
            same instance of your font resolver in every subsequent setting of this property.
            In a web application set the font resolver in Global.asax.
            </summary>
    </member>
    <member name="P:PdfEdit.Fonts.GlobalFontSettings.DefaultFontEncoding">
      <summary>
            Gets or sets the default font encoding used for XFont objects where encoding is not explicitly specified.
            If it is not set, the default value is PdfFontEncoding.Unicode.
            If you are sure your document contains only Windows-1252 characters (see https://en.wikipedia.org/wiki/Windows-1252) 
            set default encoding to PdfFontEncodingj.Windows1252.
            Must be set only once per app domain.
            </summary>
    </member>
    <member name="T:PdfEdit.Fonts.IFontResolver">
      <summary>
            Provides functionality that convertes a requested typeface into a physical font.
            </summary>
    </member>
    <member name="M:PdfEdit.Fonts.IFontResolver.ResolveTypeface(System.String,System.Boolean,System.Boolean)">
      <summary>
            Converts specified information about a required typeface into a specific font.
            </summary>
      <param name="familyName">Name of the font family.</param>
      <param name="isBold">Set to <c>true</c> when a bold fontface is required.</param>
      <param name="isItalic">Set to <c>true</c> when an italic fontface is required.</param>
      <returns>Information about the physical font, or null if the request cannot be satisfied.</returns>
    </member>
    <member name="M:PdfEdit.Fonts.IFontResolver.GetFont(System.String)">
      <summary>
            Gets the bytes of a physical font with specified face name.
            </summary>
      <param name="faceName">A face name previously retrieved by ResolveTypeface.</param>
    </member>
    <member name="T:PdfEdit.Fonts.PlatformFontResolver">
      <summary>
            Default platform specific font resolving.
            </summary>
    </member>
    <member name="M:PdfEdit.Fonts.PlatformFontResolver.ResolveTypeface(System.String,System.Boolean,System.Boolean)">
      <summary>
            Resolves the typeface by generating a font resolver info.
            </summary>
      <param name="familyName">Name of the font family.</param>
      <param name="isBold">Indicates whether a bold font is requested.</param>
      <param name="isItalic">Indicates whether an italic font is requested.</param>
    </member>
    <member name="T:PdfEdit.Forms.DeviceInfos">
      <summary>
            Contains information about a physical device like a display or a printer.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.DeviceInfos.HorizontalSize">
      <summary>
            Width, in millimeters, of the physical screen or device.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.DeviceInfos.VerticalSize">
      <summary>
            Height, in millimeters, of the physical screen or device.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.DeviceInfos.HorizontalResolution">
      <summary>
            Width, in pixels, of the screen or device.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.DeviceInfos.VerticalResolution">
      <summary>
            Height, in pixels, of the screen or device.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.DeviceInfos.LogicalDpiX">
      <summary>
            Number of pixels per logical inch along the screen or device width.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.DeviceInfos.LogicalDpiY">
      <summary>
            Number of pixels per logical inch along the screen or device height.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.DeviceInfos.PhysicalDpiX">
      <summary>
            Number of pixels per physical inch along the screen or device width.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.DeviceInfos.PhysicalDpiY">
      <summary>
            Number of pixels per physical inch along the screen or device height.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.DeviceInfos.ScaleX">
      <summary>
            The ratio of LogicalDpiX and PhysicalDpiX.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.DeviceInfos.ScaleY">
      <summary>
            The ratio of LogicalDpiY and PhysicalDpiY.
            </summary>
    </member>
    <member name="M:PdfEdit.Forms.DeviceInfos.GetInfos(System.IntPtr)">
      <summary>
            Gets a DeviceInfo for the specifed device context.
            </summary>
    </member>
    <member name="T:PdfEdit.Forms.RenderMode">
      <summary>
            Specifies how to reander the preview.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.RenderMode.Direct">
      <summary>
            Draw immediately.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.RenderMode.Metafile">
      <summary>
            Draw using a metafile.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.RenderMode.Bitmap">
      <summary>
            Draw using a bitmap image.
            </summary>
    </member>
    <member name="T:PdfEdit.Forms.Zoom">
      <summary>
            Defines a zoom factor used in the preview control.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.Zoom.Mininum">
      <summary>
            The smallest possible zoom factor.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.Zoom.Maximum">
      <summary>
            The largest possible zoom factor.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.Zoom.Percent800">
      <summary>
            A pre-defined zoom factor.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.Zoom.Percent600">
      <summary>
            A pre-defined zoom factor.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.Zoom.Percent400">
      <summary>
            A pre-defined zoom factor.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.Zoom.Percent200">
      <summary>
            A pre-defined zoom factor.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.Zoom.Percent150">
      <summary>
            A pre-defined zoom factor.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.Zoom.Percent100">
      <summary>
            A pre-defined zoom factor.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.Zoom.Percent75">
      <summary>
            A pre-defined zoom factor.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.Zoom.Percent50">
      <summary>
            A pre-defined zoom factor.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.Zoom.Percent25">
      <summary>
            A pre-defined zoom factor.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.Zoom.Percent10">
      <summary>
            A pre-defined zoom factor.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.Zoom.BestFit">
      <summary>
            Sets the zoom factor so that the document fits horizontally into the window.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.Zoom.TextFit">
      <summary>
            Sets the zoom factor so that the printable area of the document fits horizontally into the window.
            Currently not yet implemented and the same as ZoomBestFit.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.Zoom.FullPage">
      <summary>
            Sets the zoom factor so that the whole document fits completely into the window.
            </summary>
    </member>
    <member name="F:PdfEdit.Forms.Zoom.OriginalSize">
      <summary>
            Sets the zoom factor so that the document is displayed in its real physical size (based on the DPI information returned from the OS for the current monitor).
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags">
      <summary>
            Specifies the flags of AcroForm fields.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags.ReadOnly">
      <summary>
            If set, the user may not change the value of the field. Any associated widget
            annotations will not interact with the user; that is, they will not respond to 
            mouse clicks or change their appearance in response to mouse motions. This
            flag is useful for fields whose values are computed or imported from a database.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags.Required">
      <summary>
            If set, the field must have a value at the time it is exported by a submit-form action.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags.NoExport">
      <summary>
            If set, the field must not be exported by a submit-form action.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags.Pushbutton">
      <summary>
            If set, the field is a pushbutton that does not retain a permanent value.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags.Radio">
      <summary>
            If set, the field is a set of radio buttons; if clear, the field is a checkbox.
            This flag is meaningful only if the Pushbutton flag is clear.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags.NoToggleToOff">
      <summary>
            (Radio buttons only) If set, exactly one radio button must be selected at all times;
            clicking the currently selected button has no effect. If clear, clicking
            the selected button deselects it, leaving no button selected.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags.RadiosInUnison">
      <summary>
            (PDF 1.5) If set, a group of radio buttons within a radio button field that use the same value for the on state will turn on and off in 
            unison; that is if one is checked, they are all checked. If clear, the buttons are mutually exclusive (the same behavior as HTML radio buttons).
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags.Multiline">
      <summary>
            If set, the field may contain multiple lines of text; if clear, the field’s text
            is restricted to a single line.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags.Password">
      <summary>
            If set, the field is intended for entering a secure password that should
            not be echoed visibly to the screen. Characters typed from the keyboard
            should instead be echoed in some unreadable form, such as
            asterisks or bullet characters.
            To protect password confidentiality, viewer applications should never
            store the value of the text field in the PDF file if this flag is set.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags.FileSelect">
      <summary>
            (PDF 1.4) If set, the text entered in the field represents the pathname of
            a file whose contents are to be submitted as the value of the field.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags.DoNotSpellCheckTextField">
      <summary>
            (PDF 1.4) If set, the text entered in the field will not be spell-checked.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags.DoNotScroll">
      <summary>
            (PDF 1.4) If set, the field will not scroll (horizontally for single-line
            fields, vertically for multiple-line fields) to accommodate more text
            than will fit within its annotation rectangle. Once the field is full, no
            further text will be accepted.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags.Comb">
      <summary>
            (PDF 1.5) May be set only if the MaxLen entry is present in the text field dictionary (see Table 229) and if the Multiline, Password, and
            FileSelect flags are clear. If set, the field shall be automatically divided into as many equally spaced positions, or combs, as the
            value of MaxLen, and the text is laid out into those combs.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags.RichText">
      <summary>
            (PDF 1.5) If set, the value of this field shall be a rich text string (see 12.7.3.4, “Rich Text Strings”).
            If the field has a value, the RV entry of the field dictionary (Table 222) shall specify the rich text string.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags.Combo">
      <summary>
            If set, the field is a combo box; if clear, the field is a list box.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags.Edit">
      <summary>
            If set, the combo box includes an editable text box as well as a drop list;
            if clear, it includes only a drop list. This flag is meaningful only if the
            Combo flag is set.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags.Sort">
      <summary>
            If set, the field’s option items should be sorted alphabetically. This flag is
            intended for use by form authoring tools, not by PDF viewer applications;
            viewers should simply display the options in the order in which they occur 
            in the Opt array.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags.MultiSelect">
      <summary>
            (PDF 1.4) If set, more than one of the field’s option items may be selected
            simultaneously; if clear, no more than one item at a time may be selected.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroFieldFlags.DoNotSpellCheckChoiseField">
      <summary>
            (PDF 1.4) If set, the text entered in the field will not be spell-checked.
            This flag is meaningful only if the Combo and Edit flags are both set.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.TextAlignment">
      <summary>
            The Text-Alignment for a <see cref="T:PdfEdit.Pdf.AcroForms.PdfTextField" /></summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.TextAlignment.Left">
      <summary>
            Text is left-aligned
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.TextAlignment.Center">
      <summary>
            Text is centered inside the Field
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.TextAlignment.Right">
      <summary>
            Text is right-aligned
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfAcroField">
      <summary>
            Represents the base class for all interactive field dictionaries.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.AcroForms.PdfAcroField.#ctor(PdfEdit.Pdf.PdfDictionary)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.AcroForms.PdfAcroField" /> class. Used for type transformation.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.Name">
      <summary>
            Gets the name of this field.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.AlternateName">
      <summary>
            Gets the alternative Name of the Field (/TU)
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.MappingName">
      <summary>
            Gets the mapping Name of the Field (/TM)
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.FullyQualifiedName">
      <summary>
            Gets the fully qualified name of this field, that is: "parent-name.field-name"
            <para>If the field has no parent, this is equal to <see cref="P:PdfEdit.Pdf.AcroForms.PdfAcroField.Name" /></para></summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.Parent">
      <summary>
            Gets the Parent of this field or null, if the field has no parent
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.Font">
      <summary>
            Gets or sets the font used to draw the text of the field.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.ContentFontName">
      <summary>
            Gets the font name that was obtained by analyzing the Fields' content-stream.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.BaseContentFontName">
      <summary>
            Gets the base font name that was obtained by analyzing the Fields' content-stream.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.ForeColor">
      <summary>
            Gets or sets the foreground color of the field.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.DefaultValue">
      <summary>
            Gets or sets the default value of the field.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.TextAlign">
      <summary>
            Gets or sets the alignment for the text of this field.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.Flags">
      <summary>
            Gets the field flags of this instance.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.Value">
      <summary>
            Gets or sets the value of the field.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.ReadOnly">
      <summary>
            Gets or sets a value indicating whether the field is read only.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.Item(System.String)">
      <summary>
            Gets the field with the specified name.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.AcroForms.PdfAcroField.GetValue(System.String)">
      <summary>
            Gets a child field by name.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.HasKids">
      <summary>
            Indicates whether the field has child fields and/or annotations.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.HasChildFields">
      <summary>
            Indicates whether the field has child fields.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.DescendantNames">
      <summary>
            Gets the names of all descendants of this field.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.AcroForms.PdfAcroField.GetDescendantNames">
      <summary>
            Gets the names of all descendants of this field.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.AcroForms.PdfAcroField.GetAppearanceNames">
      <summary>
            Gets the names of all appearance dictionaries of this AcroField.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.Fields">
      <summary>
            Gets the collection of fields within this field.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.Annotations">
      <summary>
            Gets the annotations-array for this field.
            The elements of this array are of type <see cref="T:PdfEdit.Pdf.Annotations.PdfWidgetAnnotation" />.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.AcroForms.PdfAcroField.DetermineAppearance">
      <summary>
            Tries to determine the Appearance of the Field by checking elements of its dictionary
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.AcroForms.PdfAcroField.EnsureFonts(PdfEdit.Drawing.XForm)">
      <summary>
            Copies font-references from the AcroForm the the specified <see cref="T:PdfEdit.Drawing.XForm" /></summary>
      <param name="form">
      </param>
    </member>
    <member name="M:PdfEdit.Pdf.AcroForms.PdfAcroField.RenderContentStream(PdfEdit.Pdf.PdfPage,PdfEdit.Pdf.PdfDictionary,PdfEdit.Pdf.PdfRectangle)">
      <summary>
            Renders the contents of the supplied Stream to the Page at the position specified by the provided Rectangle
            </summary>
      <param name="stream">
      </param>
      <param name="rect">
      </param>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfAcroField.PdfFieldAnnotationArray">
      <summary>
            Holds the collection of WidgetAnnotations for a field
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.PdfFieldAnnotationArray.Elements">
      <summary>
            Gets the list of <see cref="T:PdfEdit.Pdf.Annotations.PdfWidgetAnnotation" /> of the array
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfAcroField.PdfAcroFieldCollection">
      <summary>
            Holds a collection of interactive fields.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.PdfAcroFieldCollection.Count">
      <summary>
            Gets the number of elements in the array.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.PdfAcroFieldCollection.Names">
      <summary>
            Gets the names of all fields in the collection.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.PdfAcroFieldCollection.DescendantNames">
      <summary>
            Gets an array of all descendant names.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.PdfAcroFieldCollection.Item(System.Int32)">
      <summary>
            Gets a field from the collection. For your convenience an instance of a derived class like
            PdfTextField or PdfCheckBox is returned if PDFEdit can guess the actual type of the dictionary.
            If the actual type cannot be guessed by PDFEdit the function returns an instance
            of PdfGenericField.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroField.PdfAcroFieldCollection.Item(System.String)">
      <summary>
            Gets the field with the specified name.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfAcroField.Keys">
      <summary>
            Predefined keys of this dictionary.
            The description comes from PDF 1.4 Reference.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroField.Keys.Page">
      <summary>
            Optional: Reference to the Page object containing this field
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroField.Keys.FT">
      <summary>
            (Required for terminal fields; inheritable) The type of field that this dictionary
            describes:
              Btn           Button
              Tx            Text
              Ch            Choice
              Sig (PDF 1.3) Signature
            Note: This entry may be present in a nonterminal field (one whose descendants
            are themselves fields) in order to provide an inheritable FT value. However, a
            nonterminal field does not logically have a type of its own; it is merely a container
            for inheritable attributes that are intended for descendant terminal fields of
            any type.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroField.Keys.Parent">
      <summary>
            (Required if this field is the child of another in the field hierarchy; absent otherwise)
            The field that is the immediate parent of this one (the field, if any, whose Kids array
            includes this field). A field can have at most one parent; that is, it can be included
            in the Kids array of at most one other field.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroField.Keys.Kids">
      <summary>
            (Optional) An array of indirect references to the immediate children of this field.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroField.Keys.T">
      <summary>
            (Optional) The partial field name.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroField.Keys.TU">
      <summary>
            (Optional; PDF 1.3) An alternate field name, to be used in place of the actual
            field name wherever the field must be identified in the user interface (such as
            in error or status messages referring to the field). This text is also useful
            when extracting the document’s contents in support of accessibility to disabled
            users or for other purposes.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroField.Keys.TM">
      <summary>
            (Optional; PDF 1.3) The mapping name to be used when exporting interactive form field
            data from the document.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroField.Keys.Ff">
      <summary>
            (Optional; inheritable) A set of flags specifying various characteristics of the field.
            Default value: 0.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroField.Keys.V">
      <summary>
            (Optional; inheritable) The field’s value, whose format varies depending on
            the field type; see the descriptions of individual field types for further information.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroField.Keys.DV">
      <summary>
            (Optional; inheritable) The default value to which the field reverts when a
            reset-form action is executed. The format of this value is the same as that of V.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroField.Keys.AA">
      <summary>
            (Optional; PDF 1.2) An additional-actions dictionary defining the field’s behavior
            in response to various trigger events. This entry has exactly the same meaning as
            the AA entry in an annotation dictionary.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroField.Keys.DR">
      <summary>
            (Required; inheritable) A resource dictionary containing default resources
            (such as fonts, patterns, or color spaces) to be used by the appearance stream.
            At a minimum, this dictionary must contain a Font entry specifying the resource
            name and font dictionary of the default font for displaying the field’s text.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroField.Keys.DA">
      <summary>
            (Required; inheritable) The default appearance string, containing a sequence of
            valid page-content graphics or text state operators defining such properties as
            the field’s text size and color.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroField.Keys.Q">
      <summary>
            (Optional; inheritable) A code specifying the form of quadding (justification)
            to be used in displaying the text:
              0 Left-justified
              1 Centered
              2 Right-justified
            Default value: 0 (left-justified).
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroField.Keys.Subtype">
      <summary>
      </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroField.Keys.Rect">
      <summary>
      </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfAcroForm">
      <summary>
            Represents a interactive form (or AcroForm), a collection of fields for 
            gathering information interactively from the user.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfAcroForm.Fields">
      <summary>
            Gets the fields collection of this form.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.AcroForms.PdfAcroForm.Flatten">
      <summary>
            Flattens the AcroForm by rendering Field-contents directly onto the page.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfAcroForm.Keys">
      <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroForm.Keys.Fields">
      <summary>
            (Required) An array of references to the document’s root fields (those with
            no ancestors in the field hierarchy).
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroForm.Keys.NeedAppearances">
      <summary>
            (Optional) A flag specifying whether to construct appearance streams and
            appearance dictionaries for all widget annotations in the document.
            Default value: false.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroForm.Keys.SigFlags">
      <summary>
            (Optional; PDF 1.3) A set of flags specifying various document-level characteristics
            related to signature fields.
            Default value: 0.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroForm.Keys.CO">
      <summary>
            (Required if any fields in the document have additional-actions dictionaries
            containing a C entry; PDF 1.3) An array of indirect references to field dictionaries
            with calculation actions, defining the calculation order in which their values will 
            be recalculated when the value of any field changes.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroForm.Keys.DR">
      <summary>
            (Optional) A document-wide default value for the DR attribute of variable text fields.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroForm.Keys.DA">
      <summary>
            (Optional) A document-wide default value for the DA attribute of variable text fields.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfAcroForm.Keys.Q">
      <summary>
            (Optional) A document-wide default value for the Q attribute of variable text fields.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfButtonField">
      <summary>
            Represents the base class for all button fields.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.AcroForms.PdfButtonField.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.AcroForms.PdfButtonField" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.AcroForms.PdfButtonField.#ctor(PdfEdit.Pdf.PdfDictionary)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.AcroForms.PdfButtonField" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.AcroForms.PdfButtonField.GetNonOffValue">
      <summary>
            Gets the name which represents the opposite of /Off.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfButtonField.Keys">
      <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfCheckBoxField">
      <summary>
            Represents the check box field.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfCheckBoxField.Checked">
      <summary>
            Indicates whether the field is checked.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfCheckBoxField.CheckedName">
      <summary>
            Gets or sets the name of the dictionary that represents the Checked state.
            </summary>
            The default value is "/Yes".
        </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfCheckBoxField.UncheckedName">
      <summary>
            Gets or sets the name of the dictionary that represents the Unchecked state.
            The default value is "/Off".
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfCheckBoxField.Keys">
      <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfCheckBoxField.Keys.Opt">
      <summary>
            (Optional; inheritable; PDF 1.4) A text string to be used in place of the V entry for the
            value of the field.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfChoiceField">
      <summary>
            Represents the base class for all choice field dictionaries.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.AcroForms.PdfChoiceField.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.AcroForms.PdfChoiceField" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.AcroForms.PdfChoiceField.#ctor(PdfEdit.Pdf.PdfDictionary)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.AcroForms.PdfChoiceField" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.AcroForms.PdfChoiceField.IndexInOptArray(System.String,System.Boolean)">
      <summary>
            Gets the index of the specified string in the /Opt array or -1, if no such string exists.
            <param name="value">Value, for which the index should be retrieved</param><param name="useExportValue">true if value is the export value, false if value is the text shown in the UI</param></summary>
    </member>
    <member name="M:PdfEdit.Pdf.AcroForms.PdfChoiceField.ValueInOptArray(System.Int32,System.Boolean)">
      <summary>
            Gets the value or the display text from the index in the /Opt array.
            <param name="index">Index of the value that should be retrieved</param><param name="useExportValue">true to get the export value, false to get the text shown in the UI</param></summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfChoiceField.Options">
      <summary>
            Gets or sets the List of options (entries) available for selection.
            This is the list of values shown in the UI.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfChoiceField.Values">
      <summary>
            Gets the list of values for this Field. May or may not be equal to <see cref="P:PdfEdit.Pdf.AcroForms.PdfChoiceField.Options" /> but has always the same amount of items.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfChoiceField.Keys">
      <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfChoiceField.Keys.Opt">
      <summary>
            (Required; inheritable) An array of options to be presented to the user. Each element of
            the array is either a text string representing one of the available options or a two-element
            array consisting of a text string together with a default appearance string for constructing
            the item’s appearance dynamically at viewing time.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfChoiceField.Keys.TI">
      <summary>
            (Optional; inheritable) For scrollable list boxes, the top index (the index in the Opt array
            of the first option visible in the list).
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfChoiceField.Keys.I">
      <summary>
            (Sometimes required, otherwise optional; inheritable; PDF 1.4) For choice fields that allow
            multiple selection (MultiSelect flag set), an array of integers, sorted in ascending order,
            representing the zero-based indices in the Opt array of the currently selected option
            items. This entry is required when two or more elements in the Opt array have different
            names but the same export value, or when the value of the choice field is an array; in
            other cases, it is permitted but not required. If the items identified by this entry differ
            from those in the V entry of the field dictionary (see below), the V entry takes precedence.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfComboBoxField">
      <summary>
            Represents the combo box field.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfComboBoxField.SelectedIndex">
      <summary>
            Gets or sets the index of the selected item.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfComboBoxField.Value">
      <summary>
            Gets or sets the value of the field.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfComboBoxField.Keys">
      <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfGenericField">
      <summary>
            Represents a generic field. Used for AcroForm dictionaries unknown to PDFsharp.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfGenericField.Keys">
      <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfListBoxField">
      <summary>
            Represents the list box field.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfListBoxField.HighlightColor">
      <summary>
            Gets or sets the background color for selected items of the field.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfListBoxField.HighlightTextColor">
      <summary>
            Gets or sets the text-color for selected items of the field.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfListBoxField.Value">
      <summary>
            Gets or sets the value for this field
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfListBoxField.SelectedIndices">
      <summary>
            Gets or sets the Indices of the selected items of this Field
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfListBoxField.TopIndex">
      <summary>
            Gets or sets the index of the first visible item in the ListBox
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfListBoxField.Keys">
      <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfPushButtonField">
      <summary>
            Represents the push button field.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfPushButtonField.Keys">
      <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfRadioButtonField">
      <summary>
            Represents the radio button field.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfRadioButtonField.Value">
      <summary>
            Gets or sets the value of this field. This should be an item from the <see cref="P:PdfEdit.Pdf.AcroForms.PdfRadioButtonField.FieldValues" /> list.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfRadioButtonField.FieldValues">
      <summary>
            Gets the name of the Field-Appearances for the RadioButtons in the "checked" state. (unchecked value should be "/Off")
            Use this as the value to set the value for the whole RadioButton group.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfRadioButtonField.SelectedIndex">
      <summary>
            Gets or sets the index of the selected radio button in a radio button group.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfRadioButtonField.Keys">
      <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfRadioButtonField.Keys.Opt">
      <summary>
            (Optional; inheritable; PDF 1.4) An array of text strings to be used in
            place of the V entries for the values of the widget annotations representing
            the individual radio buttons. Each element in the array represents
            the export value of the corresponding widget annotation in the
            Kids array of the radio button field.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfSignatureField">
      <summary>
            Represents the signature field.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfSignatureField.Keys">
      <summary>
            Predefined keys of this dictionary.
            The description comes from PDF 1.4 Reference.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfSignatureField.Keys.Type">
      <summary>
            (Optional) The type of PDF object that this dictionary describes; if present,
            must be Sig for a signature dictionary.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfSignatureField.Keys.Filter">
      <summary>
            (Required; inheritable) The name of the signature handler to be used for
            authenticating the field’s contents, such as Adobe.PPKLite, Entrust.PPKEF,
            CICI.SignIt, or VeriSign.PPKVS.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfSignatureField.Keys.SubFilter">
      <summary>
            (Optional) The name of a specific submethod of the specified handler.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfSignatureField.Keys.ByteRange">
      <summary>
            (Required) An array of pairs of integers (starting byte offset, length in bytes)
            describing the exact byte range for the digest calculation. Multiple discontinuous
            byte ranges may be used to describe a digest that does not include the
            signature token itself.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfSignatureField.Keys.Contents">
      <summary>
            (Required) The encrypted signature token.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfSignatureField.Keys.Name">
      <summary>
            (Optional) The name of the person or authority signing the document.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfSignatureField.Keys.M">
      <summary>
            (Optional) The time of signing. Depending on the signature handler, this
            may be a normal unverified computer time or a time generated in a verifiable
            way from a secure time server.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfSignatureField.Keys.Location">
      <summary>
            (Optional) The CPU host name or physical location of the signing.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfSignatureField.Keys.Reason">
      <summary>
            (Optional) The reason for the signing, such as (I agree…).
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfSignatureField.Keys.ContactInfo">
      <summary>
            (Optional) Contact info of the signer.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfTextField">
      <summary>
            Represents the text field.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfTextField.Text">
      <summary>
            Gets or sets the text value of the text field.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfTextField.MaxLength">
      <summary>
            Gets or sets the maximum length of the field.
            </summary>
      <value>The length of the max.</value>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfTextField.MultiLine">
      <summary>
            Gets or sets a value indicating whether the field has multiple lines.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfTextField.Password">
      <summary>
            Gets or sets a value indicating whether this field is used for passwords.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.AcroForms.PdfTextField.Combined">
      <summary>
            Gets or sets a value indicating whether this field is a combined field.
            A combined field is a text field made up of multiple "combs" of equal width. The number of combs is determined by <see cref="P:PdfEdit.Pdf.AcroForms.PdfTextField.MaxLength" />.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.AcroForms.PdfTextField.Keys">
      <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.AcroForms.PdfTextField.Keys.MaxLen">
      <summary>
            (Optional; inheritable) The maximum length of the field’s text, in characters.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Actions.PdfNamedActionNames">
      <summary>
            Specifies the predefined PDF actions.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Actions.PdfNamedActionNames.NextPage">
      <summary>
            Go to next page.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Actions.PdfNamedActionNames.PrevPage">
      <summary>
            Go to previous page.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Actions.PdfNamedActionNames.FirstPage">
      <summary>
            Go to first page.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Actions.PdfNamedActionNames.LastPage">
      <summary>
            Go to last page.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Actions.PdfAction">
      <summary>
            Represents the base class for all PDF actions.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Actions.PdfAction.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Actions.PdfAction" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Actions.PdfAction.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Actions.PdfAction" /> class.
            </summary>
      <param name="document">The document that owns this object.</param>
    </member>
    <member name="T:PdfEdit.Pdf.Actions.PdfGoToAction">
      <summary>
            Represents the base class for all PDF actions.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Actions.PdfGoToAction.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Actions.PdfGoToAction" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Actions.PdfGoToAction.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Actions.PdfGoToAction" /> class.
            </summary>
      <param name="document">The document that owns this object.</param>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfCatalog">
      <summary>
            Represents the catalog dictionary.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfCatalog.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Advanced.PdfCatalog" /> class.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfCatalog.Version">
      <summary>
            Get or sets the version of the PDF specification to which the document conforms.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfCatalog.Pages">
      <summary>
            Gets the pages collection of this document.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfCatalog.AcroForm">
      <summary>
            Gets the AcroForm dictionary of this document.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfCatalog.Language">
      <summary>
            Gets or sets the language identifier specifying the natural language for all text in the document.
            Sample values are 'en-US' for 'English United States' or 'de-DE' for 'deutsch Deutschland' (i.e. 'German Germany').
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfContent">
      <summary>
            Represents the content of a page. PDFEdit supports only one content stream per page.
            If an imported page has an array of content streams, the streams are concatenated to
            one single stream.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfContent.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Advanced.PdfContent" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfContent.#ctor(PdfEdit.Pdf.PdfDictionary)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Advanced.PdfContent" /> class.
            </summary>
      <param name="dict">The dict.</param>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfContents">
      <summary>
            Represents an array of PDF content streams of a page.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfContents.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Advanced.PdfContents" /> class.
            </summary>
      <param name="document">The document.</param>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfContents.AppendContent">
      <summary>
            Appends a new content stream and returns it.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfContents.PrependContent">
      <summary>
            Prepends a new content stream and returns it.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfContents.CreateSingleContent">
      <summary>
            Creates a single content stream with the bytes from the array of the content streams.
            This operation does not modify any of the content streams in this array.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfContents.ReplaceContent(PdfEdit.Pdf.Content.Objects.CSequence)">
      <summary>
            Replaces the current content of the page with the specified content sequence.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfContents.GetEnumerator">
      <summary>
            Gets the enumerator.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfCrossReferenceTable">
      <summary>
            Represents the cross-reference table of a PDF document. 
            It contains all indirect objects of a document.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfCrossReferenceTable.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Creates new PdfCrossReferenceTable for selected document.
            </summary>
      <param name="document">
      </param>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfCrossReferenceTable.ObjectTable">
      <summary>
            Represents the relation between PdfObjectID and PdfReference for a PdfDocument.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfCrossReferenceTable.Add(PdfEdit.Pdf.Advanced.PdfReference)">
      <summary>
            Adds a cross reference entry to the table. Used when parsing the trailer.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfCrossReferenceTable.Add(PdfEdit.Pdf.PdfObject)">
      <summary>
            Adds a PdfObject to the table.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfCrossReferenceTable.Remove(PdfEdit.Pdf.Advanced.PdfReference)">
      <summary>
            Removes object from object table.
            </summary>
      <param name="iref">
      </param>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfCrossReferenceTable.Item(PdfEdit.Pdf.PdfObjectID)">
      <summary>
            Gets a cross reference entry from an object identifier.
            Returns null if no object with the specified ID exists in the object table.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfCrossReferenceTable.Contains(PdfEdit.Pdf.PdfObjectID)">
      <summary>
            Indicates whether the specified object identifier is in the table.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfCrossReferenceTable.GetNewObjectNumber">
      <summary>
            Returns the next free object number.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfCrossReferenceTable.AllObjectIDs">
      <summary>
            Gets an array of all object identifiers. For debugging purposes only.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfCrossReferenceTable.AllReferences">
      <summary>
            Gets an array of all cross references ordered ascendingly by their object identifier.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfCrossReferenceTable.CheckConsistence">
      <summary>
            Checks the logical consistence for debugging purposes (useful after reconstruction work).
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfCrossReferenceTable.TransitiveClosure(PdfEdit.Pdf.PdfObject)">
      <summary>
            Calculates the transitive closure of the specified PdfObject, i.e. all indirect objects
            recursively reachable from the specified object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfCrossReferenceTable.TransitiveClosure(PdfEdit.Pdf.PdfObject,System.Int32)">
      <summary>
            Calculates the transitive closure of the specified PdfObject with the specified depth, i.e. all indirect objects
            recursively reachable from the specified object in up to maximally depth steps.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfCrossReferenceTable.DeadObject">
      <summary>
            Gets the cross reference to an objects used for undefined indirect references.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfDictionaryWithContentStream">
      <summary>
            Represents a base class for dictionaries with a content stream.
            Implement IContentStream for use with a content writer.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfDictionaryWithContentStream.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Advanced.PdfDictionaryWithContentStream" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfDictionaryWithContentStream.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Advanced.PdfDictionaryWithContentStream" /> class.
            </summary>
      <param name="document">The document.</param>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfDictionaryWithContentStream.#ctor(PdfEdit.Pdf.PdfDictionary)">
      <summary>
            Initializes a new instance from an existing dictionary. Used for object type transformation.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfDictionaryWithContentStream.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfDictionaryWithContentStream.Keys.Resources">
      <summary>
            (Optional but strongly recommended; PDF 1.2) A dictionary specifying any
            resources (such as fonts and images) required by the form XObject.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfEmbeddedFile">
      <summary>
            Represent a file stream embedded in the PDF document
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfEmbeddedFile.Keys">
      <summary>
            Predefined keys of this embedded file.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfEmbeddedFile.Keys.Type">
      <summary>
            (Optional) The type of PDF object that this dictionary describes; if present, 
            must be EmbeddedFile for an embedded file stream.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfEmbeddedFile.Keys.Subtype">
      <summary>
            (Optional) The subtype of the embedded file. The value of this entry must be a 
            first-class name, as defined in Appendix E. Names without a registered prefix 
            must conform to the MIME media type names defined in Internet RFC 2046, 
            Multipurpose Internet Mail Extensions (MIME), Part Two: Media Types(see the 
            Bibliography), with the provision that characters not allowed in names must 
            use the 2-character hexadecimal code format described in Section 3.2.4, 
            “Name Objects.”
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfEmbeddedFile.Keys.Params">
      <summary>
            (Optional) An embedded file parameter dictionary containing additional, 
            file-specific information (see Table 3.43).
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfEmbeddedFile.Keys.Size">
      <summary>
            (Optional) The size of the embedded file, in bytes.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfEmbeddedFile.Keys.CreationDate">
      <summary>
            (Optional) The date and time when the embedded file was created.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfEmbeddedFile.Keys.ModDate">
      <summary>
            (Optional) The date and time when the embedded file was last modified.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfEmbeddedFile.Keys.Mac">
      <summary>
            (Optional) A subdictionary containing additional information specific to Mac OS files (see Table 3.44).
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfEmbeddedFile.Keys.CheckSum">
      <summary>
            (Optional) A 16-byte string that is the checksum of the bytes of the uncompressed 
            embedded file. The checksum is calculated by applying the standard MD5 message-digest 
            algorithm (described in Internet RFC 1321, The MD5 Message-Digest Algorithm; see the 
            Bibliography) to the bytes of the embedded file stream.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfExtGState">
      <summary>
            Represents an extended graphics state object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfExtGState.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Advanced.PdfExtGState" /> class.
            </summary>
      <param name="document">The document.</param>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfExtGState.StrokeAlpha">
      <summary>
            Sets the alpha value for stroking operations.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfExtGState.NonStrokeAlpha">
      <summary>
            Sets the alpha value for nonstroking operations.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfExtGState.StrokeOverprint">
      <summary>
            Sets the overprint value for stroking operations.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfExtGState.NonStrokeOverprint">
      <summary>
            Sets the overprint value for nonstroking operations.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfExtGState.SoftMask">
      <summary>
            Sets a soft mask object.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfExtGStateTable">
      <summary>
            Contains all used ExtGState objects of a document.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfExtGStateTable.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of this class, which is a singleton for each document.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfExtGStateTable.GetExtGStateStroke(System.Double,System.Boolean)">
      <summary>
            Gets a PdfExtGState with the key 'CA' set to the specified alpha value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfExtGStateTable.GetExtGStateNonStroke(System.Double,System.Boolean)">
      <summary>
            Gets a PdfExtGState with the key 'ca' set to the specified alpha value.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfFileSpecification">
      <summary>
            Represent a file stream embedded in the PDF document
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfFileSpecification.Keys">
      <summary>
            Predefined keys of this embedded file.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFileSpecification.Keys.Type">
      <summary>
            (Required if an EF or RF entry is present; recommended always) 
            The type of PDF object that this dictionary describes; must be Filespec 
            for a file specification dictionary (see implementation note 45 in Appendix H).
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFileSpecification.Keys.F">
      <summary>
            (Required if the DOS, Mac, and Unix entries are all absent; amended with the UF 
            entry for PDF 1.7) A file specification string of the form described in Section 
            3.10.1, “File Specification Strings,” or (if the file system is URL) a uniform 
            resource locator, as described in Section 3.10.4, “URL Specifications.”
            
            Note: It is recommended that the UF entry be used in addition to the F entry.
            The UF entry provides cross-platform and cross-language compatibility and the F 
            entry provides backwards compatibility
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFileSpecification.Keys.EF">
      <summary>
            (Required if RF is present; PDF 1.3; amended to include the UF key in PDF 1.7) 
            A dictionary containing a subset of the keys F, UF, DOS, Mac, and Unix, 
            corresponding to the entries by those names in the file specification dictionary. 
            The value of each such key is an embedded file stream (see Section 3.10.3, 
            “Embedded File Streams”) containing the corresponding file. If this entry is 
            present, the Type entry is required and the file specification dictionary must 
            be indirectly referenced. (See implementation note 46in Appendix H.)
            
            Note: It is recommended that the F and UF entries be used in place of the DOS, 
            Mac, or Unix entries.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfFont">
      <summary>
            Represents a PDF font.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfFont.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Advanced.PdfFont" /> class.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfFont.IsSymbolFont">
      <summary>
            Gets a value indicating whether this instance is symbol font.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfFont.Keys">
      <summary>
            Predefined keys common to all font dictionaries.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFont.Keys.Type">
      <summary>
            (Required) The type of PDF object that this dictionary describes;
            must be Font for a font dictionary.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFont.Keys.Subtype">
      <summary>
            (Required) The type of font.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFont.Keys.BaseFont">
      <summary>
            (Required) The PostScript name of the font.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFont.Keys.FontDescriptor">
      <summary>
            (Required except for the standard 14 fonts; must be an indirect reference)
            A font descriptor describing the font’s metrics other than its glyph widths.
            Note: For the standard 14 fonts, the entries FirstChar, LastChar, Widths, and 
            FontDescriptor must either all be present or all be absent. Ordinarily, they are
            absent; specifying them enables a standard font to be overridden.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfFontDescriptor">
      <summary>
            A PDF font descriptor specifies metrics and other attributes of a simple font, 
            as distinct from the metrics of individual glyphs.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfFontDescriptor.FontName">
      <summary>
            Gets or sets the name of the font.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfFontDescriptor.IsSymbolFont">
      <summary>
            Gets a value indicating whether this instance is symbol font.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.Type">
      <summary>
            (Required) The type of PDF object that this dictionary describes; must be
            FontDescriptor for a font descriptor.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.FontName">
      <summary>
            (Required) The PostScript name of the font. This name should be the same as the 
            value of BaseFont in the font or CIDFont dictionary that refers to this font descriptor.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.FontFamily">
      <summary>
            (Optional; PDF 1.5; strongly recommended for Type 3 fonts in Tagged PDF documents)
            A string specifying the preferred font family name. For example, for the font 
            Times Bold Italic, the FontFamily is Times.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.FontStretch">
      <summary>
            (Optional; PDF 1.5; strongly recommended for Type 3 fonts in Tagged PDF documents)
            The font stretch value. It must be one of the following names (ordered from 
            narrowest to widest): UltraCondensed, ExtraCondensed, Condensed, SemiCondensed, 
            Normal, SemiExpanded, Expanded, ExtraExpanded or UltraExpanded.
            Note: The specific interpretation of these values varies from font to font. 
            For example, Condensed in one font may appear most similar to Normal in another.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.FontWeight">
      <summary>
            (Optional; PDF 1.5; strongly recommended for Type 3 fonts in Tagged PDF documents)
            The weight (thickness) component of the fully-qualified font name or font specifier.
            The possible values are 100, 200, 300, 400, 500, 600, 700, 800, or 900, where each
            number indicates a weight that is at least as dark as its predecessor. A value of 
            400 indicates a normal weight; 700 indicates bold.
            Note: The specific interpretation of these values varies from font to font. 
            For example, 300 in one font may appear most similar to 500 in another.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.Flags">
      <summary>
            (Required) A collection of flags defining various characteristics of the font.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.FontBBox">
      <summary>
            (Required, except for Type 3 fonts) A rectangle (see Section 3.8.4, “Rectangles”),
            expressed in the glyph coordinate system, specifying the font bounding box. This 
            is the smallest rectangle enclosing the shape that would result if all of the 
            glyphs of the font were placed with their origins coincident and then filled.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.ItalicAngle">
      <summary>
            (Required) The angle, expressed in degrees counterclockwise from the vertical, of
            the dominant vertical strokes of the font. (For example, the 9-o’clock position is 90 
            degrees, and the 3-o’clock position is –90 degrees.) The value is negative for fonts 
            that slope to the right, as almost all italic fonts do.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.Ascent">
      <summary>
            (Required, except for Type 3 fonts) The maximum height above the baseline reached 
            by glyphs in this font, excluding the height of glyphs for accented characters.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.Descent">
      <summary>
            (Required, except for Type 3 fonts) The maximum depth below the baseline reached 
            by glyphs in this font. The value is a negative number.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.Leading">
      <summary>
            (Optional) The spacing between baselines of consecutive lines of text.
            Default value: 0.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.CapHeight">
      <summary>
            (Required for fonts that have Latin characters, except for Type 3 fonts) The vertical
            coordinate of the top of flat capital letters, measured from the baseline.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.XHeight">
      <summary>
            (Optional) The font’s x height: the vertical coordinate of the top of flat nonascending
            lowercase letters (like the letter x), measured from the baseline, in fonts that have 
            Latin characters. Default value: 0.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.StemV">
      <summary>
            (Required, except for Type 3 fonts) The thickness, measured horizontally, of the dominant 
            vertical stems of glyphs in the font.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.StemH">
      <summary>
            (Optional) The thickness, measured vertically, of the dominant horizontal stems 
            of glyphs in the font. Default value: 0.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.AvgWidth">
      <summary>
            (Optional) The average width of glyphs in the font. Default value: 0.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.MaxWidth">
      <summary>
            (Optional) The maximum width of glyphs in the font. Default value: 0.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.MissingWidth">
      <summary>
            (Optional) The width to use for character codes whose widths are not specified in a 
            font dictionary’s Widths array. This has a predictable effect only if all such codes 
            map to glyphs whose actual widths are the same as the value of the MissingWidth entry.
            Default value: 0.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.FontFile">
      <summary>
            (Optional) A stream containing a Type 1 font program.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.FontFile2">
      <summary>
            (Optional; PDF 1.1) A stream containing a TrueType font program.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.FontFile3">
      <summary>
            (Optional; PDF 1.2) A stream containing a font program whose format is specified 
            by the Subtype entry in the stream dictionary.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFontDescriptor.Keys.CharSet">
      <summary>
            (Optional; meaningful only in Type 1 fonts; PDF 1.1) A string listing the character
            names defined in a font subset. The names in this string must be in PDF syntax—that is,
            each name preceded by a slash (/). The names can appear in any order. The name .notdef
            should be omitted; it is assumed to exist in the font subset. If this entry is absent,
            the only indication of a font subset is the subset tag in the FontName entry.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfFormXObject">
      <summary>
            Represents an external form object (e.g. an imported page).
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfFormXObject.Resources">
      <summary>
            Gets the PdfResources object of this form.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfFormXObject.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFormXObject.Keys.Type">
      <summary>
            (Optional) The type of PDF object that this dictionary describes; if present,
            must be XObject for a form XObject.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFormXObject.Keys.Subtype">
      <summary>
            (Required) The type of XObject that this dictionary describes; must be Form
            for a form XObject.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFormXObject.Keys.FormType">
      <summary>
            (Optional) A code identifying the type of form XObject that this dictionary
            describes. The only valid value defined at the time of publication is 1.
            Default value: 1.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFormXObject.Keys.BBox">
      <summary>
            (Required) An array of four numbers in the form coordinate system, giving the 
            coordinates of the left, bottom, right, and top edges, respectively, of the 
            form XObject’s bounding box. These boundaries are used to clip the form XObject
            and to determine its size for caching.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFormXObject.Keys.Matrix">
      <summary>
            (Optional) An array of six numbers specifying the form matrix, which maps
            form space into user space.
            Default value: the identity matrix [1 0 0 1 0 0].
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFormXObject.Keys.Resources">
      <summary>
            (Optional but strongly recommended; PDF 1.2) A dictionary specifying any
            resources (such as fonts and images) required by the form XObject.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfFormXObject.Keys.Group">
      <summary>
            (Optional; PDF 1.4) A group attributes dictionary indicating that the contents
            of the form XObject are to be treated as a group and specifying the attributes
            of that group (see Section 4.9.2, “Group XObjects”).
            Note: If a Ref entry (see below) is present, the group attributes also apply to the
            external page imported by that entry, which allows such an imported page to be
            treated as a group without further modification.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfGroupAttributes">
      <summary>
            Represents a PDF group XObject.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfGroupAttributes.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfGroupAttributes.Keys.Type">
      <summary>
            (Optional) The type of PDF object that this dictionary describes;
            if present, must be Group for a group attributes dictionary.
             </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfGroupAttributes.Keys.S">
      <summary>
            (Required) The group subtype, which identifies the type of group whose
            attributes this dictionary describes and determines the format and meaning
            of the dictionary’s remaining entries. The only group subtype defined in
            PDF 1.4 is Transparency. Other group subtypes may be added in the future.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfImage">
      <summary>
            Represents an image.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfImage.#ctor(PdfEdit.Pdf.PdfDocument,PdfEdit.Drawing.XImage)">
      <summary>
            Initializes a new instance of PdfImage from an XImage.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfImage.Image">
      <summary>
            Gets the underlying XImage object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfImage.ToString">
      <summary>
            Returns 'Image'.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfImage.Keys">
      <summary>
            Common keys for all streams.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.Type">
      <summary>
            (Optional) The type of PDF object that this dictionary describes;
            if present, must be XObject for an image XObject.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.Subtype">
      <summary>
            (Required) The type of XObject that this dictionary describes;
            must be Image for an image XObject.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.Width">
      <summary>
            (Required) The width of the image, in samples.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.Height">
      <summary>
            (Required) The height of the image, in samples.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.ColorSpace">
      <summary>
            (Required for images, except those that use the JPXDecode filter; not allowed for image masks)
            The color space in which image samples are specified; it can be any type of color space except
            Pattern. If the image uses the JPXDecode filter, this entry is optional:
            • If ColorSpace is present, any color space specifications in the JPEG2000 data are ignored.
            • If ColorSpace is absent, the color space specifications in the JPEG2000 data are used.
              The Decode array is also ignored unless ImageMask is true.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.BitsPerComponent">
      <summary>
            (Required except for image masks and images that use the JPXDecode filter)
            The number of bits used to represent each color component. Only a single value may be specified;
            the number of bits is the same for all color components. Valid values are 1, 2, 4, 8, and 
            (in PDF 1.5) 16. If ImageMask is true, this entry is optional, and if specified, its value 
            must be 1.
            If the image stream uses a filter, the value of BitsPerComponent must be consistent with the 
            size of the data samples that the filter delivers. In particular, a CCITTFaxDecode or JBIG2Decode 
            filter always delivers 1-bit samples, a RunLengthDecode or DCTDecode filter delivers 8-bit samples,
            and an LZWDecode or FlateDecode filter delivers samples of a specified size if a predictor function
            is used.
            If the image stream uses the JPXDecode filter, this entry is optional and ignored if present.
            The bit depth is determined in the process of decoding the JPEG2000 image.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.Intent">
      <summary>
            (Optional; PDF 1.1) The name of a color rendering intent to be used in rendering the image.
            Default value: the current rendering intent in the graphics state.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.ImageMask">
      <summary>
            (Optional) A flag indicating whether the image is to be treated as an image mask.
            If this flag is true, the value of BitsPerComponent must be 1 and Mask and ColorSpace should
            not be specified; unmasked areas are painted using the current nonstroking color.
            Default value: false.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.Mask">
      <summary>
            (Optional except for image masks; not allowed for image masks; PDF 1.3)
            An image XObject defining an image mask to be applied to this image, or an array specifying 
            a range of colors to be applied to it as a color key mask. If ImageMask is true, this entry
            must not be present.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.Decode">
      <summary>
            (Optional) An array of numbers describing how to map image samples into the range of values
            appropriate for the image’s color space. If ImageMask is true, the array must be either
            [0 1] or [1 0]; otherwise, its length must be twice the number of color components required 
            by ColorSpace. If the image uses the JPXDecode filter and ImageMask is false, Decode is ignored.
            Default value: see “Decode Arrays”.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.Interpolate">
      <summary>
            (Optional) A flag indicating whether image interpolation is to be performed. 
            Default value: false.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.Alternates">
      <summary>
            (Optional; PDF 1.3) An array of alternate image dictionaries for this image. The order of 
            elements within the array has no significance. This entry may not be present in an image 
            XObject that is itself an alternate image.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.SMask">
      <summary>
            (Optional; PDF 1.4) A subsidiary image XObject defining a soft-mask image to be used as a 
            source of mask shape or mask opacity values in the transparent imaging model. The alpha 
            source parameter in the graphics state determines whether the mask values are interpreted as
            shape or opacity. If present, this entry overrides the current soft mask in the graphics state,
            as well as the image’s Mask entry, if any. (However, the other transparency related graphics 
            state parameters — blend mode and alpha constant — remain in effect.) If SMask is absent, the 
            image has no associated soft mask (although the current soft mask in the graphics state may
            still apply).
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.SMaskInData">
      <summary>
            (Optional for images that use the JPXDecode filter, meaningless otherwise; PDF 1.5)
            A code specifying how soft-mask information encoded with image samples should be used:
            0 If present, encoded soft-mask image information should be ignored.
            1 The image’s data stream includes encoded soft-mask values. An application can create
              a soft-mask image from the information to be used as a source of mask shape or mask 
              opacity in the transparency imaging model.
            2 The image’s data stream includes color channels that have been preblended with a 
              background; the image data also includes an opacity channel. An application can create
              a soft-mask image with a Matte entry from the opacity channel information to be used as
              a source of mask shape or mask opacity in the transparency model. If this entry has a 
              nonzero value, SMask should not be specified.
            Default value: 0.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.Name">
      <summary>
            (Required in PDF 1.0; optional otherwise) The name by which this image XObject is 
            referenced in the XObject subdictionary of the current resource dictionary.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.StructParent">
      <summary>
            (Required if the image is a structural content item; PDF 1.3) The integer key of the 
            image’s entry in the structural parent tree.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.ID">
      <summary>
            (Optional; PDF 1.3; indirect reference preferred) The digital identifier of the image’s
            parent Web Capture content set.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.OPI">
      <summary>
            (Optional; PDF 1.2) An OPI version dictionary for the image. If ImageMask is true, 
            this entry is ignored.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.Metadata">
      <summary>
            (Optional; PDF 1.4) A metadata stream containing metadata for the image.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfImage.Keys.OC">
      <summary>
            (Optional; PDF 1.5) An optional content group or optional content membership dictionary,
            specifying the optional content properties for this image XObject. Before the image is
            processed, its visibility is determined based on this entry. If it is determined to be 
            invisible, the entire image is skipped, as if there were no Do operator to invoke it.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfInternals">
      <summary>
            Provides access to the internal document data structures. This class prevents the public
            interfaces from pollution with to much internal functions.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfInternals.FirstDocumentID">
      <summary>
            Gets or sets the first document identifier.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfInternals.FirstDocumentGuid">
      <summary>
            Gets the first document identifier as GUID.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfInternals.SecondDocumentID">
      <summary>
            Gets or sets the second document identifier.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfInternals.SecondDocumentGuid">
      <summary>
            Gets the first document identifier as GUID.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfInternals.Catalog">
      <summary>
            Gets the catalog dictionary.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfInternals.ExtGStateTable">
      <summary>
            Gets the ExtGStateTable object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfInternals.GetObject(PdfEdit.Pdf.PdfObjectID)">
      <summary>
            Returns the object with the specified Identifier, or null, if no such object exists.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfInternals.MapExternalObject(PdfEdit.Pdf.PdfObject)">
      <summary>
            Maps the specified external object to the substitute object in this document.
            Returns null if no such object exists.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfInternals.GetReference(PdfEdit.Pdf.PdfObject)">
      <summary>
            Returns the PdfReference of the specified object, or null, if the object is not in the
            document's object table.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfInternals.GetObjectID(PdfEdit.Pdf.PdfObject)">
      <summary>
            Gets the object identifier of the specified object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfInternals.GetObjectNumber(PdfEdit.Pdf.PdfObject)">
      <summary>
            Gets the object number of the specified object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfInternals.GenerationNumber(PdfEdit.Pdf.PdfObject)">
      <summary>
            Gets the generation number of the specified object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfInternals.GetAllObjects">
      <summary>
            Gets all indirect objects ordered by their object identifier.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfInternals.AllObjects">
      <summary>
            Gets all indirect objects ordered by their object identifier.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfInternals.CreateIndirectObject``1">
      <summary>
            Creates the indirect object of the specified type, adds it to the document, and
            returns the object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfInternals.AddObject(PdfEdit.Pdf.PdfObject)">
      <summary>
            Adds an object to the PDF document. This operation and only this operation makes the object 
            an indirect object owned by this document.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfInternals.RemoveObject(PdfEdit.Pdf.PdfObject)">
      <summary>
            Removes an object from the PDF document.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfInternals.GetClosure(PdfEdit.Pdf.PdfObject)">
      <summary>
            Returns an array containing the specified object as first element follows by its transitive
            closure. The closure of an object are all objects that can be reached by indirect references. 
            The transitive closure is the result of applying the calculation of the closure to a closure
            as long as no new objects came along. This is e.g. useful for getting all objects belonging 
            to the resources of a page.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfInternals.GetClosure(PdfEdit.Pdf.PdfObject,System.Int32)">
      <summary>
            Returns an array containing the specified object as first element follows by its transitive
            closure limited by the specified number of iterations.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfInternals.WriteObject(System.IO.Stream,PdfEdit.Pdf.PdfItem)">
      <summary>
            Writes a PdfItem into the specified stream.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfInternals.CustomValueKey">
      <summary>
            The name of the custom value key.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfObjectInternals">
      <summary>
            Provides access to the internal PDF object data structures. This class prevents the public
            interfaces from pollution with to much internal functions.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfObjectInternals.ObjectID">
      <summary>
            Gets the object identifier. Returns PdfObjectID.Empty for direct objects.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfObjectInternals.ObjectNumber">
      <summary>
            Gets the object number.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfObjectInternals.GenerationNumber">
      <summary>
            Gets the generation number.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfObjectInternals.TypeID">
      <summary>
            Gets the name of the current type.
            Not a very useful property, but can be used for data binding.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfObjectStream">
      <summary>
            Represents an object stream that contains compressed objects.
            PDF 1.5.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfObjectStream.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Advanced.PdfObjectStream" /> class.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfObjectStream.Keys">
      <summary>
            Predefined keys common to all font dictionaries.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfObjectStream.Keys.Type">
      <summary>
            (Required) The type of PDF object that this dictionary describes;
            must be ObjStmfor an object stream.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfObjectStream.Keys.N">
      <summary>
            (Required) The number of compressed objects in the stream.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfObjectStream.Keys.First">
      <summary>
            (Required) The byte offset (in the decoded stream) of the first
            compressed object.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfObjectStream.Keys.Extends">
      <summary>
            (Optional) A reference to an object stream, of which the current object
            stream is considered an extension. Both streams are considered part of
            a collection of object streams (see below). A given collection consists
            of a set of streams whose Extendslinks form a directed acyclic graph.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfReference">
      <summary>
            Represents an indirect reference to a PdfObject.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfReference.#ctor(PdfEdit.Pdf.PdfObject)">
      <summary>
            Initializes a new PdfReference instance for the specified indirect object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfReference.#ctor(PdfEdit.Pdf.PdfObjectID,System.Int32)">
      <summary>
            Initializes a new PdfReference instance from the specified object identifier and file position.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfReference.ObjectID">
      <summary>
            Gets or sets the object identifier.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfReference.ObjectNumber">
      <summary>
            Gets the object number of the object identifier.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfReference.GenerationNumber">
      <summary>
            Gets the generation number of the object identifier.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfReference.Position">
      <summary>
            Gets or sets the file position of the related PdfObject.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfReference.Value">
      <summary>
            Gets or sets the referenced PdfObject.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfReference.Document">
      <summary>
            Gets or sets the document this object belongs to.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfReference.ToString">
      <summary>
            Gets a string representing the object identifier.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfResources">
      <summary>
            Represents a PDF resource object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfResources.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Advanced.PdfResources" /> class.
            </summary>
      <param name="document">The document.</param>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfResources.AddFont(PdfEdit.Pdf.Advanced.PdfFont)">
      <summary>
            Adds the specified font to this resource dictionary and returns its local resource name.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfResources.AddImage(PdfEdit.Pdf.Advanced.PdfImage)">
      <summary>
            Adds the specified image to this resource dictionary
            and returns its local resource name.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfResources.AddForm(PdfEdit.Pdf.Advanced.PdfFormXObject)">
      <summary>
            Adds the specified form object to this resource dictionary
            and returns its local resource name.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfResources.AddExtGState(PdfEdit.Pdf.Advanced.PdfExtGState)">
      <summary>
            Adds the specified graphics state to this resource dictionary
            and returns its local resource name.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfResources.AddPattern(PdfEdit.Pdf.Advanced.PdfShadingPattern)">
      <summary>
            Adds the specified pattern to this resource dictionary
            and returns its local resource name.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfResources.AddPattern(PdfEdit.Pdf.Advanced.PdfTilingPattern)">
      <summary>
            Adds the specified pattern to this resource dictionary
            and returns its local resource name.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfResources.AddShading(PdfEdit.Pdf.Advanced.PdfShading)">
      <summary>
            Adds the specified shading to this resource dictionary
            and returns its local resource name.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfResources.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfResources.Keys.ExtGState">
      <summary>
            (Optional) A dictionary that maps resource names to graphics state 
            parameter dictionaries.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfResources.Keys.ColorSpace">
      <summary>
            (Optional) A dictionary that maps each resource name to either the name of a
            device-dependent color space or an array describing a color space.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfResources.Keys.Pattern">
      <summary>
            (Optional) A dictionary that maps each resource name to either the name of a
            device-dependent color space or an array describing a color space.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfResources.Keys.Shading">
      <summary>
            (Optional; PDF 1.3) A dictionary that maps resource names to shading dictionaries.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfResources.Keys.XObject">
      <summary>
            (Optional) A dictionary that maps resource names to external objects.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfResources.Keys.Font">
      <summary>
            (Optional) A dictionary that maps resource names to font dictionaries.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfResources.Keys.ProcSet">
      <summary>
            (Optional) An array of predefined procedure set names.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfResources.Keys.Properties">
      <summary>
            (Optional; PDF 1.2) A dictionary that maps resource names to property list
            dictionaries for marked content.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfResourceTable">
      <summary>
            Base class for FontTable, ImageTable, FormXObjectTable etc.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfResourceTable.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Base class for document wide resource tables.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Advanced.PdfResourceTable.Owner">
      <summary>
            Gets the owning document of this resource table.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfShading">
      <summary>
            Represents a shading dictionary.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfShading.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Advanced.PdfShading" /> class.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfShadingPattern">
      <summary>
            Represents a shading pattern dictionary.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfShadingPattern.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Advanced.PdfShadingPattern" /> class.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfSoftMask">
      <summary>
            Represents a PDF soft mask.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfSoftMask.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Advanced.PdfXObject" /> class.
            </summary>
      <param name="document">The document that owns the object.</param>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfSoftMask.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfSoftMask.Keys.Type">
      <summary>
            (Optional) The type of PDF object that this dictionary describes;
            if present, must be Mask for a soft-mask dictionary.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfSoftMask.Keys.S">
      <summary>
            (Required) A subtype specifying the method to be used in deriving the mask values
            from the transparency group specified by the G entry:
            Alpha: Use the group’s computed alpha, disregarding its color.
            Luminosity: Convert the group’s computed color to a single-component luminosity value.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfSoftMask.Keys.G">
      <summary>
            (Required) A transparency group XObject to be used as the source of alpha
            or color values for deriving the mask. If the subtype S is Luminosity, the
            group attributes dictionary must contain a CS entry defining the color space
            in which the compositing computation is to be performed.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfSoftMask.Keys.BC">
      <summary>
            (Optional) An array of component values specifying the color to be used
            as the backdrop against which to composite the transparency group XObject G.
            This entry is consulted only if the subtype S is Luminosity. The array consists of
            n numbers, where n is the number of components in the color space specified
            by the CS entry in the group attributes dictionary.
            Default value: the color space’s initial value, representing black.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfSoftMask.Keys.TR">
      <summary>
            (Optional) A function object specifying the transfer function to be used in
            deriving the mask values. The function accepts one input, the computed
            group alpha or luminosity (depending on the value of the subtype S), and
            returns one output, the resulting mask value. Both the input and output
            must be in the range 0.0 to 1.0; if the computed output falls outside this
            range, it is forced to the nearest valid value. The name Identity may be
            specified in place of a function object to designate the identity function.
            Default value: Identity.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfTilingPattern">
      <summary>
            Represents a tiling pattern dictionary.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfTilingPattern.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Advanced.PdfShadingPattern" /> class.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfTransparencyGroupAttributes">
      <summary>
            Represents a PDF transparency group XObject.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfTransparencyGroupAttributes.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfTransparencyGroupAttributes.Keys.CS">
      <summary>
            (Sometimes required, as discussed below)
            The group color space, which is used for the following purposes:
            • As the color space into which colors are converted when painted into the group
            • As the blending color space in which objects are composited within the group
            • As the color space of the group as a whole when it in turn is painted as an object onto its backdrop
            The group color space may be any device or CIE-based color space that
            treats its components as independent additive or subtractive values in the
            range 0.0 to 1.0, subject to the restrictions described in Section 7.2.3, “Blending Color Space.”
            These restrictions exclude Lab and lightness-chromaticity ICCBased color spaces,
            as well as the special color spaces Pattern, Indexed, Separation, and DeviceN.
            Device color spaces are subject to remapping according to the DefaultGray,
            DefaultRGB, and DefaultCMYK entries in the ColorSpace subdictionary of the
            current resource dictionary.
            Ordinarily, the CS entry is allowed only for isolated transparency groups
            (those for which I, below, is true), and even then it is optional. However,
            this entry is required in the group attributes dictionary for any transparency
            group XObject that has no parent group or page from which to inherit — in
            particular, one that is the value of the G entry in a soft-mask dictionary of
            subtype Luminosity.
            In addition, it is always permissible to specify CS in the group attributes
            dictionary associated with a page object, even if I is false or absent. In the
            normal case in which the page is imposed directly on the output medium,
            the page group is effectively isolated regardless of the I value, and the 
            specified CS value is therefore honored. But if the page is in turn used as an
            element of some other page and if the group is non-isolated, CS is ignored
            and the color space is inherited from the actual backdrop with which the
            page is composited.
            Default value: the color space of the parent group or page into which this
            transparency group is painted. (The parent’s color space in turn can be
            either explicitly specified or inherited.)
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfTransparencyGroupAttributes.Keys.I">
      <summary>
            (Optional) A flag specifying whether the transparency group is isolated.
            If this flag is true, objects within the group are composited against a fully
            transparent initial backdrop; if false, they are composited against the
            group’s backdrop.
            Default value: false.
            In the group attributes dictionary for a page, the interpretation of this
            entry is slightly altered. In the normal case in which the page is imposed
            directly on the output medium, the page group is effectively isolated and
            the specified I value is ignored. But if the page is in turn used as an
            element of some other page, it is treated as if it were a transparency
            group XObject; the I value is interpreted in the normal way to determine
            whether the page group is isolated.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Advanced.PdfTransparencyGroupAttributes.Keys.K">
      <summary>
            (Optional) A flag specifying whether the transparency group is a knockout
            group. If this flag is false, later objects within the group are composited
            with earlier ones with which they overlap; if true, they are composited with
            the group’s initial backdrop and overwrite (“knock out”) any earlier
            overlapping objects.
            Default value: false.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfXObject">
      <summary>
            Base class for all PDF external objects.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Advanced.PdfXObject.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Advanced.PdfXObject" /> class.
            </summary>
      <param name="document">The document that owns the object.</param>
    </member>
    <member name="T:PdfEdit.Pdf.Advanced.PdfXObject.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Annotations.PdfAnnotationFlags">
      <summary>
            Specifies the annotation flags.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotationFlags.Invisible">
      <summary>
            If set, do not display the annotation if it does not belong to one of the standard
            annotation types and no annotation handler is available. If clear, display such an
            unknown annotation using an appearance stream specified by its appearancedictionary,
            if any.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotationFlags.Hidden">
      <summary>
            (PDF 1.2) If set, do not display or print the annotation or allow it to interact
            with the user, regardless of its annotation type or whether an annotation
            handler is available. In cases where screen space is limited, the ability to hide
            and show annotations selectively can be used in combination with appearance
            streams to display auxiliary pop-up information similar in function to online
            help systems.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotationFlags.Print">
      <summary>
            (PDF 1.2) If set, print the annotation when the page is printed. If clear, never
            print the annotation, regardless of whether it is displayed on the screen. This
            can be useful, for example, for annotations representing interactive pushbuttons,
            which would serve no meaningful purpose on the printed page.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotationFlags.NoZoom">
      <summary>
            (PDF 1.3) If set, do not scale the annotation’s appearance to match the magnification
            of the page. The location of the annotation on the page (defined by the
            upper-left corner of its annotation rectangle) remains fixed, regardless of the
            page magnification. See below for further discussion.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotationFlags.NoRotate">
      <summary>
            (PDF 1.3) If set, do not rotate the annotation’s appearance to match the rotation
            of the page. The upper-left corner of the annotation rectangle remains in a fixed
            location on the page, regardless of the page rotation. See below for further discussion.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotationFlags.NoView">
      <summary>
            (PDF 1.3) If set, do not display the annotation on the screen or allow it to
            interact with the user. The annotation may be printed (depending on the setting
            of the Print flag) but should be considered hidden for purposes of on-screen
            display and user interaction.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotationFlags.ReadOnly">
      <summary>
            (PDF 1.3) If set, do not allow the annotation to interact with the user. The
            annotation may be displayed or printed (depending on the settings of the
            NoView and Print flags) but should not respond to mouse clicks or change its
            appearance in response to mouse motions.
            Note: This flag is ignored for widget annotations; its function is subsumed by
            the ReadOnly flag of the associated form field.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotationFlags.Locked">
      <summary>
            (PDF 1.4) If set, do not allow the annotation to be deleted or its properties
            (including position and size) to be modified by the user. However, this flag does
            not restrict changes to the annotation’s contents, such as the value of a form
            field.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotationFlags.ToggleNoView">
      <summary>
            (PDF 1.5) If set, invert the interpretation of the NoView flag for certain events.
            A typical use is to have an annotation that appears only when a mouse cursor is
            held over it.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotationIcon">
      <summary>
            Specifies the predefined icon names of rubber stamp annotations.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotationIcon.NoIcon">
      <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotationIcon.Approved">
      <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotationIcon.AsIs">
      <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotationIcon.Confidential">
      <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotationIcon.Departmental">
      <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotationIcon.Draft">
      <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotationIcon.Experimental">
      <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotationIcon.Expired">
      <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotationIcon.Final">
      <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotationIcon.ForComment">
      <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotationIcon.ForPublicRelease">
      <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotationIcon.NotApproved">
      <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotationIcon.NotForPublicRelease">
      <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotationIcon.Sold">
      <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotationIcon.TopSecret">
      <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Annotations.PdfTextAnnotationIcon">
      <summary>
            Specifies the pre-defined icon names of text annotations.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfTextAnnotationIcon.NoIcon">
      <summary>
            A pre-defined annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfTextAnnotationIcon.Comment">
      <summary>
            A pre-defined annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfTextAnnotationIcon.Help">
      <summary>
            A pre-defined annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfTextAnnotationIcon.Insert">
      <summary>
            A pre-defined annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfTextAnnotationIcon.Key">
      <summary>
            A pre-defined annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfTextAnnotationIcon.NewParagraph">
      <summary>
            A pre-defined annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfTextAnnotationIcon.Note">
      <summary>
            A pre-defined annotation icon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfTextAnnotationIcon.Paragraph">
      <summary>
            A pre-defined annotation icon.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Annotations.PdfAnnotation">
      <summary>
            Represents the base class of all annotations.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfAnnotation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Annotations.PdfAnnotation" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfAnnotation.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Annotations.PdfAnnotation" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfAnnotation.Delete">
      <summary>
            Removes an annotation from the document
            <seealso cref="M:PdfEdit.Pdf.Annotations.PdfAnnotations.Remove(PdfEdit.Pdf.Annotations.PdfAnnotation)" /></summary>
    </member>
    <member name="P:PdfEdit.Pdf.Annotations.PdfAnnotation.Flags">
      <summary>
            Gets or sets the annotation flags of this instance.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Annotations.PdfAnnotation.Parent">
      <summary>
            Gets or sets the PdfAnnotations object that this annotation belongs to.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Annotations.PdfAnnotation.Rectangle">
      <summary>
            Gets or sets the annotation rectangle, defining the location of the annotation
            on the page in default user space units.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Annotations.PdfAnnotation.Page">
      <summary>
            Gets or sets the page for this Annotation
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Annotations.PdfAnnotation.Title">
      <summary>
            Gets or sets the text label to be displayed in the title bar of the annotation’s
            pop-up window when open and active. By convention, this entry identifies
            the user who added the annotation.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Annotations.PdfAnnotation.Subject">
      <summary>
            Gets or sets text representing a short description of the subject being
            addressed by the annotation.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Annotations.PdfAnnotation.Contents">
      <summary>
            Gets or sets the text to be displayed for the annotation or, if this type of
            annotation does not display text, an alternate description of the annotation’s
            contents in human-readable form.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Annotations.PdfAnnotation.Color">
      <summary>
            Gets or sets the color representing the components of the annotation. If the color
            has an alpha value other than 1, it is ignored. Use property Opacity to get or set the
            opacity of an annotation.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Annotations.PdfAnnotation.Opacity">
      <summary>
            Gets or sets the constant opacity value to be used in painting the annotation.
            This value applies to all visible elements of the annotation in its closed state
            (including its background and border) but not to the popup window that appears when
            the annotation is opened.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.Type">
      <summary>
            (Optional) The type of PDF object that this dictionary describes; if present,
            must be Annot for an annotation dictionary.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.Subtype">
      <summary>
            (Required) The type of annotation that this dictionary describes.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.Rect">
      <summary>
            (Required) The annotation rectangle, defining the location of the annotation
            on the page in default user space units.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.Contents">
      <summary>
            (Optional) Text to be displayed for the annotation or, if this type of annotation
            does not display text, an alternate description of the annotation’s contents
            in human-readable form. In either case, this text is useful when
            extracting the document’s contents in support of accessibility to users with
            disabilities or for other purposes.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.Page">
      <summary>
            (Optional except as noted below; PDF 1.3; not used in FDF files) 
            An indirect reference to the page object with which this annotation is associated.
            This entry shall be present in screen annotations associated with rendition actions 
            (PDF 1.5; see 12.5.6.18, “Screen Annotations” and 12.6.4.13, “Rendition Actions”)
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.NM">
      <summary>
            (Optional; PDF 1.4) The annotation name, a text string uniquely identifying it
            among all the annotations on its page.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.M">
      <summary>
            (Optional; PDF 1.1) The date and time when the annotation was most recently
            modified. The preferred format is a date string, but viewer applications should be 
            prepared to accept and display a string in any format.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.F">
      <summary>
            (Optional; PDF 1.1) A set of flags specifying various characteristics of the annotation.
            Default value: 0.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.BS">
      <summary>
            (Optional; PDF 1.2) A border style dictionary specifying the characteristics of
            the annotation’s border.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.AP">
      <summary>
            (Optional; PDF 1.2) An appearance dictionary specifying how the annotation
            is presented visually on the page. Individual annotation handlers may ignore
            this entry and provide their own appearances.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.AS">
      <summary>
            (Required if the appearance dictionary AP contains one or more subdictionaries; PDF 1.2)
            The annotation’s appearance state, which selects the applicable appearance stream from 
            an appearance subdictionary.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.Border">
      <summary>
            (Optional) An array specifying the characteristics of the annotation’s border.
            The border is specified as a rounded rectangle.
            In PDF 1.0, the array consists of three numbers defining the horizontal corner 
            radius, vertical corner radius, and border width, all in default user space units.
            If the corner radii are 0, the border has square (not rounded) corners; if the border 
            width is 0, no border is drawn.
            In PDF 1.1, the array may have a fourth element, an optional dash array defining a 
            pattern of dashes and gaps to be used in drawing the border. The dash array is 
            specified in the same format as in the line dash pattern parameter of the graphics state.
            For example, a Border value of [0 0 1 [3 2]] specifies a border 1 unit wide, with
            square corners, drawn with 3-unit dashes alternating with 2-unit gaps. Note that no
            dash phase is specified; the phase is assumed to be 0.
            Note: In PDF 1.2 or later, this entry may be ignored in favor of the BS entry.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.C">
      <summary>
            (Optional; PDF 1.1) An array of three numbers in the range 0.0 to 1.0, representing
            the components of a color in the DeviceRGB color space. This color is used for the
            following purposes:
            • The background of the annotation’s icon when closed
            • The title bar of the annotation’s pop-up window
            • The border of a link annotation
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.StructParent">
      <summary>
            (Required if the annotation is a structural content item; PDF 1.3)
            The integer key of the annotation’s entry in the structural parent tree.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.A">
      <summary>
            (Optional; PDF 1.1) An action to be performed when the annotation is activated.
            Note: This entry is not permitted in link annotations if a Dest entry is present.
            Also note that the A entry in movie annotations has a different meaning.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.OC">
      <summary>
            (Optional; PDF 1.5) An optional content group or optional content membership dictionary
            (see 8.11, “Optional Content”) specifying the optional content properties for the annotation.
            Before the annotation is drawn, its visibility shall be determined based on this entry as well as the
            annotation flags specified in the F entry (see 12.5.3, “Annotation Flags”).
            If it is determined to be invisible, the annotation shall be skipped, as if it were not in the document.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.T">
      <summary>
            (Optional; PDF 1.1) The text label to be displayed in the title bar of the annotation’s
            pop-up window when open and active. By convention, this entry identifies
            the user who added the annotation.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.Popup">
      <summary>
            (Optional; PDF 1.3) An indirect reference to a pop-up annotation for entering or
            editing the text associated with this annotation.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.CA">
      <summary>
            (Optional; PDF 1.4) The constant opacity value to be used in painting the annotation.
            This value applies to all visible elements of the annotation in its closed state
            (including its background and border) but not to the popup window that appears when
            the annotation is opened.
            The specified value is not used if the annotation has an appearance stream; in that
            case, the appearance stream must specify any transparency. (However, if the viewer
            regenerates the annotation’s appearance stream, it may incorporate the CA value
            into the stream’s content.)
            The implicit blend mode is Normal.
            Default value: 1.0.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Annotations.PdfAnnotation.Keys.Subj">
      <summary>
            (Optional; PDF 1.5) Text representing a short description of the subject being
            addressed by the annotation.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Annotations.PdfAnnotations">
      <summary>
            Represents the annotations array of a page.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfAnnotations.Add(PdfEdit.Pdf.Annotations.PdfAnnotation)">
      <summary>
            Adds the specified annotation.
            </summary>
      <param name="annotation">The annotation.</param>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfAnnotations.Remove(PdfEdit.Pdf.Annotations.PdfAnnotation)">
      <summary>
            Removes an annotation from the document.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfAnnotations.Clear">
      <summary>
            Removes all the annotations from the current page.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Annotations.PdfAnnotations.Count">
      <summary>
            Gets the number of annotations in this collection.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Annotations.PdfAnnotations.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:PdfEdit.Pdf.Annotations.PdfAnnotation" /> at the specified index.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfAnnotations.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Annotations.PdfFileAttachmentAnnotation">
      <summary>
            Represent a file that is attached to the PDF
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Annotations.PdfFileAttachmentAnnotation.IconType">
      <summary>
            Name of icons used in displaying the annotation.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfFileAttachmentAnnotation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Annotations.PdfFileAttachmentAnnotation" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfFileAttachmentAnnotation.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Annotations.PdfFileAttachmentAnnotation" /> class.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Annotations.PdfGenericAnnotation">
      <summary>
            Represents a generic annotation. Used for annotation dictionaries unknown to PDFEdit.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Annotations.PdfLinkAnnotation">
      <summary>
            Represents a link annotation.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfLinkAnnotation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Annotations.PdfLinkAnnotation" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfLinkAnnotation.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Annotations.PdfLinkAnnotation" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfLinkAnnotation.#ctor(PdfEdit.Pdf.PdfDictionary)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Annotations.PdfLinkAnnotation" /> with the specified dictionary.
            </summary>
      <param name="dict">
      </param>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfLinkAnnotation.CreateDocumentLink(PdfEdit.Pdf.PdfRectangle,System.Int32)">
      <summary>
            Creates a link within the current document.
            </summary>
      <param name="rect">The link area in default page coordinates.</param>
      <param name="destinationPage">The one-based destination page number.</param>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfLinkAnnotation.CreateWebLink(PdfEdit.Pdf.PdfRectangle,System.String)">
      <summary>
            Creates a link to the web.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfLinkAnnotation.CreateFileLink(PdfEdit.Pdf.PdfRectangle,System.String)">
      <summary>
            Creates a link to a file.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotation">
      <summary>
            Represents a rubber stamp annotation.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotation" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotation.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotation" /> class.
            </summary>
      <param name="document">The document.</param>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotation.#ctor(PdfEdit.Pdf.PdfDictionary)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotation" /> with the specified dictionary.
            </summary>
      <param name="dict">
      </param>
    </member>
    <member name="P:PdfEdit.Pdf.Annotations.PdfRubberStampAnnotation.Icon">
      <summary>
            Gets or sets an icon to be used in displaying the annotation.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Annotations.PdfTextAnnotation">
      <summary>
            Represents a text annotation.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfTextAnnotation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Annotations.PdfTextAnnotation" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfTextAnnotation.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Annotations.PdfTextAnnotation" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfTextAnnotation.#ctor(PdfEdit.Pdf.PdfDictionary)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Annotations.PdfTextAnnotation" /> with the specified dictionary.
            </summary>
      <param name="dict">
      </param>
    </member>
    <member name="P:PdfEdit.Pdf.Annotations.PdfTextAnnotation.Open">
      <summary>
            Gets or sets a flag indicating whether the annotation should initially be displayed open.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Annotations.PdfTextAnnotation.Icon">
      <summary>
            Gets or sets an icon to be used in displaying the annotation.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Annotations.PdfWidgetAnnotation">
      <summary>
            Represents a text annotation.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Annotations.PdfWidgetAnnotation.#ctor(PdfEdit.Pdf.PdfDictionary)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Annotations.PdfWidgetAnnotation" /> with the specified dictionary.
            </summary>
      <param name="dict">
      </param>
    </member>
    <member name="P:PdfEdit.Pdf.Annotations.PdfWidgetAnnotation.BackColor">
      <summary>
            Gets or sets the background color of the widget.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Annotations.PdfWidgetAnnotation.BorderColor">
      <summary>
            Gets or sets the border color of the widget.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Annotations.PdfWidgetAnnotation.BorderWidth">
      <summary>
            Gets or sets the border-width of this widget.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Annotations.PdfWidgetAnnotation.Rotation">
      <summary>
            The number of degrees by which the widget annotation shall be rotated counterclockwise relative to the page.
            The value shall be a multiple of 90. Default value: 0
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Annotations.PdfWidgetAnnotation.ParentField">
      <summary>
            Get the parent-field of this Widget, if it is the child of a PdfAcroField&gt;.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Content.Objects.CObject">
      <summary>
            Base class for all PDF content stream objects.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Content.Objects.CObject" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CObject.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CObject.Copy">
      <summary>
            Implements the copy mechanism. Must be overridden in derived classes.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Content.Objects.CComment">
      <summary>
            Represents a comment in a PDF content stream.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CComment.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CComment.Copy">
      <summary>
            Implements the copy mechanism of this class.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Content.Objects.CComment.Text">
      <summary>
            Gets or sets the comment text.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CComment.ToString">
      <summary>
            Returns a string that represents the current comment.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Content.Objects.CSequence">
      <summary>
            Represents a sequence of objects in a PDF content stream.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CSequence.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CSequence.Copy">
      <summary>
            Implements the copy mechanism of this class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CSequence.Add(PdfEdit.Pdf.Content.Objects.CSequence)">
      <summary>
            Adds the specified sequence.
            </summary>
      <param name="sequence">The sequence.</param>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CSequence.Add(PdfEdit.Pdf.Content.Objects.CObject)">
      <summary>
            Adds the specified value add the end of the sequence.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CSequence.Clear">
      <summary>
            Removes all elements from the sequence.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CSequence.Contains(PdfEdit.Pdf.Content.Objects.CObject)">
      <summary>
            Determines whether the specified value is in the sequence.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CSequence.IndexOf(PdfEdit.Pdf.Content.Objects.CObject)">
      <summary>
            Returns the index of the specified value in the sequence or -1, if no such value is in the sequence.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CSequence.Insert(System.Int32,PdfEdit.Pdf.Content.Objects.CObject)">
      <summary>
            Inserts the specified value in the sequence.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CSequence.Remove(PdfEdit.Pdf.Content.Objects.CObject)">
      <summary>
            Removes the specified value from the sequence.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CSequence.RemoveAt(System.Int32)">
      <summary>
            Removes the value at the specified index from the sequence.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Content.Objects.CSequence.Item(System.Int32)">
      <summary>
            Gets or sets a CObject at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CSequence.CopyTo(PdfEdit.Pdf.Content.Objects.CObject[],System.Int32)">
      <summary>
            Copies the elements of the sequence to the specified array.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Content.Objects.CSequence.Count">
      <summary>
            Gets the number of elements contained in the sequence.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CSequence.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the sequence.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CSequence.ToContent">
      <summary>
            Converts the sequence to a PDF content stream.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CSequence.ToString">
      <summary>
            Returns a string containing all elements of the sequence.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Content.Objects.CNumber">
      <summary>
            Represents the base class for numerical objects in a PDF content stream.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CNumber.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CNumber.Copy">
      <summary>
            Implements the copy mechanism of this class.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Content.Objects.CInteger">
      <summary>
            Represents an integer value in a PDF content stream.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CInteger.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CInteger.Copy">
      <summary>
            Implements the copy mechanism of this class.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Content.Objects.CInteger.Value">
      <summary>
            Gets or sets the value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CInteger.ToString">
      <summary>
            Returns a string that represents the current value.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Content.Objects.CReal">
      <summary>
            Represents a real value in a PDF content stream.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CReal.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CReal.Copy">
      <summary>
            Implements the copy mechanism of this class.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Content.Objects.CReal.Value">
      <summary>
            Gets or sets the value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CReal.ToString">
      <summary>
            Returns a string that represents the current value.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Content.Objects.CStringType">
      <summary>
            Type of the parsed string.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Content.Objects.CStringType.String">
      <summary>
            The string has the format "(...)".
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Content.Objects.CStringType.HexString">
      <summary>
            The string has the format "&lt;...&gt;".
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Content.Objects.CStringType.UnicodeString">
      <summary>
            The string... TODO.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Content.Objects.CStringType.UnicodeHexString">
      <summary>
            The string... TODO.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Content.Objects.CStringType.Dictionary">
      <summary>
            HACK: The string is the content of a dictionary.
            Currently there is no parser for dictionaries in Content Streams.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Content.Objects.CString">
      <summary>
            Represents a string value in a PDF content stream.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CString.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CString.Copy">
      <summary>
            Implements the copy mechanism of this class.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Content.Objects.CString.Value">
      <summary>
            Gets or sets the value.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Content.Objects.CString.CStringType">
      <summary>
            Gets or sets the type of the content string.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CString.ToString">
      <summary>
            Returns a string that represents the current value.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Content.Objects.CName">
      <summary>
            Represents a name in a PDF content stream.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CName.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Content.Objects.CName" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CName.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Content.Objects.CName" /> class.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CName.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CName.Copy">
      <summary>
            Implements the copy mechanism of this class.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Content.Objects.CName.Name">
      <summary>
            Gets or sets the name. Names must start with a slash.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CName.ToString">
      <summary>
            Returns a string that represents the current value.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Content.Objects.CArray">
      <summary>
            Represents an array of objects in a PDF content stream.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CArray.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CArray.Copy">
      <summary>
            Implements the copy mechanism of this class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.CArray.ToString">
      <summary>
            Returns a string that represents the current value.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Content.Objects.COperator">
      <summary>
            Represents an operator a PDF content stream.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.COperator.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Content.Objects.COperator" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.COperator.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.COperator.Copy">
      <summary>
            Implements the copy mechanism of this class.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Content.Objects.COperator.Name">
      <summary>
            Gets or sets the name of the operator
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:PdfEdit.Pdf.Content.Objects.COperator.Operands">
      <summary>
            Gets or sets the operands.
            </summary>
      <value>The operands.</value>
    </member>
    <member name="P:PdfEdit.Pdf.Content.Objects.COperator.OpCode">
      <summary>
            Gets the operator description for this instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.COperator.ToString">
      <summary>
            Returns a string that represents the current operator.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Content.Objects.OpCodeFlags">
      <summary>
            Specifies the group of operations the op-code belongs to.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Content.Objects.OpCodeFlags.None">
      <summary>
      </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Content.Objects.OpCodeFlags.TextOut">
      <summary>
      </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Content.Objects.OpCodeName">
      <summary>
            The names of the op-codes. 
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Content.Objects.OpCode">
      <summary>
            Represents a PDF content stream operator description.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Content.Objects.OpCode.Name">
      <summary>
            The name of the operator.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Content.Objects.OpCode.OpCodeName">
      <summary>
            The enum value of the operator.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Content.Objects.OpCode.Operands">
      <summary>
            The number of operands. -1 indicates a variable number of operands.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Content.Objects.OpCode.Flags">
      <summary>
            The flags.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Content.Objects.OpCode.Postscript">
      <summary>
            The postscript equivalent, or null, if no such operation exists.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Content.Objects.OpCode.Description">
      <summary>
            The description from Adobe PDF Reference.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Content.Objects.OpCodes">
      <summary>
            Static class with all PDF op-codes.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.Objects.OpCodes.OperatorFromName(System.String)">
      <summary>
            Operators from name.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="T:PdfEdit.Pdf.Content.CLexer">
      <summary>
            Lexical analyzer for PDF content files. Adobe specifies no grammar, but it seems that it
            is a simple post-fix notation.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.CLexer.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the Lexer class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.CLexer.#ctor(System.IO.MemoryStream)">
      <summary>
            Initializes a new instance of the Lexer class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.CLexer.ScanNextToken">
      <summary>
            Reads the next token and returns its type.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.CLexer.ScanComment">
      <summary>
            Scans a comment line. (Not yet used, comments are skipped by lexer.)
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.CLexer.ScanInlineImage">
      <summary>
            Scans the bytes of an inline image.
            NYI: Just scans over it.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.CLexer.ScanName">
      <summary>
            Scans a name.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.CLexer.ScanNumber">
      <summary>
            Scans an integer or real number.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.CLexer.ScanOperator">
      <summary>
            Scans an operator.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.CLexer.MoveToNonWhiteSpace">
      <summary>
            If the current character is not a white space, the function immediately returns it.
            Otherwise the PDF cursor is moved forward to the first non-white space or EOF.
            White spaces are NUL, HT, LF, FF, CR, and SP.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Content.CLexer.Symbol">
      <summary>
            Gets or sets the current symbol.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Content.CLexer.Token">
      <summary>
            Gets the current token.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Content.CLexer.ContLength">
      <summary>
            Gets the length of the content.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Content.ContentReader">
      <summary>
            Represents the functionality for reading PDF content streams.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.ContentReader.ReadContent(PdfEdit.Pdf.PdfPage)">
      <summary>
            Reads the content stream(s) of the specified page.
            </summary>
      <param name="page">The page.</param>
    </member>
    <member name="M:PdfEdit.Pdf.Content.ContentReader.ReadContent(System.Byte[])">
      <summary>
            Reads the specified content.
            </summary>
      <param name="content">The content.</param>
    </member>
    <member name="M:PdfEdit.Pdf.Content.ContentReader.ReadContent(System.IO.MemoryStream)">
      <summary>
            Reads the specified content.
            </summary>
      <param name="content">The content.</param>
    </member>
    <member name="T:PdfEdit.Pdf.Content.ContentReaderException">
      <summary>
            Exception thrown by ContentReader.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.ContentReaderException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Content.ContentReaderException" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Content.ContentReaderException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Content.ContentReaderException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:PdfEdit.Pdf.Content.ContentReaderException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Content.ContentReaderException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:PdfEdit.Pdf.Content.CParser">
      <summary>
            Provides the functionality to parse PDF content streams.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Content.CSymbol">
      <summary>
            Terminal symbols recognized by PDF content stream lexer.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Filters.Ascii85Decode">
      <summary>
            Implements the ASCII85Decode filter.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.Ascii85Decode.Encode(System.Byte[])">
      <summary>
            Encodes the specified data.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.Ascii85Decode.Decode(System.Byte[],PdfEdit.Pdf.PdfDictionary)">
      <summary>
            Decodes the specified data.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.Ascii85Decode.ToString">
      <summary>
            Name of this encoder
            </summary>
      <returns>Name of the filter</returns>
    </member>
    <member name="T:PdfEdit.Pdf.Filters.AsciiHexDecode">
      <summary>
            Implements the ASCIIHexDecode filter.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.AsciiHexDecode.Encode(System.Byte[])">
      <summary>
            Encodes the specified data.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.AsciiHexDecode.Decode(System.Byte[],PdfEdit.Pdf.PdfDictionary)">
      <summary>
            Decodes the specified data.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.AsciiHexDecode.ToString">
      <summary>
            Name of this encoder
            </summary>
      <returns>Name of the filter</returns>
    </member>
    <member name="T:PdfEdit.Pdf.Filters.CryptDecode">
      <summary>
            CrpytDecode filter.For now it supports only IdentityFilter which doesn't change data stream in any way.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.CryptDecode.Encode(System.Byte[])">
      <summary>
            Implement IdentityFilter filter which doesn't change data in any way.
            </summary>
      <param name="data">Data in the form of byte array.</param>
      <returns>if data is null throws exception, otherwise return unmodified data </returns>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.CryptDecode.Decode(System.Byte[],PdfEdit.Pdf.PdfDictionary)">
      <summary>
            Implement IdentityFilter filter which doesn't change data in any way.
            </summary>
      <param name="data">Data in the form of byte array.</param>
      <param name="parms">Additional decode parameters. For now this parameter isn't used.</param>
      <returns>if data is null throws exception, otherwise return unmodified data </returns>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.CryptDecode.ToString">
      <summary>
            Name of this encoder.
            </summary>
      <returns>name of this filter encoder</returns>
    </member>
    <member name="T:PdfEdit.Pdf.Filters.Filter">
      <summary>
            Base class for all stream filters
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.Filter.Encode(System.Byte[])">
      <summary>
            When implemented in a derived class encodes the specified data.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.Filter.Encode(System.String)">
      <summary>
            Encodes a raw string.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.Filter.Decode(System.Byte[],PdfEdit.Pdf.PdfDictionary)">
      <summary>
            When implemented in a derived class decodes the specified data.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.Filter.Decode(System.Byte[])">
      <summary>
            Decodes the specified data.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.Filter.DecodeToString(System.Byte[],PdfEdit.Pdf.PdfDictionary)">
      <summary>
            Decodes to a raw string.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.Filter.DecodeToString(System.Byte[])">
      <summary>
            Decodes to a raw string.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.Filter.RemoveWhiteSpace(System.Byte[])">
      <summary>
            Removes all white spaces from the data. The function assumes that the bytes are characters.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Filters.FlateDecode">
      <summary>
            Implements the FlateDecode filter by wrapping SharpZipLib.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.FlateDecode.Encode(System.Byte[])">
      <summary>
            Encodes the specified data.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.FlateDecode.Encode(System.Byte[],PdfEdit.Pdf.PdfFlateEncodeMode)">
      <summary>
            Encodes the specified data.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.FlateDecode.Decode(System.Byte[],PdfEdit.Pdf.PdfDictionary)">
      <summary>
            Decodes the specified data.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.FlateDecode.ToString">
      <summary>
            Name of this encoder
            </summary>
      <returns>Name of the filter</returns>
    </member>
    <member name="T:PdfEdit.Pdf.Filters.LzwDecode">
      <summary>
            Implements the LzwDecode filter.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.LzwDecode.Encode(System.Byte[])">
      <summary>
            Throws a NotImplementedException because the obsolete LZW encoding is not supported by PDFEdit.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.LzwDecode.Decode(System.Byte[],PdfEdit.Pdf.PdfDictionary)">
      <summary>
            Decodes the specified data.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.LzwDecode.ToString">
      <summary>
            Name of this encoder
            </summary>
      <returns>Name of the filter</returns>
    </member>
    <member name="T:PdfEdit.Pdf.Filters.RunLengthDecode">
      <summary>
            Implements RunLengthDecode
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.RunLengthDecode.Encode(System.Byte[])">
      <summary>
            Implements RunLengthDecode encoder on the specified data.
            </summary>
      <param name="data">Data to be encoded.</param>
      <returns>expection if data is null otherwise returns encoded data.</returns>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.RunLengthDecode.Decode(System.Byte[],PdfEdit.Pdf.PdfDictionary)">
      <summary>
            Implements RunLengthDecode decoder on the specified data.
            </summary>
      <param name="data">Data to be encoded.</param>
      <param name="parms">Additional parameters. For now not used.</param>
      <returns>expection if data is null otherwise returns decoded data.</returns>
    </member>
    <member name="M:PdfEdit.Pdf.Filters.RunLengthDecode.ToString">
      <summary>
            Name of this encoder.
            </summary>
      <returns>Name of the filter</returns>
    </member>
    <member name="T:PdfEdit.Pdf.Internal.AnsiEncoding">
      <summary>
            An encoder for PDF AnsiEncoding.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Internal.AnsiEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>
            Gets the byte count.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Internal.AnsiEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
            Gets the bytes.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Internal.AnsiEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Gets the character count.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Internal.AnsiEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>
            Gets the chars.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Internal.AnsiEncoding.GetMaxByteCount(System.Int32)">
      <summary>
            When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.
            </summary>
      <param name="charCount">The number of characters to encode.</param>
      <returns>
            The maximum number of bytes produced by encoding the specified number of characters.
            </returns>
    </member>
    <member name="M:PdfEdit.Pdf.Internal.AnsiEncoding.GetMaxCharCount(System.Int32)">
      <summary>
            When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.
            </summary>
      <param name="byteCount">The number of bytes to decode.</param>
      <returns>
            The maximum number of characters produced by decoding the specified number of bytes.
            </returns>
    </member>
    <member name="M:PdfEdit.Pdf.Internal.AnsiEncoding.IsAnsi1252Char(System.Char)">
      <summary>
            Indicates whether the specified Unicode character is available in the ANSI code page 1252.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Internal.AnsiEncoding.UnicodeToAnsi(System.Char)">
      <summary>
            Maps Unicode to ANSI code page 1252.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Internal.RawEncoding">
      <summary>
            An encoder for raw strings. The raw encoding is simply the identity relation between
            characters and bytes. PDFEdit internally works with raw encoded strings instead of
            byte arrays because strings are much more handy than byte arrays.
            </summary>
      <remarks>
            Raw encoded strings represent an array of bytes. Therefore a character greater than
            255 is not valid in a raw encoded string.
            </remarks>
    </member>
    <member name="M:PdfEdit.Pdf.Internal.RawEncoding.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.Internal.RawEncoding" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Internal.RawEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>
            When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.
            </summary>
      <param name="chars">The character array containing the set of characters to encode.</param>
      <param name="index">The index of the first character to encode.</param>
      <param name="count">The number of characters to encode.</param>
      <returns>
            The number of bytes produced by encoding the specified characters.
            </returns>
    </member>
    <member name="M:PdfEdit.Pdf.Internal.RawEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
            When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.
            </summary>
      <param name="chars">The character array containing the set of characters to encode.</param>
      <param name="charIndex">The index of the first character to encode.</param>
      <param name="charCount">The number of characters to encode.</param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
      <returns>
            The actual number of bytes written into <paramref name="bytes" />.
            </returns>
    </member>
    <member name="M:PdfEdit.Pdf.Internal.RawEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>
            When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.
            </summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="index">The index of the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <returns>
            The number of characters produced by decoding the specified sequence of bytes.
            </returns>
    </member>
    <member name="M:PdfEdit.Pdf.Internal.RawEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>
            When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.
            </summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="byteIndex">The index of the first byte to decode.</param>
      <param name="byteCount">The number of bytes to decode.</param>
      <param name="chars">The character array to contain the resulting set of characters.</param>
      <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
      <returns>
            The actual number of characters written into <paramref name="chars" />.
            </returns>
    </member>
    <member name="M:PdfEdit.Pdf.Internal.RawEncoding.GetMaxByteCount(System.Int32)">
      <summary>
            When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.
            </summary>
      <param name="charCount">The number of characters to encode.</param>
      <returns>
            The maximum number of bytes produced by encoding the specified number of characters.
            </returns>
    </member>
    <member name="M:PdfEdit.Pdf.Internal.RawEncoding.GetMaxCharCount(System.Int32)">
      <summary>
            When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.
            </summary>
      <param name="byteCount">The number of bytes to decode.</param>
      <returns>
            The maximum number of characters produced by decoding the specified number of bytes.
            </returns>
    </member>
    <member name="T:PdfEdit.Pdf.IO.Chars">
      <summary>
            Character table by name.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.EOF">
      <summary>
            The EOF marker.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.NUL">
      <summary>
            The null byte.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.CR">
      <summary>
            The carriage return character (ignored by lexer).
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.LF">
      <summary>
            The line feed character.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.BEL">
      <summary>
            The bell character.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.BS">
      <summary>
            The backspace character.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.FF">
      <summary>
            The form feed character.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.HT">
      <summary>
            The horizontal tab character.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.VT">
      <summary>
            The vertical tab character.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.NonBreakableSpace">
      <summary>
            The non-breakable space character (aka no-break space or non-breaking space).
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.SP">
      <summary>
            The space character.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.QuoteDbl">
      <summary>
            The double quote character.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.QuoteSingle">
      <summary>
            The single quote character.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.ParenLeft">
      <summary>
            The left parenthesis.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.ParenRight">
      <summary>
            The right parenthesis.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.BraceLeft">
      <summary>
            The left brace.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.BraceRight">
      <summary>
            The right brace.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.BracketLeft">
      <summary>
            The left bracket.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.BracketRight">
      <summary>
            The right bracket.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.Less">
      <summary>
            The less-than sign.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.Greater">
      <summary>
            The greater-than sign.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.Equal">
      <summary>
            The equal sign.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.Period">
      <summary>
            The period.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.Semicolon">
      <summary>
            The semicolon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.Colon">
      <summary>
            The colon.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.Slash">
      <summary>
            The slash.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.Bar">
      <summary>
            The bar character.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.BackSlash">
      <summary>
            The back slash.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.Percent">
      <summary>
            The percent sign.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.Dollar">
      <summary>
            The dollar sign.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.At">
      <summary>
            The at sign.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.NumberSign">
      <summary>
            The number sign.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.Question">
      <summary>
            The question mark.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.Hyphen">
      <summary>
            The hyphen.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.SoftHyphen">
      <summary>
            The soft hyphen.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.Chars.Currency">
      <summary>
            The currency sign.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.IO.PasswordValidity">
      <summary>
            Determines the type of the password.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.PasswordValidity.Invalid">
      <summary>
            Password is neither user nor owner password.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.PasswordValidity.UserPassword">
      <summary>
            Password is user password.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.PasswordValidity.OwnerPassword">
      <summary>
            Password is owner password.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.IO.PdfDocumentOpenMode">
      <summary>
            Determines how a PDF document is opened. 
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.Modify">
      <summary>
            The PDF stream is completely read into memory and can be modified. Pages can be deleted or
            inserted, but it is not possible to extract pages. This mode is useful for modifying an
            existing PDF document.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.Import">
      <summary>
            The PDF stream is opened for importing pages from it. A document opened in this mode cannot
            be modified.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.ReadOnly">
      <summary>
            The PDF stream is completely read into memory, but cannot be modified. This mode preserves the
            original internal structure of the document and is useful for analyzing existing PDF files.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.InformationOnly">
      <summary>
            The PDF stream is partially read for information purposes only. The only valid operation is to
            call the Info property at the imported document. This option is very fast and needs less memory
            and is e.g. useful for browsing information about a collection of PDF documents in a user interface.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.IO.PdfWriterLayout">
      <summary>
            Determines how the PDF output stream is formatted. Even all formats create valid PDF files,
            only Compact or Standard should be used for production purposes.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.PdfWriterLayout.Compact">
      <summary>
            The PDF stream contains no unnecessary characters. This is default in release build.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.PdfWriterLayout.Standard">
      <summary>
            The PDF stream contains some superfluous line feeds, but is more readable.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.PdfWriterLayout.Indented">
      <summary>
            The PDF stream is indented to reflect the nesting levels of the objects. This is useful
            for analyzing PDF files, but increases the size of the file significantly.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.PdfWriterLayout.Verbose">
      <summary>
            The PDF stream is indented to reflect the nesting levels of the objects and contains additional
            information about the PDFEdit objects. Furthermore content streams are not deflated. This 
            is useful for debugging purposes only and increases the size of the file significantly.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.IO.Symbol">
      <summary>
            Terminal symbols recognized by lexer.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.IO.Lexer">
      <summary>
            Lexical analyzer for PDF files. Technically a PDF file is a stream of bytes. Some chunks
            of bytes represent strings in several encodings. The actual encoding depends on the
            context where the string is used. Therefore the bytes are 'raw encoded' into characters,
            i.e. a character or token read by the lexer has always character values in the range from
            0 to 255.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.Lexer.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the Lexer class.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.IO.Lexer.Position">
      <summary>
            Gets or sets the position within the PDF stream.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.Lexer.ScanNextToken">
      <summary>
            Reads the next token and returns its type. If the token starts with a digit, the parameter
            testReference specifies how to treat it. If it is false, the lexer scans for a single integer.
            If it is true, the lexer checks if the digit is the prefix of a reference. If it is a reference,
            the token is set to the object ID followed by the generation number separated by a blank
            (the 'R' is omitted from the token).
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.Lexer.ReadStream(System.Int32,System.Int32)">
      <summary>
            Reads the raw content of a stream.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.Lexer.ReadRawString(System.Int32,System.Int32)">
      <summary>
            Reads a string in raw encoding.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.Lexer.ScanComment">
      <summary>
            Scans a comment line.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.Lexer.ScanName">
      <summary>
            Scans a name.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.Lexer.ScanNumber">
      <summary>
            Scans a number.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.Lexer.ScanKeyword">
      <summary>
            Scans a keyword.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.Lexer.ScanLiteralString">
      <summary>
            Scans a literal string, contained between "(" and ")".
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.Lexer.MoveToNonWhiteSpace">
      <summary>
            If the current character is not a white space, the function immediately returns it.
            Otherwise the PDF cursor is moved forward to the first non-white space or EOF.
            White spaces are NUL, HT, LF, FF, CR, and SP.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.IO.Lexer.Symbol">
      <summary>
            Gets the current symbol.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.IO.Lexer.Token">
      <summary>
            Gets the current token.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.IO.Lexer.TokenToBoolean">
      <summary>
            Interprets current token as boolean literal.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.IO.Lexer.TokenToInteger">
      <summary>
            Interprets current token as integer literal.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.IO.Lexer.TokenToUInteger">
      <summary>
            Interprets current token as unsigned integer literal.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.IO.Lexer.TokenToReal">
      <summary>
            Interprets current token as real or integer literal.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.IO.Lexer.TokenToObjectID">
      <summary>
            Interprets current token as object ID.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.IO.Lexer.PdfLength">
      <summary>
            Gets the length of the PDF output.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.IO.PdfPasswordProviderArgs">
      <summary>
            Encapsulates the arguments of the PdfPasswordProvider delegate.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.PdfPasswordProviderArgs.Password">
      <summary>
            Sets the password to open the document with.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.IO.PdfPasswordProviderArgs.Abort">
      <summary>
            When set to true the PdfReader.Open function returns null indicating that no PdfDocument was created.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.IO.PdfPasswordProvider">
      <summary>
            A delegated used by the PdfReader.Open function to retrieve a password if the document is protected.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.IO.PdfReader">
      <summary>
            Represents the functionality for reading PDF documents.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.PdfReader.TestPdfFile(System.String)">
      <summary>
            Determines whether the file specified by its path is a PDF file by inspecting the first eight
            bytes of the data. If the file header has the form «%PDF-x.y» the function returns the version
            number as integer (e.g. 14 for PDF 1.4). If the file header is invalid or inaccessible
            for any reason, 0 is returned. The function never throws an exception.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.PdfReader.TestPdfFile(System.IO.Stream)">
      <summary>
            Determines whether the specified stream is a PDF file by inspecting the first eight
            bytes of the data. If the data begins with «%PDF-x.y» the function returns the version
            number as integer (e.g. 14 for PDF 1.4). If the data is invalid or inaccessible
            for any reason, 0 is returned. The function never throws an exception.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.PdfReader.TestPdfFile(System.Byte[])">
      <summary>
            Determines whether the specified data is a PDF file by inspecting the first eight
            bytes of the data. If the data begins with «%PDF-x.y» the function returns the version
            number as integer (e.g. 14 for PDF 1.4). If the data is invalid or inaccessible
            for any reason, 0 is returned. The function never throws an exception.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.PdfReader.Open(System.String,PdfEdit.Pdf.IO.PdfDocumentOpenMode)">
      <summary>
            Opens an existing PDF document.<para />
            Note: Using <paramref name="openmode" /> values <see cref="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.Modify" /> or <see cref="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.Import" /> 
            preserves existing security settings from the document unless they are modified.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.PdfReader.Open(System.String,PdfEdit.Pdf.IO.PdfDocumentOpenMode,PdfEdit.Pdf.IO.PdfPasswordProvider)">
      <summary>
            Opens an existing PDF document.<para />
            Note: Using <paramref name="openmode" /> values <see cref="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.Modify" /> or <see cref="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.Import" /> 
            preserves existing security settings from the document unless they are modified.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.PdfReader.Open(System.String,System.String,PdfEdit.Pdf.IO.PdfDocumentOpenMode)">
      <summary>
            Opens an existing PDF document.<para />
            Note: Using <paramref name="openmode" /> values <see cref="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.Modify" /> or <see cref="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.Import" /> 
            preserves existing security settings from the document unless they are modified.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.PdfReader.Open(System.String,System.String,PdfEdit.Pdf.IO.PdfDocumentOpenMode,PdfEdit.Pdf.IO.PdfPasswordProvider)">
      <summary>
            Opens an existing PDF document.<para />
            Note: Using <paramref name="openmode" /> values <see cref="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.Modify" /> or <see cref="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.Import" /> 
            preserves existing security settings from the document unless they are modified.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.PdfReader.Open(System.String)">
      <summary>
            Opens an existing PDF document.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.PdfReader.Open(System.String,System.String)">
      <summary>
            Opens an existing PDF document.<para />
            Note: Any existing security settings will be removed from the document.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.PdfReader.Open(System.IO.Stream,PdfEdit.Pdf.IO.PdfDocumentOpenMode)">
      <summary>
            Opens an existing PDF document.<para />
            Note: Using <paramref name="openmode" /> values <see cref="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.Modify" /> or <see cref="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.Import" /> 
            preserves existing security settings from the document unless they are modified.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.PdfReader.Open(System.IO.Stream,PdfEdit.Pdf.IO.PdfDocumentOpenMode,PdfEdit.Pdf.IO.PdfPasswordProvider)">
      <summary>
            Opens an existing PDF document.<para />
            Note: Using <paramref name="openmode" /> values <see cref="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.Modify" /> or <see cref="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.Import" /> 
            preserves existing security settings from the document unless they are modified.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.PdfReader.Open(System.IO.Stream,System.String,PdfEdit.Pdf.IO.PdfDocumentOpenMode)">
      <summary>
            Opens an existing PDF document.<para />
            Note: Using <paramref name="openmode" /> values <see cref="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.Modify" /> or <see cref="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.Import" /> 
            preserves existing security settings from the document unless they are modified.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.PdfReader.Open(System.IO.Stream,System.String,PdfEdit.Pdf.IO.PdfDocumentOpenMode,PdfEdit.Pdf.IO.PdfPasswordProvider)">
      <summary>
            Opens an existing PDF document.<para />
            Note: Using <paramref name="openmode" /> values <see cref="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.Modify" /> or <see cref="F:PdfEdit.Pdf.IO.PdfDocumentOpenMode.Import" /> 
            preserves existing security settings from the document unless they are modified.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.PdfReader.Open(System.IO.Stream)">
      <summary>
            Opens an existing PDF document.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.IO.PdfReaderException">
      <summary>
            Exception thrown by PdfReader.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.PdfReaderException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.IO.PdfReaderException" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.IO.PdfReaderException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.IO.PdfReaderException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:PdfEdit.Pdf.IO.PdfReaderException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.IO.PdfReaderException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:PdfEdit.Pdf.Security.PdfDocumentSecurityLevel">
      <summary>
            Specifies the security level of the PDF document.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Security.PdfDocumentSecurityLevel.None">
      <summary>
            Document is not protected.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Security.PdfDocumentSecurityLevel.RC4_40">
      <summary>
            Encrypted with RC4 using old weak algorithm based on 40 bit key. Not recommended.
            pdf_reference_1-7.pdf: "Algorithm 3.1 on page 119, with an encryption key length of 40 bits; see below."
            Version: 1, Revision: 2
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Security.PdfDocumentSecurityLevel.RC4_Custom">
      <summary>
            (PDF 1.4) Document is protected with RC4 algorithm and custom length encryption key between 40 and 128 bits.
            Version: 2, Revision: 3
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Security.PdfDocumentSecurityLevel.RC4_128">
      <summary>
            Document is protected with RC4 and 128-bit encryption key.
            This version uses crypt filters that may allow you to specify if metadata will get encrypted or not.
            Version: 4, Revision: 4
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Security.PdfDocumentSecurityLevel.AES_128">
      <summary>
            Document is protected with AES and 128-bit encryption key.
            This version uses crypt filters that may allow you to specify if metadata will get encrypted or not.
            Version: 4, Revision: 4
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Security.PdfDocumentSecurityLevel.AES_256_Weak">
      <summary>
            Document is protected with AES weak/unsecure algorithm and 256-bit encryption key. Not recommended.
            This version uses crypt filters that may allow you to specify if metadata will get encrypted or not. 
            INFO: This algorithm will be marked as deprecated in PDF 2.0 because of security issues. 
            Version: 5, Revision: 5
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Security.PdfDocumentSecurityLevel.AES_256">
      <summary>
            Document is protected with AES and 256-bit encryption key.
            This version uses crypt filters that may allow you to specify if metadata will get encrypted or not.         
            Version: 5, Revision: 6
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Security.PdfSecuritySettings">
      <summary>
            Encapsulates access to the security settings of a PDF document.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Security.PdfSecuritySettings.HasOwnerPermissions">
      <summary>
            Indicates whether the granted access to the document is 'owner permission'. Returns true if the document 
            is unprotected or was opened with the owner password. Returns false if the document was opened with the
            user password.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Security.PdfSecuritySettings.PdfDocumentEncryptionAlgorithm">
      <summary>
            Gets or sets the document encryption alghoritm. If the type of the encryption alghoritm is different than None,
            you must also set a user and/or an owner password. Otherwise saving the document will fail.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Security.PdfSecuritySettings.UserPassword">
      <summary>
            Sets the user password of the document. Setting a password automatically sets the
            PdfDocumentSecurityLevel to PdfDocumentSecurityLevel.Encrypted128Bit if its current
            value is PdfDocumentSecurityLevel.None.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Security.PdfSecuritySettings.OwnerPassword">
      <summary>
            Sets the owner password of the document. Setting a password automatically sets the
            PdfDocumentSecurityLevel to PdfDocumentSecurityLevel.Encrypted128Bit if its current
            value is PdfDocumentSecurityLevel.None.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Security.PdfSecuritySettings.PermitAll">
      <summary>
            Returns if user has all permissions.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Security.PdfSecuritySettings.PermitPrint">
      <summary>
            Permits printing the document. Should be used in conjunction with PermitFullQualityPrint.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Security.PdfSecuritySettings.PermitModifyDocument">
      <summary>
            Permits modifying the document.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Security.PdfSecuritySettings.PermitExtractContent">
      <summary>
            Permits content copying or extraction.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Security.PdfSecuritySettings.PermitAnnotations">
      <summary>
            Permits commenting the document.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Security.PdfSecuritySettings.PermitFormsFill">
      <summary>
            Permits filling of form fields.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Security.PdfSecuritySettings.PermitAccessibilityExtractContent">
      <summary>
            Permits content extraction for accessibility.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Security.PdfSecuritySettings.PermitAssembleDocument">
      <summary>
            Permits to insert, rotate, or delete pages and create bookmarks or thumbnail images even if
            PermitModifyDocument is not set.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Security.PdfSecuritySettings.PermitFullQualityPrint">
      <summary>
            Permits to print in high quality.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.Security.PdfStandardSecurityHandler">
      <summary>
            Represents the standard PDF security handler.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.Security.PdfStandardSecurityHandler.EncryptionAlgorithm">
      <summary>
            Encryption alghoritam used. Default is None.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Security.PdfStandardSecurityHandler.UserPassword">
      <summary>
            Sets the user password of the document. Setting a password automatically sets the
            encryption algorithm to AES_128 if its current value is None.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Security.PdfStandardSecurityHandler.OwnerPassword">
      <summary>
            Sets the owner password of the document. Setting a password automatically sets the
            encryption algorithm to AES_128 if its current None.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Security.PdfStandardSecurityHandler.PrepareEncryption">
      <summary>
            Prepares the security handler for encrypting the document.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Security.PdfStandardSecurityHandler.ValidatePassword(System.String)">
      <summary>
            Checks the password.
            </summary>
      <param name="inputPassword">Password or null if no password is provided.</param>
    </member>
    <member name="T:PdfEdit.Pdf.Security.EncryptionAlgorithmInfo">
      <summary>
            Encryption alghoritam settings.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Security.EncryptionAlgorithmInfo.Type">
      <summary>
            Encryption alghoritm used. Default is None.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Security.EncryptionAlgorithmInfo.KeyLength">
      <summary>
            It returns 40 for RC4_40 , 128 for RC4_128 and AES128, 256 for AES256_Weak and AES256.
            It can be only set for RC4_Custom type of encryption. In that case, its default value is 128. Key must be between 40 and 128 and divisble by 8.        
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Security.EncryptionAlgorithmInfo.EncryptMetaData">
      <summary>
            Encrypt meta data? For RC4_40 and RC4_Custom always returns true. Default value for RC4_128, AES128, AES_256_Weak, AES_256 is false.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Security.EncryptionAlgorithmInfo.EncryptEmbeddedFilesOnly">
      <summary>
            Always returns false. It isn't yet possible to change its value to true. 
            It will be implmented in the future version of the PdfEdit.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.Signatures.ISignatureAppearanceHandler.DrawAppearance(PdfEdit.Drawing.XGraphics,PdfEdit.Drawing.XRect)">
      <summary>
            Drawing logic for the appearance of the signature
            </summary>
      <param name="gfx">XGraphics object used to draw the signature</param>
      <param name="rect">Rectangle within which the signature is drawn</param>
    </member>
    <member name="T:PdfEdit.Pdf.Signatures.PdfSignatureOptions">
      <summary>
            PdfSignatureOptions
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Signatures.PdfSignatureOptions.AppearanceHandler">
      <summary>
            Apperance handler of the signature
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Signatures.PdfSignatureOptions.Name">
      <summary>
            Name of person or authority signing the document
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Signatures.PdfSignatureOptions.ContactInfo">
      <summary>
            Contact info of the signature
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Signatures.PdfSignatureOptions.Location">
      <summary>
            Location where it was signed
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Signatures.PdfSignatureOptions.Reason">
      <summary>
            Reason for signing
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Signatures.PdfSignatureOptions.Rectangle">
      <summary>
            Rectangle area of displayed signature
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Signatures.PdfSignatureOptions.PageNumber">
      <summary>
            Page number on which signature will be displayed
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.Signatures.PdfSignatureOptions.IsVisible">
      <summary>
            Should the signature be visible or not <para />
            Note: When set to <c>false</c> the value of <see cref="P:PdfEdit.Pdf.Signatures.PdfSignatureOptions.PageNumber" /> is ignored and treated as 1.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfColorMode">
      <summary>
            Specifies what color model is used in a PDF document.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfColorMode.Undefined">
      <summary>
            All color values are written as specified in the XColor objects they come from.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfColorMode.Rgb">
      <summary>
            All colors are converted to RGB.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfColorMode.Cmyk">
      <summary>
            All colors are converted to CMYK.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfCustomValueCompressionMode">
      <summary>
            This class is undocumented and may change or drop in future releases.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfCustomValueCompressionMode.Default">
      <summary>
            Use document default to determine compression.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfCustomValueCompressionMode.Uncompressed">
      <summary>
            Leave custom values uncompressed.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfCustomValueCompressionMode.Compressed">
      <summary>
            Compress custom values using FlateDecode.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfFlateEncodeMode">
      <summary>
            Sets the mode for the Deflater (FlateEncoder).
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfFlateEncodeMode.Default">
      <summary>
            The default mode.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfFlateEncodeMode.BestSpeed">
      <summary>
            Fast encoding, but larger PDF files.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfFlateEncodeMode.BestCompression">
      <summary>
            Best compression, but takes more time.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfFontEmbedding">
      <summary>
            Specifies the embedding options of an XFont when converted into PDF.
            Font embedding is not optional anymore. So Always is the only option.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfFontEmbedding.Always">
      <summary>
            All fonts are embedded.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfFontEmbedding.None">
      <summary>
            Fonts are not embedded. This is not an option anymore.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfFontEmbedding.Default">
      <summary>
            Unicode fonts are embedded, WinAnsi fonts are not embedded.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfFontEmbedding.Automatic">
      <summary>
            Not yet implemented.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfFontEncoding">
      <summary>
            Specifies the encoding schema used for an XFont when converted into PDF.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfFontEncoding.WinAnsi">
      <summary>
            Cause a font to use Windows-1252 encoding to encode text rendered with this font.
            Same as Windows1252 encoding.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfFontEncoding.Unicode">
      <summary>
            Cause a font to use Unicode encoding to encode text rendered with this font.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfOutlineStyle">
      <summary>
            Specifies the font style for the outline (bookmark) text.
             </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfOutlineStyle.Regular">
      <summary>
            Outline text is displayed using a regular font.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfOutlineStyle.Italic">
      <summary>
            Outline text is displayed using an italic font.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfOutlineStyle.Bold">
      <summary>
            Outline text is displayed using a bold font.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfOutlineStyle.BoldItalic">
      <summary>
            Outline text is displayed using a bold and italic font.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfPageDestinationType">
      <summary>
            Specifies the type of a page destination in outline items, annotations, or actions..
             </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageDestinationType.Xyz">
      <summary>
            Display the page with the coordinates (left, top) positioned at  the upper-left corner of
            the window and the contents of the page magnified by the factor zoom.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageDestinationType.Fit">
      <summary>
            Display the page with its contents magnified just enough to fit the 
            entire page within the window both horizontally and vertically.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageDestinationType.FitH">
      <summary>
            Display the page with the vertical coordinate top positioned at the top edge of 
            the window and the contents of the page magnified just enough to fit the entire
            width of the page within the window.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageDestinationType.FitV">
      <summary>
            Display the page with the horizontal coordinate left positioned at the left edge of 
            the window and the contents of the page magnified just enough to fit the entire
            height of the page within the window.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageDestinationType.FitR">
      <summary>
            Display the page designated by page, with its contents magnified just enough to
            fit the rectangle specified by the coordinates left, bottom, right, and topentirely
            within the window both horizontally and vertically. If the required horizontal and
            vertical magnification factors are different, use the smaller of the two, centering
            the rectangle within the window in the other dimension. A null value for any of
            the parameters may result in unpredictable behavior.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageDestinationType.FitB">
      <summary>
            Display the page with its contents magnified just enough to fit the rectangle specified
            by the coordinates left, bottom, right, and topentirely within the window both 
            horizontally and vertically.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageDestinationType.FitBH">
      <summary>
            Display the page with the vertical coordinate top positioned at the top edge of
            the window and the contents of the page magnified just enough to fit the entire
            width of its bounding box within the window.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageDestinationType.FitBV">
      <summary>
            Display the page with the horizontal coordinate left positioned at the left edge of
            the window and the contents of the page magnified just enough to fit the entire
            height of its bounding box within the window.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfPageLayout">
      <summary>
            Specifies the page layout to be used by a viewer when the document is opened.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageLayout.SinglePage">
      <summary>
            Display one page at a time.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageLayout.OneColumn">
      <summary>
            Display the pages in one column.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageLayout.TwoColumnLeft">
      <summary>
            Display the pages in two columns, with oddnumbered pages on the left.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageLayout.TwoColumnRight">
      <summary>
            Display the pages in two columns, with oddnumbered pages on the right.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageLayout.TwoPageLeft">
      <summary>
            (PDF 1.5) Display the pages two at a time, with odd-numbered pages on the left.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageLayout.TwoPageRight">
      <summary>
            (PDF 1.5) Display the pages two at a time, with odd-numbered pages on the right.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfPageMode">
      <summary>
            Specifies how the document should be displayed by a viewer when opened.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageMode.UseNone">
      <summary>
            Neither document outline nor thumbnail images visible.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageMode.UseOutlines">
      <summary>
            Document outline visible.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageMode.UseThumbs">
      <summary>
            Thumbnail images visible.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageMode.FullScreen">
      <summary>
            Full-screen mode, with no menu bar, windowcontrols, or any other window visible.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageMode.UseOC">
      <summary>
            (PDF 1.5) Optional content group panel visible.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfPageMode.UseAttachments">
      <summary>
            (PDF 1.6) Attachments panel visible.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfReadingDirection">
      <summary>
            Specifies how the document should be displayed by a viewer when opened.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfReadingDirection.LeftToRight">
      <summary>
            Left to right.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfReadingDirection.RightToLeft">
      <summary>
            Right to left (including vertical writing systems, such as Chinese, Japanese, and Korean)
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfTextStringEncoding">
      <summary>
            Specifies how text strings are encoded. A text string is any text used outside of a page content 
            stream, e.g. document information, outline text, annotation text etc.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfTextStringEncoding.PDFDocEncoding">
      <summary>
            Specifies that hypertext uses PDF DocEncoding.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfTextStringEncoding.Unicode">
      <summary>
            Specifies that hypertext uses unicode encoding.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.KeysBase">
      <summary>
            Base class for all dictionary Keys classes.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfArray">
      <summary>
            Represents a PDF array object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfArray" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfArray" /> class.
            </summary>
      <param name="document">The document.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.#ctor(PdfEdit.Pdf.PdfDocument,PdfEdit.Pdf.PdfItem[])">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfArray" /> class.
            </summary>
      <param name="document">The document.</param>
      <param name="items">The items.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.#ctor(PdfEdit.Pdf.PdfArray)">
      <summary>
            Initializes a new instance from an existing dictionary. Used for object type transformation.
            </summary>
      <param name="array">The array.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.Clone">
      <summary>
            Creates a copy of this array. Direct elements are deep copied.
            Indirect references are not modified.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.Copy">
      <summary>
            Implements the copy mechanism.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfArray.Elements">
      <summary>
            Gets the collection containing the elements of this object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ToString">
      <summary>
            Returns a string with the content of this object in a readable form. Useful for debugging purposes only.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfArray.ArrayElements">
      <summary>
            Represents the elements of an PdfArray.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.Clone">
      <summary>
            Creates a shallow copy of this object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.GetBoolean(System.Int32)">
      <summary>
            Converts the specified value to boolean.
            If the value does not exist, the function returns false.
            If the value is not convertible, the function throws an InvalidCastException.
            If the index is out of range, the function throws an ArgumentOutOfRangeException.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.GetInteger(System.Int32)">
      <summary>
            Converts the specified value to integer.
            If the value does not exist, the function returns 0.
            If the value is not convertible, the function throws an InvalidCastException.
            If the index is out of range, the function throws an ArgumentOutOfRangeException.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.GetReal(System.Int32)">
      <summary>
            Converts the specified value to double.
            If the value does not exist, the function returns 0.
            If the value is not convertible, the function throws an InvalidCastException.
            If the index is out of range, the function throws an ArgumentOutOfRangeException.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.GetString(System.Int32)">
      <summary>
            Converts the specified value to string.
            If the value does not exist, the function returns the empty string.
            If the value is not convertible, the function throws an InvalidCastException.
            If the index is out of range, the function throws an ArgumentOutOfRangeException.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.GetName(System.Int32)">
      <summary>
            Converts the specified value to a name.
            If the value does not exist, the function returns the empty string.
            If the value is not convertible, the function throws an InvalidCastException.
            If the index is out of range, the function throws an ArgumentOutOfRangeException.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.GetIndirectObject(System.Int32)">
      <summary>
            Returns the indirect object if the value at the specified index is a PdfReference.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.GetObject(System.Int32)">
      <summary>
            Gets the PdfObject with the specified index, or null, if no such object exists. If the index refers to
            a reference, the referenced PdfObject is returned.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.GetDictionary(System.Int32)">
      <summary>
            Gets the PdfArray with the specified index, or null, if no such object exists. If the index refers to
            a reference, the referenced PdfArray is returned.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.GetArray(System.Int32)">
      <summary>
            Gets the PdfArray with the specified index, or null, if no such object exists. If the index refers to
            a reference, the referenced PdfArray is returned.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.GetReference(System.Int32)">
      <summary>
            Gets the PdfReference with the specified index, or null, if no such object exists.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfArray.ArrayElements.Items">
      <summary>
            Gets all items of this array.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfArray.ArrayElements.IsReadOnly">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfArray.ArrayElements.Item(System.Int32)">
      <summary>
            Gets or sets an item at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.Remove(PdfEdit.Pdf.PdfItem)">
      <summary>
            Removes the first occurrence of a specific object from the array/&gt;.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.Insert(System.Int32,PdfEdit.Pdf.PdfItem)">
      <summary>
            Inserts the item the specified index.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.Contains(PdfEdit.Pdf.PdfItem)">
      <summary>
            Determines whether the specified value is in the array.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.Clear">
      <summary>
            Removes all items from the array.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.IndexOf(PdfEdit.Pdf.PdfItem)">
      <summary>
            Gets the index of the specified item.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.Add(PdfEdit.Pdf.PdfItem)">
      <summary>
            Appends the specified object to the array.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfArray.ArrayElements.IsFixedSize">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfArray.ArrayElements.IsSynchronized">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfArray.ArrayElements.Count">
      <summary>
            Gets the number of elements in the array.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.CopyTo(PdfEdit.Pdf.PdfItem[],System.Int32)">
      <summary>
            Copies the elements of the array to the specified array.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfArray.ArrayElements.SyncRoot">
      <summary>
            The current implementation return null.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfArray.ArrayElements.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the array.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfBoolean">
      <summary>
            Represents a direct boolean value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfBoolean.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfBoolean" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfBoolean.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfBoolean" /> class.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfBoolean.Value">
      <summary>
            Gets the value of this instance as boolean value.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfBoolean.True">
      <summary>
            A pre-defined value that represents <c>true</c>.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfBoolean.False">
      <summary>
            A pre-defined value that represents <c>false</c>.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfBoolean.ToString">
      <summary>
            Returns 'false' or 'true'.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfBooleanObject">
      <summary>
            Represents an indirect boolean value. This type is not used by PDFEdit. If it is imported from
            an external PDF file, the value is converted into a direct object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfBooleanObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfBooleanObject" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfBooleanObject.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfBooleanObject" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfBooleanObject.#ctor(PdfEdit.Pdf.PdfDocument,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfBooleanObject" /> class.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfBooleanObject.Value">
      <summary>
            Gets the value of this instance as boolean value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfBooleanObject.ToString">
      <summary>
            Returns "false" or "true".
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfCustomValue">
      <summary>
            This class is intended for empira internal use only and may change or drop in future releases.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfCustomValue.#ctor">
      <summary>
            This function is intended for empira internal use only.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfCustomValue.#ctor(System.Byte[])">
      <summary>
            This function is intended for empira internal use only.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfCustomValue.CompressionMode">
      <summary>
            This property is intended for empira internal use only.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfCustomValue.Value">
      <summary>
            This property is intended for empira internal use only.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfCustomValues">
      <summary>
            This class is intended for empira internal use only and may change or drop in future releases.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfCustomValues.CompressionMode">
      <summary>
            This function is intended for empira internal use only.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfCustomValues.Contains(System.String)">
      <summary>
            This function is intended for empira internal use only.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfCustomValues.Item(System.String)">
      <summary>
            This function is intended for empira internal use only.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfCustomValues.ClearAllCustomValues(PdfEdit.Pdf.PdfDocument)">
      <summary>
            This function is intended for empira internal use only.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfDate">
      <summary>
            Represents a direct date value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDate.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfDate" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDate.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfDate" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDate.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfDate" /> class.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDate.Value">
      <summary>
            Gets the value as DateTime.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDate.ToString">
      <summary>
            Returns the value in the PDF date format.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.VCF">
      <summary>
            Value creation flags. Specifies whether and how a value that does not exist is created.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.VCF.None">
      <summary>
            Don't create the value.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.VCF.Create">
      <summary>
            Create the value as direct object.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.VCF.CreateIndirect">
      <summary>
            Create the value as indirect object.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfDictionary">
      <summary>
            Represents a PDF dictionary object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfDictionary" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfDictionary" /> class.
            </summary>
      <param name="document">The document.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.#ctor(PdfEdit.Pdf.PdfDictionary)">
      <summary>
            Initializes a new instance from an existing dictionary. Used for object type transformation.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.Clone">
      <summary>
            Creates a copy of this dictionary. Direct values are deep copied. Indirect references are not
            modified.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.Copy">
      <summary>
            This function is useful for importing objects from external documents. The returned object is not
            yet complete. irefs refer to external objects and directed objects are cloned but their document
            property is null. A cloned dictionary or array needs a 'fix-up' to be a valid object.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDictionary.Elements">
      <summary>
            Gets the dictionary containing the elements of this dictionary.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfDictionary.ForceFilters">
      <summary>
            List of filters which will be applied on the PdfDictionary stream.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the dictionary elements.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.ToString">
      <summary>
            Returns a string with the content of this object in a readable form. Useful for debugging purposes only.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDictionary.Stream">
      <summary>
            Gets or sets the PDF stream belonging to this dictionary. Returns null if the dictionary has
            no stream. To create the stream, call the CreateStream function.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.CreateStream(System.Byte[])">
      <summary>
            Creates the stream of this dictionary and initializes it with the specified byte array.
            The function must not be called if the dictionary already has a stream.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfDictionary.DictionaryElements">
      <summary>
            Represents the interface to the elements of a PDF dictionary.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.Clone">
      <summary>
            Creates a shallow copy of this object. The clone is not owned by a dictionary anymore.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetBoolean(System.String,System.Boolean)">
      <summary>
            Converts the specified value to boolean.
            If the value does not exist, the function returns false.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetBoolean(System.String)">
      <summary>
            Converts the specified value to boolean.
            If the value does not exist, the function returns false.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.SetBoolean(System.String,System.Boolean)">
      <summary>
            Sets the entry to a direct boolean value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetInteger(System.String,System.Boolean)">
      <summary>
            Converts the specified value to integer.
            If the value does not exist, the function returns 0.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetInteger(System.String)">
      <summary>
            Converts the specified value to integer.
            If the value does not exist, the function returns 0.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.SetInteger(System.String,System.Int32)">
      <summary>
            Sets the entry to a direct integer value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetReal(System.String,System.Boolean)">
      <summary>
            Converts the specified value to double.
            If the value does not exist, the function returns 0.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetReal(System.String)">
      <summary>
            Converts the specified value to double.
            If the value does not exist, the function returns 0.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.SetReal(System.String,System.Double)">
      <summary>
            Sets the entry to a direct double value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetString(System.String,System.Boolean)">
      <summary>
            Converts the specified value to String.
            If the value does not exist, the function returns the empty string.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetString(System.String)">
      <summary>
            Converts the specified value to String.
            If the value does not exist, the function returns the empty string.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetEncryptedValue(System.String)">
      <summary>
            Converts the specified value to String.
            If the value does not exist, the function returns the empty string.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.TryGetString(System.String,System.String@)">
      <summary>
            Tries to get the string. TODO: more TryGet...
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.SetString(System.String,System.String)">
      <summary>
            Sets the entry to a direct string value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.SetString(System.String,System.String,System.Boolean)">
      <summary>
            Sets the entry to a direct string value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetName(System.String)">
      <summary>
            Converts the specified value to a name.
            If the value does not exist, the function returns the empty string.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.SetName(System.String,System.String)">
      <summary>
            Sets the specified name value.
            If the value doesn't start with a slash, it is added automatically.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetRectangle(System.String,System.Boolean)">
      <summary>
            Converts the specified value to PdfRectangle.
            If the value does not exist, the function returns an empty rectangle.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetRectangle(System.String)">
      <summary>
            Converts the specified value to PdfRectangle.
            If the value does not exist, the function returns an empty rectangle.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.SetRectangle(System.String,PdfEdit.Pdf.PdfRectangle)">
      <summary>
            Sets the entry to a direct rectangle value, represented by an array with four values.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetMatrix(System.String,System.Boolean)">
            Converts the specified value to XMatrix.
            If the value does not exist, the function returns an identity matrix.
            If the value is not convertible, the function throws an InvalidCastException.
        </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetMatrix(System.String)">
            Converts the specified value to XMatrix.
            If the value does not exist, the function returns an identity matrix.
            If the value is not convertible, the function throws an InvalidCastException.
        </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.SetMatrix(System.String,PdfEdit.Drawing.XMatrix)">
      <summary>
            Sets the entry to a direct matrix value, represented by an array with six values.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetDateTime(System.String,System.DateTime)">
      <summary>
            Converts the specified value to DateTime.
            If the value does not exist, the function returns the specified default value.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.SetDateTime(System.String,System.DateTime)">
      <summary>
            Sets the entry to a direct datetime value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetValue(System.String,PdfEdit.Pdf.VCF)">
      <summary>
            Gets the value for the specified key. If the value does not exist, it is optionally created.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetValue(System.String)">
      <summary>
            Short cut for GetValue(key, VCF.None).
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.SetValue(System.String,PdfEdit.Pdf.PdfItem)">
      <summary>
            Sets the entry with the specified value. DON'T USE THIS FUNCTION - IT MAY BE REMOVED.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetObject(System.String)">
      <summary>
            Gets the PdfObject with the specified key, or null, if no such object exists. If the key refers to
            a reference, the referenced PdfObject is returned.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetDictionary(System.String)">
      <summary>
            Gets the PdfDictionary with the specified key, or null, if no such object exists. If the key refers to
            a reference, the referenced PdfDictionary is returned.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetArray(System.String)">
      <summary>
            Gets the PdfArray with the specified key, or null, if no such object exists. If the key refers to
            a reference, the referenced PdfArray is returned.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetReference(System.String)">
      <summary>
            Gets the PdfReference with the specified key, or null, if no such object exists.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.SetObject(System.String,PdfEdit.Pdf.PdfObject)">
      <summary>
            Sets the entry to the specified object. The object must not be an indirect object,
            otherwise an exception is raised.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.SetReference(System.String,PdfEdit.Pdf.PdfObject)">
      <summary>
            Sets the entry as a reference to the specified object. The object must be an indirect object,
            otherwise an exception is raised.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.SetReference(System.String,PdfEdit.Pdf.Advanced.PdfReference)">
      <summary>
            Sets the entry as a reference to the specified iref.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDictionary.DictionaryElements.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object is read-only.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.GetEnumerator">
      <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDictionary.DictionaryElements.Item(System.String)">
      <summary>
            Gets or sets an entry in the dictionary. The specified key must be a valid PDF name
            starting with a slash '/'. This property provides full access to the elements of the
            PDF dictionary. Wrong use can lead to errors or corrupt PDF files.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDictionary.DictionaryElements.Item(PdfEdit.Pdf.PdfName)">
      <summary>
            Gets or sets an entry in the dictionary identified by a PdfName object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.Remove(System.String)">
      <summary>
            Removes the value with the specified key.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.Remove(System.Collections.Generic.KeyValuePair{System.String,PdfEdit.Pdf.PdfItem})">
      <summary>
            Removes the value with the specified key.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.ContainsKey(System.String)">
      <summary>
            Determines whether the dictionary contains the specified name.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.Contains(System.Collections.Generic.KeyValuePair{System.String,PdfEdit.Pdf.PdfItem})">
      <summary>
            Determines whether the dictionary contains a specific value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.Clear">
      <summary>
            Removes all elements from the dictionary.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.Add(System.String,PdfEdit.Pdf.PdfItem)">
      <summary>
            Adds the specified value to the dictionary.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.Add(System.Collections.Generic.KeyValuePair{System.String,PdfEdit.Pdf.PdfItem})">
      <summary>
            Adds an item to the dictionary.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDictionary.DictionaryElements.KeyNames">
      <summary>
            Gets all keys currently in use in this dictionary as an array of PdfName objects.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDictionary.DictionaryElements.Keys">
      <summary>
            Get all keys currently in use in this dictionary as an array of string objects.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.TryGetValue(System.String,PdfEdit.Pdf.PdfItem@)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDictionary.DictionaryElements.Values">
      <summary>
            Gets all values currently in use in this dictionary as an array of PdfItem objects.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDictionary.DictionaryElements.IsFixedSize">
      <summary>
            Return false.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDictionary.DictionaryElements.IsSynchronized">
      <summary>
            Return false.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDictionary.DictionaryElements.Count">
      <summary>
            Gets the number of elements contained in the dictionary.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.DictionaryElements.CopyTo(System.Collections.Generic.KeyValuePair{System.String,PdfEdit.Pdf.PdfItem}[],System.Int32)">
      <summary>
            Copies the elements of the dictionary to an array, starting at a particular index.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDictionary.DictionaryElements.SyncRoot">
      <summary>
            The current implementation returns null.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfDictionary.PdfStream">
      <summary>
            The PDF stream objects.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.PdfStream.Clone">
      <summary>
            Clones this stream by creating a deep copy.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDictionary.PdfStream.Length">
      <summary>
            Gets the length of the stream, i.e. the actual number of bytes in the stream.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDictionary.PdfStream.Value">
      <summary>
            Get or sets the bytes of the stream as they are, i.e. if one or more filters exist the bytes are
            not unfiltered.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.PdfStream.Unfilter">
      <summary>
            Tries to unfilter the bytes of the stream. If the stream is filtered and it isn't image type PDFEdit,
            the stream content is replaced by its unfiltered value.
            Otherwise the content remains untouched and the function returns false.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDictionary.PdfStream.ToString">
      <summary>
            Returns the stream content as a raw string.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfDictionary.PdfStream.Keys">
      <summary>
            Common keys for all streams.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfDictionary.PdfStream.Keys.Length">
      <summary>
            (Required) The number of bytes from the beginning of the line following the keyword
            stream to the last byte just before the keyword endstream. (There may be an additional
            EOL marker, preceding endstream, that is not included in the count and is not logically
            part of the stream data.)
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfDictionary.PdfStream.Keys.Filter">
      <summary>
            (Optional) The name of a filter to be applied in processing the stream data found between
            the keywords stream and endstream, or an array of such names. Multiple filters should be
            specified in the order in which they are to be applied.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfDictionary.PdfStream.Keys.DecodeParms">
      <summary>
            (Optional) A parameter dictionary or an array of such dictionaries, used by the filters
            specified by Filter. If there is only one filter and that filter has parameters, DecodeParms
            must be set to the filter’s parameter dictionary unless all the filter’s parameters have
            their default values, in which case the DecodeParms entry may be omitted. If there are
            multiple filters and any of the filters has parameters set to nondefault values, DecodeParms
            must be an array with one entry for each filter: either the parameter dictionary for that
            filter, or the null object if that filter has no parameters (or if all of its parameters have
            their default values). If none of the filters have parameters, or if all their parameters
            have default values, the DecodeParms entry may be omitted.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfDictionary.PdfStream.Keys.F">
      <summary>
            (Optional; PDF 1.2) The file containing the stream data. If this entry is present, the bytes
            between stream and endstream are ignored, the filters are specified by FFilter rather than
            Filter, and the filter parameters are specified by FDecodeParms rather than DecodeParms.
            However, the Length entry should still specify the number of those bytes. (Usually, there are
            no bytes and Length is 0.)
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfDictionary.PdfStream.Keys.FFilter">
      <summary>
            (Optional; PDF 1.2) The name of a filter to be applied in processing the data found in the
            stream’s external file, or an array of such names. The same rules apply as for Filter.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfDictionary.PdfStream.Keys.FDecodeParms">
      <summary>
            (Optional; PDF 1.2) A parameter dictionary, or an array of such dictionaries, used by the
            filters specified by FFilter. The same rules apply as for DecodeParms.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfDictionary.PdfStream.Keys.DL">
      <summary>
            Optional; PDF 1.5) A non-negative integer representing the number of bytes in the decoded
            (defiltered) stream. It can be used to determine, for example, whether enough disk space is
            available to write a stream to a file.
            This value should be considered a hint only; for some stream filters, it may not be possible
            to determine this value precisely.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfDocument">
      <summary>
            Represents a PDF document.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDocument.#ctor">
      <summary>
            Creates a new PDF document in memory.
            To open an existing PDF file, use the PdfReader class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDocument.#ctor(System.String)">
      <summary>
            Creates a new PDF document with the specified file name. The file is immediately created and keeps
            locked until the document is closed, at that time the document is saved automatically.
            Do not call Save() for documents created with this constructor, just call Close().
            To open an existing PDF file and import it, use the PdfReader class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDocument.#ctor(System.IO.Stream)">
      <summary>
            Creates a new PDF document using the specified stream.
            The stream won't be used until the document is closed, at that time the document is saved automatically.
            Do not call Save() for documents created with this constructor, just call Close().
            To open an existing PDF file, use the PdfReader class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDocument.Dispose">
      <summary>
            Disposes all references to this document stored in other documents. This function should be called
            for documents you finished importing pages from. Calling Dispose is technically not necessary but
            useful for earlier reclaiming memory of documents you do not need anymore.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.IsSigned">
      <summary>
            Checks if document has at least one signed certificate.
            It doesn't check validity of the signed certificate.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDocument.SignWithCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2,PdfEdit.Pdf.Signatures.PdfSignatureOptions)">
      <summary>
            Digitally sign document with the certificate
            </summary>
      <param name="certificate">Sign certificate</param>
      <param name="options">Signing options</param>
      <exception cref="T:System.Exception">Thrown if any parameter is null or if the document is already signed</exception>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.Tag">
      <summary>
            Gets or sets a user defined object that contains arbitrary information associated with this document.
            The tag is not used by PDFEdit.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDocument.Close">
      <summary>
            Closes this instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDocument.Save(System.String)">
      <summary>
            Saves the document to the specified path. If a file already exists, it will be overwritten.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDocument.Save(System.IO.Stream,System.Boolean)">
      <summary>
            Saves the document to the specified stream.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDocument.Save(System.IO.Stream)">
      <summary>
            Saves the document to the specified stream.
            The stream is not closed by this function.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDocument.CanSave(System.String@)">
      <summary>
            Determines whether the document can be saved.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDocument.FinishPageImport">
      <summary>
            Must be called after adding pages to a document to fix up page-references in imported Acro-Fields.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.Options">
      <summary>
            Gets the document options used for saving the document.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.Settings">
      <summary>
            Gets PDF specific document settings.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.Version">
      <summary>
            Gets or sets the PDF version number. Return value 14 e.g. means PDF 1.4 / Acrobat 5 etc.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.PageCount">
      <summary>
            Gets the number of pages in the document.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.FileSize">
      <summary>
            Gets the file size of the document.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.FullPath">
      <summary>
            Gets the full qualified file name if the document was read form a file, or an empty string otherwise.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.Guid">
      <summary>
            Gets a Guid that uniquely identifies this instance of PdfDocument.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.IsImported">
      <summary>
            Returns a value indicating whether the document was newly created or opened from an existing document.
            Returns true if the document was opened with the PdfReader.Open function, false otherwise.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.IsReadOnly">
      <summary>
            Returns a value indicating whether the document is read only or can be modified.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.Info">
      <summary>
            Gets information about the document.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.CustomValues">
      <summary>
            This function is intended to be undocumented.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.Pages">
      <summary>
            Get the pages dictionary.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.PageLayout">
      <summary>
            Gets or sets a value specifying the page layout to be used when the document is opened.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.PageMode">
      <summary>
            Gets or sets a value specifying how the document should be displayed when opened.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.ViewerPreferences">
      <summary>
            Gets the viewer preferences of this document.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.Outlines">
      <summary>
            Gets the root of the outline (or bookmark) tree.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.AcroForm">
      <summary>
            Get the AcroForm dictionary.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.Language">
      <summary>
            Gets or sets the default language of the document.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.SecuritySettings">
      <summary>
            Gets the security settings of this document.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.Internals">
      <summary>
            Gets the PdfInternals object of this document, that grants access to some internal structures
            which are not part of the public interface of PdfDocument.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDocument.AddPage">
      <summary>
            Creates a new page and adds it to this document.
            Depending of the IsMetric property of the current region the page size is set to
            A4 or Letter respectively. If this size is not appropriate it should be changed before
            any drawing operations are performed on the page.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDocument.AddPage(PdfEdit.Pdf.PdfPage)">
      <summary>
            Adds the specified page to this document. If the page is from an external document,
            it is imported to this document. In this case the returned page is not the same
            object as the specified one.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDocument.InsertPage(System.Int32)">
      <summary>
            Creates a new page and inserts it in this document at the specified position.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDocument.InsertPage(System.Int32,PdfEdit.Pdf.PdfPage)">
      <summary>
            Inserts the specified page in this document. If the page is from an external document,
            it is imported to this document. In this case the returned page is not the same
            object as the specified one.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocument.SecurityHandler">
      <summary>
            Gets the security handler.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDocument.GetAllObjectIDs">
      <summary>
            Gets an array of all object identifiers. For debugging purposes only.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDocument.GetAllReferences">
      <summary>
            Gets an array of all cross references ordered ascendingly by their object identifier.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDocument.SetLicenseInfo(System.String,System.String)">
      <summary>
            Sets the license information.
            </summary>
      <param name="companyName">Name of the company.</param>
      <param name="licenseKey">The license key.</param>
    </member>
    <member name="T:PdfEdit.Pdf.PdfDocumentInformation">
      <summary>
            Represents the PDF document information dictionary.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfDocumentInformation.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfDocumentInformation" /> class.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocumentInformation.Title">
      <summary>
            Gets or sets the document's title.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocumentInformation.Author">
      <summary>
            Gets or sets the name of the person who created the document.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocumentInformation.Subject">
      <summary>
            Gets or sets the name of the subject of the document.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocumentInformation.Keywords">
      <summary>
            Gets or sets keywords associated with the document.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocumentInformation.Creator">
      <summary>
            Gets or sets the name of the application that created the document.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocumentInformation.Producer">
      <summary>
            Gets the producer application (for example, PDFEdit).
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocumentInformation.CreationDate">
      <summary>
            Gets or sets the creation date of the document.
            Breaking Change: If the date is not set in a PDF file DateTime.MinValue is returned.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocumentInformation.ModificationDate">
      <summary>
            Gets or sets the modification date of the document.
            Breaking Change: If the date is not set in a PDF file DateTime.MinValue is returned.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfDocumentOptions">
      <summary>
            Holds information how to handle the document when it is saved as PDF stream.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocumentOptions.ColorMode">
      <summary>
            Gets or sets the color mode. Default is RGB.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocumentOptions.Filters">
      <summary>
            Filters aplied on the document streams. Default used is FlateDecode.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocumentOptions.FlateEncodeMode">
      <summary>
            Gets or sets the flate encode mode. Besides the balanced default mode you can set modes for best compression (slower) or best speed (larger files).
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocumentOptions.EnableCcittCompressionForBilevelImages">
      <summary>
            Gets or sets a value indicating whether to compress bilevel images using CCITT compression.
            With true, PDFEdit will try FlateDecode CCITT and will use the smallest one or a combination of both.
            With false, PDFEdit will always use FlateDecode only - files may be a few bytes larger, but file creation is faster.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfDocumentSettings">
      <summary>
            Holds PDF specific information of the document.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfDocumentSettings.TrimMargins">
      <summary>
            Gets or sets the default trim margins.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfInteger">
      <summary>
            Represents a direct integer value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfInteger.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfInteger" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfInteger.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfInteger" /> class.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="P:PdfEdit.Pdf.PdfInteger.Value">
      <summary>
            Gets the value as integer.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfInteger.ToString">
      <summary>
            Returns the integer as string.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfInteger.GetTypeCode">
      <summary>
            Returns TypeCode for 32-bit integers.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfIntegerObject">
      <summary>
            Represents an indirect integer value. This type is not used by PDFEdit. If it is imported from
            an external PDF file, the value is converted into a direct object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfIntegerObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfIntegerObject" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfIntegerObject.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfIntegerObject" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfIntegerObject.#ctor(PdfEdit.Pdf.PdfDocument,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfIntegerObject" /> class.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfIntegerObject.Value">
      <summary>
            Gets the value as integer.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfIntegerObject.ToString">
      <summary>
            Returns the integer as string.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfItem">
      <summary>
            The base class of all PDF objects and simple PDF types.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfItem.Clone">
      <summary>
            Creates a copy of this object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfItem.Copy">
      <summary>
            Implements the copy mechanism. Must be overridden in derived classes.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfLiteral">
      <summary>
            Represents text that is written 'as it is' into the PDF stream. This class can lead to invalid PDF files.
            E.g. strings in a literal are not encrypted when the document is saved with a password.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfLiteral.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfLiteral" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfLiteral.#ctor(System.String)">
      <summary>
            Initializes a new instance with the specified string.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfLiteral.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance with the culture invariant formatted specified arguments.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfLiteral.FromMatrix(PdfEdit.Drawing.XMatrix)">
      <summary>
            Creates a literal from an XMatrix
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfLiteral.Value">
      <summary>
            Gets the value as litaral string.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfLiteral.ToString">
      <summary>
            Returns a string that represents the current value.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfName">
      <summary>
            Represents a PDF name value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfName.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfName" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfName.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfName" /> class.
            Parameter value always must start with a '/'.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfName.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to this name.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfName.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfName.Value">
      <summary>
            Gets the name as a string.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfName.ToString">
      <summary>
            Returns the name. The string always begins with a slash.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfName.op_Equality(PdfEdit.Pdf.PdfName,System.String)">
      <summary>
            Determines whether the specified name and string are equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfName.op_Inequality(PdfEdit.Pdf.PdfName,System.String)">
      <summary>
            Determines whether the specified name and string are not equal.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfName.Empty">
      <summary>
            Represents the empty name.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfName.Comparer">
      <summary>
            Gets the comparer for this type.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfName.PdfXNameComparer">
      <summary>
            Implements a comparer that compares PdfName objects.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfName.PdfXNameComparer.Compare(PdfEdit.Pdf.PdfName,PdfEdit.Pdf.PdfName)">
      <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
      <param name="l">The first object to compare.</param>
      <param name="r">The second object to compare.</param>
    </member>
    <member name="T:PdfEdit.Pdf.PdfNameObject">
      <summary>
            Represents an indirect name value. This type is not used by PDFEdit. If it is imported from
            an external PDF file, the value is converted into a direct object. Acrobat sometime uses indirect
            names to save space, because an indirect reference to a name may be shorter than a long name.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfNameObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfNameObject" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfNameObject.#ctor(PdfEdit.Pdf.PdfDocument,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfNameObject" /> class.
            </summary>
      <param name="document">The document.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfNameObject.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfNameObject.GetHashCode">
      <summary>
            Serves as a hash function for this type.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfNameObject.Value">
      <summary>
            Gets or sets the name value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfNameObject.ToString">
      <summary>
            Returns the name. The string always begins with a slash.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfNameObject.op_Equality(PdfEdit.Pdf.PdfNameObject,System.String)">
      <summary>
            Determines whether a name is equal to a string.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfNameObject.op_Inequality(PdfEdit.Pdf.PdfNameObject,System.String)">
      <summary>
            Determines whether a name is not equal to a string.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfNull">
      <summary>
            Represents a indirect reference that is not in the cross reference table.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfNull.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="F:PdfEdit.Pdf.PdfNull.Value">
      <summary>
            The only instance of this class.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfNullObject">
      <summary>
            Represents an indirect null value. This type is not used by PDFEdit, but at least
            one tool from Adobe creates PDF files with a null object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfNullObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfNullObject" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfNullObject.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfNullObject" /> class.
            </summary>
      <param name="document">The document.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfNullObject.ToString">
      <summary>
            Returns the string "null".
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfNumber">
      <summary>
            Base class for direct number values (not yet used, maybe superfluous).
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfNumberObject">
      <summary>
            Base class for indirect number values (not yet used, maybe superfluous).
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfNumberObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfNumberObject" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfNumberObject.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfNumberObject" /> class.
            </summary>
      <param name="document">The document.</param>
    </member>
    <member name="T:PdfEdit.Pdf.PdfObject">
      <summary>
            Base class of all composite PDF objects.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfObject" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfObject.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfObject" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfObject.#ctor(PdfEdit.Pdf.PdfObject)">
      <summary>
            Initializes a new instance from an existing object. Used for object type transformation.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfObject.Clone">
      <summary>
            Creates a copy of this object. The clone does not belong to a document, i.e. its owner and its iref are null.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfObject.Copy">
      <summary>
            Implements the copy mechanism. Must be overridden in derived classes.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfObject.Owner">
      <summary>
            Gets the PdfDocument this object belongs to.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfObject.IsIndirect">
      <summary>
            Indicates whether the object is an indirect object.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfObject.Internals">
      <summary>
            Gets the PdfInternals object of this document, that grants access to some internal structures
            which are not part of the public interface of PdfDocument.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfObject.Reference">
      <summary>
            Gets the indirect reference of this object. If the value is null, this object is a direct object.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfObjectID">
      <summary>
            Represents a PDF object identifier, a pair of object and generation number.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfObjectID.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfObjectID" /> class.
            </summary>
      <param name="objectNumber">The object number.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfObjectID.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfObjectID" /> class.
            </summary>
      <param name="objectNumber">The object number.</param>
      <param name="generationNumber">The generation number.</param>
    </member>
    <member name="P:PdfEdit.Pdf.PdfObjectID.ObjectNumber">
      <summary>
            Gets or sets the object number.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfObjectID.GenerationNumber">
      <summary>
            Gets or sets the generation number.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfObjectID.IsEmpty">
      <summary>
            Indicates whether this object is an empty object identifier.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfObjectID.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfObjectID.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfObjectID.op_Equality(PdfEdit.Pdf.PdfObjectID,PdfEdit.Pdf.PdfObjectID)">
      <summary>
            Determines whether the two objects are equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfObjectID.op_Inequality(PdfEdit.Pdf.PdfObjectID,PdfEdit.Pdf.PdfObjectID)">
      <summary>
            Determines whether the tow objects not are equal.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfObjectID.ToString">
      <summary>
            Returns the object and generation numbers as a string.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfObjectID.Empty">
      <summary>
            Creates an empty object identifier.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfObjectID.CompareTo(System.Object)">
      <summary>
            Compares the current object id with another object.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfOutline">
      <summary>
            Represents an outline item in the outlines tree. An 'outline' is also known as a 'bookmark'.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfOutline.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfOutline" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfOutline.#ctor(PdfEdit.Pdf.PdfDictionary)">
      <summary>
            Initializes a new instance from an existing dictionary. Used for object type transformation.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfOutline.#ctor(System.String,PdfEdit.Pdf.PdfPage,System.Boolean,PdfEdit.Pdf.PdfOutlineStyle,PdfEdit.Drawing.XColor)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfOutline" /> class.
            </summary>
      <param name="title">The outline text.</param>
      <param name="destinationPage">The destination page.</param>
      <param name="opened">Specifies whether the node is displayed expanded (opened) or collapsed.</param>
      <param name="style">The font style used to draw the outline text.</param>
      <param name="textColor">The color used to draw the outline text.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfOutline.#ctor(System.String,PdfEdit.Pdf.PdfPage,System.Boolean,PdfEdit.Pdf.PdfOutlineStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfOutline" /> class.
            </summary>
      <param name="title">The outline text.</param>
      <param name="destinationPage">The destination page.</param>
      <param name="opened">Specifies whether the node is displayed expanded (opened) or collapsed.</param>
      <param name="style">The font style used to draw the outline text.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfOutline.#ctor(System.String,PdfEdit.Pdf.PdfPage,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfOutline" /> class.
            </summary>
      <param name="title">The outline text.</param>
      <param name="destinationPage">The destination page.</param>
      <param name="opened">Specifies whether the node is displayed expanded (opened) or collapsed.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfOutline.#ctor(System.String,PdfEdit.Pdf.PdfPage)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfOutline" /> class.
            </summary>
      <param name="title">The outline text.</param>
      <param name="destinationPage">The destination page.</param>
    </member>
    <member name="P:PdfEdit.Pdf.PdfOutline.Parent">
      <summary>
            Gets the parent of this outline item. The root item has no parent and returns null.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfOutline.Title">
      <summary>
            Gets or sets the title.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfOutline.DestinationPage">
      <summary>
            Gets or sets the destination page.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfOutline.Left">
      <summary>
            Gets or sets the left postion of the page positioned at the left side of the window.
            Applies only if PageDestinationType is Xyz, FitV, FitR, or FitBV.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfOutline.Top">
      <summary>
            Gets or sets the top postion of the page positioned at the top side of the window.
            Applies only if PageDestinationType is Xyz, FitH, FitR, ob FitBH.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfOutline.Right">
      <summary>
            Gets or sets the right postion of the page positioned at the right side of the window.
            Applies only if PageDestinationType is FitR.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfOutline.Bottom">
      <summary>
            Gets or sets the bottom postion of the page positioned at the bottom side of the window.
            Applies only if PageDestinationType is FitR.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfOutline.Zoom">
      <summary>
            Gets or sets the zoom faction of the page.
            Applies only if PageDestinationType is Xyz.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfOutline.Opened">
      <summary>
            Gets or sets whether the outline item is opened (or expanded).
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfOutline.Style">
      <summary>
            Gets or sets the style of the outline text.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfOutline.PageDestinationType">
      <summary>
            Gets or sets the type of the page destination.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfOutline.TextColor">
      <summary>
            Gets or sets the color of the text.
            </summary>
      <value>The color of the text.</value>
    </member>
    <member name="P:PdfEdit.Pdf.PdfOutline.HasChildren">
      <summary>
            Gets a value indicating whether this outline object has child items.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfOutline.Outlines">
      <summary>
            Gets the outline collection of this node.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfOutlineCollection">
      <summary>
            Represents a collection of outlines.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfOutlineCollection.Remove(PdfEdit.Pdf.PdfOutline)">
      <summary>
            Removes the first occurrence of a specific item from the collection.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfOutlineCollection.Count">
      <summary>
            Gets the number of entries in this collection.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfOutlineCollection.IsReadOnly">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfOutlineCollection.Add(PdfEdit.Pdf.PdfOutline)">
      <summary>
            Adds the specified outline.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfOutlineCollection.Clear">
      <summary>
            Removes all elements form the collection.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfOutlineCollection.Contains(PdfEdit.Pdf.PdfOutline)">
      <summary>
            Determines whether the specified element is in the collection.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfOutlineCollection.CopyTo(PdfEdit.Pdf.PdfOutline[],System.Int32)">
      <summary>
            Copies the collection to an array, starting at the specified index of the target array.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfOutlineCollection.Add(System.String,PdfEdit.Pdf.PdfPage,System.Boolean,PdfEdit.Pdf.PdfOutlineStyle,PdfEdit.Drawing.XColor)">
      <summary>
            Adds the specified outline entry.
            </summary>
      <param name="title">The outline text.</param>
      <param name="destinationPage">The destination page.</param>
      <param name="opened">Specifies whether the node is displayed expanded (opened) or collapsed.</param>
      <param name="style">The font style used to draw the outline text.</param>
      <param name="textColor">The color used to draw the outline text.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfOutlineCollection.Add(System.String,PdfEdit.Pdf.PdfPage,System.Boolean,PdfEdit.Pdf.PdfOutlineStyle)">
      <summary>
            Adds the specified outline entry.
            </summary>
      <param name="title">The outline text.</param>
      <param name="destinationPage">The destination page.</param>
      <param name="opened">Specifies whether the node is displayed expanded (opened) or collapsed.</param>
      <param name="style">The font style used to draw the outline text.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfOutlineCollection.Add(System.String,PdfEdit.Pdf.PdfPage,System.Boolean)">
      <summary>
            Adds the specified outline entry.
            </summary>
      <param name="title">The outline text.</param>
      <param name="destinationPage">The destination page.</param>
      <param name="opened">Specifies whether the node is displayed expanded (opened) or collapsed.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfOutlineCollection.Add(System.String,PdfEdit.Pdf.PdfPage)">
      <summary>
            Creates a PdfOutline and adds it into the outline collection.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfOutlineCollection.IndexOf(PdfEdit.Pdf.PdfOutline)">
      <summary>
            Gets the index of the specified item.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfOutlineCollection.Insert(System.Int32,PdfEdit.Pdf.PdfOutline)">
      <summary>
            Inserts the item at the specified index.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfOutlineCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the outline item at the specified index.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfOutlineCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:PdfEdit.Pdf.PdfOutline" /> at the specified index.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfOutlineCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the outline collection.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfPage">
      <summary>
            Represents a page in a PDF document.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfPage.#ctor">
      <summary>
            Initializes a new page. The page must be added to a document before it can be used.
            Depending of the IsMetric property of the current region the page size is set to 
            A4 or Letter respectively. If this size is not appropriate it should be changed before
            any drawing operations are performed on the page.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfPage.#ctor(PdfEdit.Pdf.PdfDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfPage" /> class.
            </summary>
      <param name="document">The document.</param>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPage.Tag">
      <summary>
            Gets or sets a user defined object that contains arbitrary information associated with this PDF page.
            The tag is not used by PDFEdit.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfPage.Close">
      <summary>
            Closes the page. A closes page cannot be modified anymore and it is not possible to
            get an XGraphics object for a closed page. Closing a page is not required, but may saves
            resources if the document has many pages. 
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPage.Orientation">
      <summary>
            Gets or sets the orientation of the page. The default value PageOrientation.Portrait.
            If an imported page has a /Rotate value that matches the formula 90 + n * 180 the 
            orientation is set to PageOrientation.Landscape.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPage.Size">
      <summary>
            Gets or sets one of the predefined standard sizes like.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPage.TrimMargins">
      <summary>
            Gets or sets the trim margins.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPage.MediaBox">
      <summary>
            Gets or sets the media box directly. XGrahics is not prepared to work with a media box
            with an origin other than (0,0).
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPage.CropBox">
      <summary>
            Gets or sets the crop box.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPage.BleedBox">
      <summary>
            Gets or sets the bleed box.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPage.ArtBox">
      <summary>
            Gets or sets the art box.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPage.TrimBox">
      <summary>
            Gets or sets the trim box.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPage.Height">
      <summary>
            Gets or sets the height of the page. If orientation is Landscape, this function applies to
            the width.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPage.DisplayedHeight">
      <summary>
            Gets or sets the displayed height of the page. If orientation is Landscape, this function applies to
            the width.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPage.Width">
      <summary>
            Gets the displayed width of the page. If orientation is Landscape, this function applies to
            the height.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPage.DisplayedWidth">
      <summary>
            Gets the displayed width of the page. If orientation is Landscape, this function applies to
            the height.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPage.Rotate">
      <summary>
            Gets or sets the /Rotate entry of the PDF page. The value is the number of degrees by which the page 
            should be rotated clockwise when displayed or printed. The value must be a multiple of 90.
            TODO: Next statement is not correct: 
            PDFEdit does not set this value, but for imported pages this value can be set and must be taken
            into account when adding graphic to such a page.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPage.Contents">
      <summary>
            Gets the array of content streams of the page.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPage.Annotations">
      <summary>
            Gets the annotations array of this page.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfPage.AddDocumentLink(PdfEdit.Pdf.PdfRectangle,System.Int32)">
      <summary>
            Adds an intra document link.
            </summary>
      <param name="rect">The rect.</param>
      <param name="destinationPage">The destination page.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfPage.AddWebLink(PdfEdit.Pdf.PdfRectangle,System.String)">
      <summary>
            Adds a link to the Web.
            </summary>
      <param name="rect">The rect.</param>
      <param name="url">The URL.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfPage.AddFileLink(PdfEdit.Pdf.PdfRectangle,System.String)">
      <summary>
            Adds a link to a file.
            </summary>
      <param name="rect">The rect.</param>
      <param name="fileName">Name of the file.</param>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPage.CustomValues">
      <summary>
            Gets or sets the custom values.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPage.Resources">
      <summary>
            Gets the PdfResources object of this page.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfPages">
      <summary>
            Represents the pages of the document.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPages.Count">
      <summary>
            Gets the number of pages.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPages.Item(System.Int32)">
      <summary>
            Gets the page with the specified index.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfPages.Add">
      <summary>
            Creates a new PdfPage, adds it to the end of this document, and returns it.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfPages.Add(PdfEdit.Pdf.PdfPage)">
      <summary>
            Adds the specified PdfPage to the end of this document and maybe returns a new PdfPage object.
            The value returned is a new object if the added page comes from a foreign document.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfPages.Insert(System.Int32)">
      <summary>
            Creates a new PdfPage, inserts it at the specified position into this document, and returns it.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfPages.Insert(System.Int32,PdfEdit.Pdf.PdfPage)">
      <summary>
            Inserts the specified PdfPage at the specified position to this document and maybe returns a new PdfPage object.
            The value returned is a new object if the inserted page comes from a foreign document.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfPages.InsertRange(System.Int32,PdfEdit.Pdf.PdfDocument,System.Int32,System.Int32)">
      <summary>
            Inserts  pages of the specified document into this document.
            </summary>
      <param name="index">The index in this document where to insert the page .</param>
      <param name="document">The document to be inserted.</param>
      <param name="startIndex">The index of the first page to be inserted.</param>
      <param name="pageCount">The number of pages to be inserted.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfPages.InsertRange(System.Int32,PdfEdit.Pdf.PdfDocument)">
      <summary>
            Inserts all pages of the specified document into this document.
            </summary>
      <param name="index">The index in this document where to insert the page .</param>
      <param name="document">The document to be inserted.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfPages.InsertRange(System.Int32,PdfEdit.Pdf.PdfDocument,System.Int32)">
      <summary>
            Inserts all pages of the specified document into this document.
            </summary>
      <param name="index">The index in this document where to insert the page .</param>
      <param name="document">The document to be inserted.</param>
      <param name="startIndex">The index of the first page to be inserted.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfPages.Remove(PdfEdit.Pdf.PdfPage)">
      <summary>
            Removes the specified page from the document.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfPages.RemoveAt(System.Int32)">
      <summary>
            Removes the specified page from the document.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfPages.MovePage(System.Int32,System.Int32)">
      <summary>
            Moves a page within the page sequence.
            </summary>
      <param name="oldIndex">The page index before this operation.</param>
      <param name="newIndex">The page index after this operation.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfPages.FixupAcroFields">
      <summary>
            Fixes page-references of imported Acro-Fields
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfPages.PagesArray">
      <summary>
            Gets a PdfArray containing all pages of this document. The array must not be modified.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfPages.GetEnumerator">
      <summary>
            Gets the enumerator.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfReal">
      <summary>
            Represents a direct real value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfReal.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfReal" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfReal.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfReal" /> class.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="P:PdfEdit.Pdf.PdfReal.Value">
      <summary>
            Gets the value as double.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfReal.ToString">
      <summary>
            Returns the real number as string.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfRealObject">
      <summary>
            Represents an indirect real value. This type is not used by PDFEdit. If it is imported from
            an external PDF file, the value is converted into a direct object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRealObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfRealObject" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRealObject.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfRealObject" /> class.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRealObject.#ctor(PdfEdit.Pdf.PdfDocument,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfRealObject" /> class.
            </summary>
      <param name="document">The document.</param>
      <param name="value">The value.</param>
    </member>
    <member name="P:PdfEdit.Pdf.PdfRealObject.Value">
      <summary>
            Gets or sets the value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRealObject.ToString">
      <summary>
            Returns the real as a culture invariant string.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfRectangle">
      <summary>
            Represents a PDF rectangle value, that is internally an array with 4 real values.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.#ctor">
      <summary>
            Initializes a new instance of the PdfRectangle class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
            Initializes a new instance of the PdfRectangle class with two points specifying
            two diagonally opposite corners.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.#ctor(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XPoint)">
      <summary>
            Initializes a new instance of the PdfRectangle class with two points specifying
            two diagonally opposite corners.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.#ctor(System.Drawing.PointF,System.Drawing.SizeF)">
      <summary>
            Initializes a new instance of the PdfRectangle class with the specified location and size.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.#ctor(PdfEdit.Drawing.XPoint,PdfEdit.Drawing.XSize)">
      <summary>
            Initializes a new instance of the PdfRectangle class with the specified location and size.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.#ctor(PdfEdit.Drawing.XRect)">
      <summary>
            Initializes a new instance of the PdfRectangle class with the specified XRect.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.Clone">
      <summary>
            Clones this instance.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.Copy">
      <summary>
            Implements cloning this instance.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfRectangle.IsEmpty">
      <summary>
            Tests whether all coordinate are zero.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.Equals(System.Object)">
      <summary>
            Tests whether the specified object is a PdfRectangle and has equal coordinates.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.op_Equality(PdfEdit.Pdf.PdfRectangle,PdfEdit.Pdf.PdfRectangle)">
      <summary>
            Tests whether two structures have equal coordinates.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.op_Inequality(PdfEdit.Pdf.PdfRectangle,PdfEdit.Pdf.PdfRectangle)">
      <summary>
            Tests whether two structures differ in one or more coordinates.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfRectangle.X1">
      <summary>
            Gets or sets the x-coordinate of the first corner of this PdfRectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfRectangle.Y1">
      <summary>
            Gets or sets the y-coordinate of the first corner of this PdfRectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfRectangle.X2">
      <summary>
            Gets or sets the x-coordinate of the second corner of this PdfRectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfRectangle.Y2">
      <summary>
            Gets or sets the y-coordinate of the second corner of this PdfRectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfRectangle.Width">
      <summary>
            Gets X2 - X1.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfRectangle.Height">
      <summary>
            Gets Y2 - Y1.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfRectangle.Location">
      <summary>
            Gets or sets the coordinates of the first point of this PdfRectangle.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfRectangle.Size">
      <summary>
            Gets or sets the size of this PdfRectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.Contains(System.Drawing.PointF)">
      <summary>
            Determines if the specified point is contained within this PdfRectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.Contains(PdfEdit.Drawing.XPoint)">
      <summary>
            Determines if the specified point is contained within this PdfRectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.Contains(System.Double,System.Double)">
      <summary>
            Determines if the specified point is contained within this PdfRectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.Contains(System.Drawing.RectangleF)">
      <summary>
            Determines if the rectangular region represented by rect is entirely contained within this PdfRectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.Contains(PdfEdit.Drawing.XRect)">
      <summary>
            Determines if the rectangular region represented by rect is entirely contained within this PdfRectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.Contains(PdfEdit.Pdf.PdfRectangle)">
      <summary>
            Determines if the rectangular region represented by rect is entirely contained within this PdfRectangle.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.ToXRect">
      <summary>
            Returns the rectangle as an XRect object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfRectangle.ToString">
      <summary>
            Returns the rectangle as a string in the form «[x1 y1 x2 y2]».
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfRectangle.Empty">
      <summary>
            Represents an empty PdfRectangle.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfStringEncoding">
      <summary>
            Determines the encoding of a PdfString or PdfStringObject.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfStringEncoding.RawEncoding">
      <summary>
            The characters of the string are actually bytes with an unknown or context specific meaning or encoding.
            With this encoding the 8 high bits of each character is zero.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfStringEncoding.StandardEncoding">
      <summary>
            Not yet used by PDFEdit.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfStringEncoding.PDFDocEncoding">
      <summary>
            The characters of the string are actually bytes with PDF document encoding.
            With this encoding the 8 high bits of each character is zero.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfStringEncoding.WinAnsiEncoding">
      <summary>
            The characters of the string are actually bytes with Windows ANSI encoding.
            With this encoding the 8 high bits of each character is zero.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfStringEncoding.MacRomanEncoding">
      <summary>
            Not yet used by PDFEdit.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfStringEncoding.MacExpertEncoding">
      <summary>
            Not yet used by PDFEdit.
            </summary>
    </member>
    <member name="F:PdfEdit.Pdf.PdfStringEncoding.Unicode">
      <summary>
            The characters of the string are Unicode characters.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfString">
      <summary>
            Represents a direct text string value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfString.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfString" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfString.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfString" /> class.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfString.#ctor(System.String,PdfEdit.Pdf.PdfStringEncoding)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfString" /> class.
            </summary>
      <param name="value">The value.</param>
      <param name="encoding">The encoding.</param>
    </member>
    <member name="P:PdfEdit.Pdf.PdfString.Length">
      <summary>
            Gets the number of characters in this string.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfString.Encoding">
      <summary>
            Gets the encoding.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfString.HexLiteral">
      <summary>
            Gets a value indicating whether the string is a hexadecimal literal.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfString.Value">
      <summary>
            Gets the string value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfString.ToString">
      <summary>
            Returns the string.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfString.ToStringFromPdfDocEncoded">
      <summary>
            Hack for document encoded bookmarks.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfStringObject">
      <summary>
            Represents an indirect text string value. This type is not used by PDFEdit. If it is imported from
            an external PDF file, the value is converted into a direct object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfStringObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfStringObject" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfStringObject.#ctor(PdfEdit.Pdf.PdfDocument,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfStringObject" /> class.
            </summary>
      <param name="document">The document.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfStringObject.#ctor(PdfEdit.Pdf.PdfDocument,System.String,PdfEdit.Pdf.PdfStringEncoding)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfStringObject" /> class.
            </summary>
      <param name="document">The document.</param>
      <param name="value">The value.</param>
      <param name="encoding">Encoding</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfStringObject.#ctor(System.String,PdfEdit.Pdf.PdfStringEncoding)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfStringObject" /> class.
            </summary>
      <param name="value">The value.</param>
      <param name="encoding">The encoding.</param>
    </member>
    <member name="P:PdfEdit.Pdf.PdfStringObject.Length">
      <summary>
            Gets the number of characters in this string.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfStringObject.Encoding">
      <summary>
            Gets or sets the encoding.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfStringObject.HexLiteral">
      <summary>
            Gets a value indicating whether the string is a hexadecimal literal.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfStringObject.Value">
      <summary>
            Gets or sets the value as string
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfStringObject.ToString">
      <summary>
            Returns the string.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfUInteger">
      <summary>
            Represents a direct unsigned integer value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUInteger.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfUInteger" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUInteger.#ctor(System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfUInteger" /> class.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfUInteger.Value">
      <summary>
            Gets the value as integer.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUInteger.ToString">
      <summary>
            Returns the unsigned integer as string.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUInteger.ToUInt64(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUInteger.ToSByte(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUInteger.ToDouble(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUInteger.ToDateTime(System.IFormatProvider)">
      <summary>
            Returns an undefined DateTime structure.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUInteger.ToSingle(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUInteger.ToBoolean(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent Boolean value.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUInteger.ToInt32(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUInteger.ToUInt16(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUInteger.ToInt16(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUInteger.ToByte(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUInteger.ToChar(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent Unicode character.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUInteger.ToInt64(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUInteger.GetTypeCode">
      <summary>
            Returns type code for 32-bit integers.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUInteger.ToDecimal(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"></see> number.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUInteger.ToType(System.Type,System.IFormatProvider)">
      <summary>
            Returns null.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUInteger.ToUInt32(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfUIntegerObject">
      <summary>
            Represents an indirect integer value. This type is not used by PDFEdit. If it is imported from
            an external PDF file, the value is converted into a direct object.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUIntegerObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfUIntegerObject" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUIntegerObject.#ctor(System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfUIntegerObject" /> class.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUIntegerObject.#ctor(PdfEdit.Pdf.PdfDocument,System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.Pdf.PdfUIntegerObject" /> class.
            </summary>
      <param name="document">The document.</param>
      <param name="value">The value.</param>
    </member>
    <member name="P:PdfEdit.Pdf.PdfUIntegerObject.Value">
      <summary>
            Gets the value as unsigned integer.
            </summary>
    </member>
    <member name="M:PdfEdit.Pdf.PdfUIntegerObject.ToString">
      <summary>
            Returns the integer as string.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.PdfViewerPreferences">
      <summary>
            Represents the PDF document viewer preferences dictionary.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfViewerPreferences.HideToolbar">
      <summary>
            Gets or sets a value indicating whether to hide the viewer application’s tool
            bars when the document is active.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfViewerPreferences.HideMenubar">
      <summary>
            Gets or sets a value indicating whether to hide the viewer application’s
            menu bar when the document is active.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfViewerPreferences.HideWindowUI">
      <summary>
            Gets or sets a value indicating whether to hide user interface elements in
            the document’s window (such as scroll bars and navigation controls),
            leaving only the document’s contents displayed.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfViewerPreferences.FitWindow">
      <summary>
            Gets or sets a value indicating whether to resize the document’s window to
            fit the size of the first displayed page.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfViewerPreferences.CenterWindow">
      <summary>
            Gets or sets a value indicating whether to position the document’s window
            in the center of the screen.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfViewerPreferences.DisplayDocTitle">
      <summary>
            Gets or sets a value indicating whether the window’s title bar
            should display the document title taken from the Title entry of the document
            information dictionary. If false, the title bar should instead display the name
            of the PDF file containing the document.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.PdfViewerPreferences.Direction">
      <summary>
            The predominant reading order for text: LeftToRight or RightToLeft 
            (including vertical writing systems, such as Chinese, Japanese, and Korean).
            This entry has no direct effect on the document’s contents or page numbering
            but can be used to determine the relative positioning of pages when displayed 
            side by side or printed n-up. Default value: LeftToRight.
            </summary>
    </member>
    <member name="T:PdfEdit.Pdf.TrimMargins">
      <summary>
            Represents trim margins added to the page.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.TrimMargins.All">
      <summary>
            Sets all four crop margins simultaneously.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.TrimMargins.Left">
      <summary>
            Gets or sets the left crop margin.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.TrimMargins.Right">
      <summary>
            Gets or sets the right crop margin.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.TrimMargins.Top">
      <summary>
            Gets or sets the top crop margin.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.TrimMargins.Bottom">
      <summary>
            Gets or sets the bottom crop margin.
            </summary>
    </member>
    <member name="P:PdfEdit.Pdf.TrimMargins.AreSet">
      <summary>
            Gets a value indicating whether this instance has at least one margin with a value other than zero.
            </summary>
    </member>
    <member name="T:PdfEdit.NamespaceDoc">
      <summary>
            Base namespace of PDFEdit. Most classes are implemented in nested namespaces like e. g. PdfEdit.Pdf.
            </summary>
      <seealso cref="N:PdfEdit.Pdf">
      </seealso>
    </member>
    <member name="T:PdfEdit.PageOrientation">
      <summary>
            Specifies the orientation of a page.
            </summary>
    </member>
    <member name="F:PdfEdit.PageOrientation.Portrait">
      <summary>
            The default page orientation.
            </summary>
    </member>
    <member name="F:PdfEdit.PageOrientation.Landscape">
      <summary>
            The width and height of the page are reversed.
            </summary>
    </member>
    <member name="T:PdfEdit.PageSize">
      <summary>
            Identifies the most popular predefined page sizes.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.Undefined">
      <summary>
            The width or height of the page are set manually and override the PageSize property.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.A0">
      <summary>
            Identifies a paper sheet size of 841 mm times 1189 mm or 33.11 inch times 46.81 inch.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.A1">
      <summary>
            Identifies a paper sheet size of 594 mm times 841 mm or 23.39 inch times 33.1 inch.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.A2">
      <summary>
            Identifies a paper sheet size of 420 mm times 594 mm or 16.54 inch times 23.29 inch.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.A3">
      <summary>
            Identifies a paper sheet size of 297 mm times 420 mm or 11.69 inch times 16.54 inch.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.A4">
      <summary>
            Identifies a paper sheet size of 210 mm times 297 mm or 8.27 inch times 11.69 inch.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.A5">
      <summary>
            Identifies a paper sheet size of 148 mm times 210 mm or 5.83 inch times 8.27 inch.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.RA0">
      <summary>
            Identifies a paper sheet size of 860 mm times 1220 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.RA1">
      <summary>
            Identifies a paper sheet size of 610 mm times 860 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.RA2">
      <summary>
            Identifies a paper sheet size of 430 mm times 610 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.RA3">
      <summary>
            Identifies a paper sheet size of 305 mm times 430 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.RA4">
      <summary>
            Identifies a paper sheet size of 215 mm times 305 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.RA5">
      <summary>
            Identifies a paper sheet size of 153 mm times 215 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.B0">
      <summary>
            Identifies a paper sheet size of 1000 mm times 1414 mm or 39.37 inch times 55.67 inch.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.B1">
      <summary>
            Identifies a paper sheet size of 707 mm times 1000 mm or 27.83 inch times 39.37 inch.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.B2">
      <summary>
            Identifies a paper sheet size of 500 mm times 707 mm or 19.68 inch times 27.83 inch.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.B3">
      <summary>
            Identifies a paper sheet size of 353 mm times 500 mm or 13.90 inch times 19.68 inch.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.B4">
      <summary>
            Identifies a paper sheet size of 250 mm times 353 mm or 9.84 inch times 13.90 inch.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.B5">
      <summary>
            Identifies a paper sheet size of 176 mm times 250 mm or 6.93 inch times 9.84 inch.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.Quarto">
      <summary>
            Identifies a paper sheet size of 10 inch times 8 inch or 254 mm times 203 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.Foolscap">
      <summary>
            Identifies a paper sheet size of 13 inch times 8 inch or 330 mm times 203 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.Executive">
      <summary>
             Identifies a paper sheet size of 10.5 inch times 7.25 inch or 267 mm times 184 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.GovernmentLetter">
      <summary>
            Identifies a paper sheet size of 10.5 inch times 8 inch 267 mm times 203 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.Letter">
      <summary>
            Identifies a paper sheet size of 11 inch times 8.5 inch 279 mm times 216 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.Legal">
      <summary>
            Identifies a paper sheet size of 14 inch times 8.5 inch 356 mm times 216 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.Ledger">
      <summary>
            Identifies a paper sheet size of 17 inch times 11 inch or 432 mm times 279 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.Tabloid">
      <summary>
            Identifies a paper sheet size of 17 inch times 11 inch or 432 mm times 279 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.Post">
      <summary>
            Identifies a paper sheet size of 19.25 inch times 15.5 inch 489 mm times 394 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.Crown">
      <summary>
            20 ×Identifies a paper sheet size of 20 inch times 15 inch or 508 mm times 381 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.LargePost">
      <summary>
            Identifies a paper sheet size of 21 inch times 16.5 inch 533 mm times 419 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.Demy">
      <summary>
            Identifies a paper sheet size of 22.5 inch times 17.5 inch 572 mm times 445 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.Medium">
      <summary>
            Identifies a paper sheet size of 23 inch times 18 inch or 584 mm times 457 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.Royal">
      <summary>
            Identifies a paper sheet size of 25 inch times 20 inch or 635 mm times 508 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.Elephant">
      <summary>
            Identifies a paper sheet size of 28 inch times 23 inch or 711 mm times 584 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.DoubleDemy">
      <summary>
            Identifies a paper sheet size of 35 inch times 23.5 inch or 889 mm times 597 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.QuadDemy">
      <summary>
            Identifies a paper sheet size of 45 inch times 35 inch 1143 times 889 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.STMT">
      <summary>
            Identifies a paper sheet size of 8.5 inch times 5.5 inch or 216 mm times 396 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.Folio">
      <summary>
            Identifies a paper sheet size of 8.5 inch times 13 inch or 216 mm times 330 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.Statement">
      <summary>
            Identifies a paper sheet size of 5.5 inch times 8.5 inch or 396 mm times 216 mm.
            </summary>
    </member>
    <member name="F:PdfEdit.PageSize.Size10x14">
      <summary>
            Identifies a paper sheet size of 10 inch times 14 inch.
            </summary>
    </member>
    <member name="T:PdfEdit.PageSizeConverter">
      <summary>
            Converter from <see cref="T:PdfEdit.PageSize" /> to <see cref="T:PdfEdit.Drawing.XSize" />.
            </summary>
    </member>
    <member name="M:PdfEdit.PageSizeConverter.ToSize(PdfEdit.PageSize)">
      <summary>
            Converts the specified page size enumeration to a pair of values in point.
            </summary>
    </member>
    <member name="T:PdfEdit.PdfEditException">
      <summary>
            Base class of all exceptions in the PDFEdit frame work.
            </summary>
    </member>
    <member name="M:PdfEdit.PdfEditException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.PdfEditException" /> class.
            </summary>
    </member>
    <member name="M:PdfEdit.PdfEditException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.PdfEditException" /> class.
            </summary>
      <param name="message">The exception message.</param>
    </member>
    <member name="M:PdfEdit.PdfEditException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:PdfEdit.PdfEditException" /> class.
            </summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:PdfEdit.ProductVersionInfo">
      <summary>
            Version info base for all PDFEdit related assemblies.
            </summary>
    </member>
    <member name="F:PdfEdit.ProductVersionInfo.Title">
      <summary>
            The title of the product.
            </summary>
    </member>
    <member name="F:PdfEdit.ProductVersionInfo.Description">
      <summary>
            A characteristic description of the product.
            </summary>
    </member>
    <member name="F:PdfEdit.ProductVersionInfo.Producer">
      <summary>
            The PDF producer information string.        
            </summary>
    </member>
    <member name="F:PdfEdit.ProductVersionInfo.Producer2">
      <summary>
            The PDF producer information string including VersionPatch.
            </summary>
    </member>
    <member name="F:PdfEdit.ProductVersionInfo.Version">
      <summary>
            The full version number.
            </summary>
    </member>
    <member name="F:PdfEdit.ProductVersionInfo.Version2">
      <summary>
            The full version string.
            </summary>
    </member>
    <member name="F:PdfEdit.ProductVersionInfo.Url">
      <summary>
            The home page of this product.
            </summary>
    </member>
    <member name="F:PdfEdit.ProductVersionInfo.Company">
      <summary>
            The company that created/owned the product.
            </summary>
    </member>
    <member name="F:PdfEdit.ProductVersionInfo.Product">
      <summary>
            The name the product.
            </summary>
    </member>
    <member name="F:PdfEdit.ProductVersionInfo.Copyright">
      <summary>
            The copyright information.
            </summary>
    </member>
    <member name="F:PdfEdit.ProductVersionInfo.Trademark">
      <summary>
            The trademark the product.
            </summary>
    </member>
    <member name="F:PdfEdit.ProductVersionInfo.VersionMajor">
      <summary>
            The major version number of the product.
            </summary>
    </member>
    <member name="F:PdfEdit.ProductVersionInfo.VersionMinor">
      <summary>
            The minor version number of the product.
            </summary>
    </member>
    <member name="F:PdfEdit.ProductVersionInfo.VersionBuild">
      <summary>
            The build number of the product.
            </summary>
    </member>
    <member name="F:PdfEdit.ProductVersionInfo.VersionPatch">
      <summary>
            The patch number of the product.
            </summary>
    </member>
    <member name="F:PdfEdit.ProductVersionInfo.Technology">
      <summary>
            The technology tag of the product:
            (none) Pure .NET
            -gdi : GDI+,
            -wpf : WPF,
            -hybrid : Both GDI+ and WPF (hybrid).
            -sl : Silverlight
            -wp : Windows Phone
            -wrt : Windows RunTime
            </summary>
    </member>
    <member name="T:PdfEdit.SharpZipLib.Zip.UseZip64">
      <summary>
            Determines how entries are tested to see if they should use Zip64 extensions or not.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.UseZip64.Off">
      <summary>
            Zip64 will not be forced on entries during processing.
            </summary>
      <remarks>An entry can have this overridden if required ZipEntry.ForceZip64"</remarks>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.UseZip64.On">
      <summary>
            Zip64 should always be used.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.UseZip64.Dynamic">
      <summary>
            #ZipLib will determine use based on entry values when added to archive.
            </summary>
    </member>
    <member name="T:PdfEdit.SharpZipLib.Zip.CompressionMethod">
      <summary>
            The kind of compression used for an entry in an archive
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.CompressionMethod.Stored">
      <summary>
            A direct copy of the file contents is held in the archive
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.CompressionMethod.Deflated">
      <summary>
            Common Zip compression method using a sliding dictionary 
            of up to 32KB and secondary compression from Huffman/Shannon-Fano trees
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.CompressionMethod.Deflate64">
      <summary>
            An extension to deflate with a 64KB window. Not supported by #Zip currently
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.CompressionMethod.BZip2">
      <summary>
            BZip2 compression. Not supported by #Zip.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.CompressionMethod.WinZipAES">
      <summary>
            WinZip special for AES encryption, Now supported by #Zip.
            </summary>
    </member>
    <member name="T:PdfEdit.SharpZipLib.Zip.EncryptionAlgorithm">
      <summary>
            Identifies the encryption algorithm used for an entry
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.EncryptionAlgorithm.None">
      <summary>
            No encryption has been used.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.EncryptionAlgorithm.PkzipClassic">
      <summary>
            Encrypted using PKZIP 2.0 or 'classic' encryption.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.EncryptionAlgorithm.Des">
      <summary>
            DES encryption has been used.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.EncryptionAlgorithm.RC2">
      <summary>
            RC2 encryption has been used for encryption.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.EncryptionAlgorithm.TripleDes168">
      <summary>
            Triple DES encryption with 168 bit keys has been used for this entry.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.EncryptionAlgorithm.TripleDes112">
      <summary>
            Triple DES with 112 bit keys has been used for this entry.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.EncryptionAlgorithm.Aes128">
      <summary>
            AES 128 has been used for encryption.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.EncryptionAlgorithm.Aes192">
      <summary>
            AES 192 has been used for encryption.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.EncryptionAlgorithm.Aes256">
      <summary>
            AES 256 has been used for encryption.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.EncryptionAlgorithm.RC2Corrected">
      <summary>
            RC2 corrected has been used for encryption.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.EncryptionAlgorithm.Blowfish">
      <summary>
            Blowfish has been used for encryption.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.EncryptionAlgorithm.Twofish">
      <summary>
            Twofish has been used for encryption.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.EncryptionAlgorithm.RC4">
      <summary>
            RC4 has been used for encryption.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.EncryptionAlgorithm.Unknown">
      <summary>
            An unknown algorithm has been used for encryption.
            </summary>
    </member>
    <member name="T:PdfEdit.SharpZipLib.Zip.GeneralBitFlags">
      <summary>
            Defines the contents of the general bit flags field for an archive entry.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.GeneralBitFlags.Encrypted">
      <summary>
            Bit 0 if set indicates that the file is encrypted
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.GeneralBitFlags.Method">
      <summary>
            Bits 1 and 2 - Two bits defining the compression method (only for Method 6 Imploding and 8,9 Deflating)
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.GeneralBitFlags.Descriptor">
      <summary>
            Bit 3 if set indicates a trailing data desciptor is appended to the entry data
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.GeneralBitFlags.ReservedPKware4">
      <summary>
            Bit 4 is reserved for use with method 8 for enhanced deflation
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.GeneralBitFlags.Patched">
      <summary>
            Bit 5 if set indicates the file contains Pkzip compressed patched data.
            Requires version 2.7 or greater.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.GeneralBitFlags.StrongEncryption">
      <summary>
            Bit 6 if set indicates strong encryption has been used for this entry.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.GeneralBitFlags.Unused7">
      <summary>
            Bit 7 is currently unused
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.GeneralBitFlags.Unused8">
      <summary>
            Bit 8 is currently unused
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.GeneralBitFlags.Unused9">
      <summary>
            Bit 9 is currently unused
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.GeneralBitFlags.Unused10">
      <summary>
            Bit 10 is currently unused
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.GeneralBitFlags.UnicodeText">
      <summary>
            Bit 11 if set indicates the filename and 
            comment fields for this file must be encoded using UTF-8.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.GeneralBitFlags.EnhancedCompress">
      <summary>
            Bit 12 is documented as being reserved by PKware for enhanced compression.
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.GeneralBitFlags.HeaderMasked">
      <summary>
            Bit 13 if set indicates that values in the local header are masked to hide
            their actual values, and the central directory is encrypted.
            </summary>
      <remarks>
            Used when encrypting the central directory contents.
            </remarks>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.GeneralBitFlags.ReservedPkware14">
      <summary>
            Bit 14 is documented as being reserved for use by PKware
            </summary>
    </member>
    <member name="F:PdfEdit.SharpZipLib.Zip.GeneralBitFlags.ReservedPkware15">
      <summary>
            Bit 15 is documented as being reserved for use by PKware
            </summary>
    </member>
    <member name="T:PdfViewerNet.PdfViewer">
      <summary>
            PdfViewer
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.WndProc(System.Windows.Forms.Message@)">
      <summary>
            WndProc override
            </summary>
      <param name="m">Windows message</param>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.IsCalledFromWPF">
      <summary>
            Used when called from WPF application. Default is false.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.#ctor">
      <summary>
            Constructor for PdfViewer
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.AllowDrop">
      <summary>
            Allow drop
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.OnLinkClicked(PdfViewerNet.LinkClickedEventArgs)">
      <summary>
            On link clicked event
            </summary>
      <param name="e">LinkClickedEvent arguments</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.OnDocumentPrintPageBegin(PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs)">
      <summary>
            Event that occurs when printing of the document page begins.
            </summary>
      <param name="e">Event args</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.OnDocumentPrintPageEnd(PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs)">
      <summary>
            Event that occurs when printing of the document page ends.
            </summary>
      <param name="e">Event args</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.OnDocumentPrintBegin(PdfPrintingNet.PdfPrint.DocumentPrintBeginEventArgs)">
      <summary>
            Event that occurs when printing of the document begins.
            </summary>
      <param name="e">Event args</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.OnFoundText(PdfViewerNet.FoundTextEventArgs)">
      <summary>
            Event that occurs when search text was found
            </summary>
      <param name="e">Event args</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.OnNotFoundText(PdfViewerNet.NotFoundTextEventArgs)">
      <summary>
            Event that occurs when search text wasn't found
            </summary>
      <param name="e">Event args</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.OnDocumentPrintEnd(PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs)">
      <summary>
            Event that occurs when printing of the document begins.
            </summary>
      <param name="e">Event args</param>
    </member>
    <member name="E:PdfViewerNet.PdfViewer.DocumentPrintBegin">
      <summary>
            Document print begin event
            </summary>
    </member>
    <member name="E:PdfViewerNet.PdfViewer.DocumentPrintEnd">
      <summary>
            Document print end event
            </summary>
    </member>
    <member name="E:PdfViewerNet.PdfViewer.DocumentPrintPageBegin">
      <summary>
            Document print page begin event
            </summary>
    </member>
    <member name="E:PdfViewerNet.PdfViewer.DocumentPrintPageEnd">
      <summary>
            Document print page end event
            </summary>
    </member>
    <member name="E:PdfViewerNet.PdfViewer.FoundText">
      <summary>
            Found text event
            </summary>
    </member>
    <member name="E:PdfViewerNet.PdfViewer.NotFoundText">
      <summary>
            Not found text event
            </summary>
    </member>
    <member name="E:PdfViewerNet.PdfViewer.LinkClicked">
      <summary>
            Link clicked in the PDF document
            </summary>
    </member>
    <member name="E:PdfViewerNet.PdfViewer.DisplayAreaMouseClicked">
      <summary>
            Mouse clicked in display area
            </summary>
    </member>
    <member name="E:PdfViewerNet.PdfViewer.DisplayAreaMouseUp">
      <summary>
            Mouse up event in display area
            </summary>
    </member>
    <member name="E:PdfViewerNet.PdfViewer.DisplayAreaMouseDown">
      <summary>
            Mouse down event in display area
            </summary>
    </member>
    <member name="E:PdfViewerNet.PdfViewer.DisplayAreaMouseDoubleClicked">
      <summary>
            Mouse double clicked in display area
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.OpenDocument(System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Opens the document.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="password">The password.</param>
      <param name="showPasswordForm">if true and password is required it will show form to enter password</param>
      <param name="showStatusMessage">if true and document wasn't loaded correctly it will display error status message</param>
      <returns>Status of file open.</returns>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.OpenDocument(System.Byte[],System.String,System.Boolean,System.Boolean)">
      <summary>
            Opens the document.
            </summary>
      <param name="pdfContent">Content of the PDF.</param>
      <param name="password">The password.</param>
      <param name="showPasswordForm">if true and password is required it will show form to enter password</param>
      <param name="showStatusMessage">if true and document wasn't loaded correctly it will display error status message</param>
      <returns>Status of file open.</returns>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.OpenDocument">
      <summary>
            Opens the document by showing Open File Dialog. If password required it will show form to enter password.
            </summary>
      <returns>Status of open PDF action</returns>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.SaveDocument">
      <summary>
            Saves the currently opened document by showing Save File Dialog.
            </summary>
      <returns>Status of save PDF action</returns>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.SaveDocument(System.String,System.String)">
      <summary>
            Saves the document.
            </summary>
      <param name="fileName">Name of the PDF document to be saved.</param>
      <param name="outputFileName">Path to the output PDF document</param>
      <returns>Status of save PDF action</returns>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.SaveDocument(System.Byte[],System.String)">
      <summary>
            Saves the document.
            </summary>
      <param name="pdfContent">Content of the PDF document to be saved.</param>
      <param name="outputFileName">Path to the output PDF document</param>
      <returns>Status of save PDF action</returns>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.SendDocumentInEmail">
      <summary>
            Send already loaded PDF document in email.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.SendDocumentInEmail(System.String)">
      <summary>
            Send PDF document in email.
            </summary>
      <param name="fileName">Name of the PDF document to be sent.</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.SendDocumentInEmail(System.Byte[],System.String)">
      <summary>
            Send PDF document in email.
            </summary>
      <param name="pdfContent">Content of the PDF document to be sent.</param>
      <param name="attachmentName">Name of the attachment file. Optional. If not set, temporary name will be generated.</param>
    </member>
    <member name="E:PdfViewerNet.PdfViewer.DocumentLoaded">
      <summary>
            Occurs when document is loaded.
            </summary>
    </member>
    <member name="E:PdfViewerNet.PdfViewer.DocumentClosed">
      <summary>
            Occurs when document is closed.
            </summary>
    </member>
    <member name="E:PdfViewerNet.PdfViewer.DocumentSaved">
      <summary>
            Occurs when document is saved.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.IsDocumentLoaded">
      <summary>
            Is document loaded.
            </summary>
      <returns>True if document is loaded, otherwise false</returns>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.OnDocumentLoaded(PdfViewerNet.DocumentLoadedEventArgs)">
      <summary>
            Occurs when document is loaded.
            </summary>
      <param name="e">Document loaded arguments</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.OnDocumentClosed(PdfViewerNet.DocumentClosedEventArgs)">
      <summary>
            Occurs when document is closed.
            </summary>
      <param name="e">Document closed arguments</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.OnDocumentSaved(PdfViewerNet.DocumentSavedEventArgs)">
      <summary>
            Occurs when document is saved.
            </summary>
      <param name="e">Document loaded arguments</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.CloseDocument">
      <summary>
            Closes the document.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.Print">
      <summary>
            Shows PrintDialog and prints loaded document if document has Print permissions.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.AutoPageSize">
      <summary>
            If true, it will print page size as it is no matter what is selected as Page size in the printer dialog.
            By default it is false.
            </summary>
      <returns>True if auto page size is turned on.</returns>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.PrintScale">
      <summary>
            How is printed content scaled. Available options are: None, FitToMargins, ShrinkToMargins and CustomScale.
            Default value is FitToMargins.
            </summary>
      <returns>Printing content scaling value</returns>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.PrintCustomScale">
      <summary>
            If <see cref="P:PdfViewerNet.PdfViewer.PrintScale" /> is set to <see cref="F:PdfPrintingNet.PdfPrint.ScaleTypes.CustomScale" />, the percentage value for how 
            to scale the printed content.
            Default value is 100.
            </summary>
      <returns>Printing content custom scaling value</returns>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.PrintMargins">
      <summary>
            Margins to apply for the page. Units are 1/100 inch (i.e. 100 = 1 inch). 
            Setting <see cref="!:Scale" /> influences the print result. 
            When set to <see cref="F:PdfPrintingNet.PdfPrint.ScaleTypes.None" />, the margins are adjusted (if needed) to preserve the actual size of the print content. 
            And when content is smaller, existing whitespace is considered as part of margin space. 
            For all other values, the print content size is adjusted (if needed) to preserve the specified margins.
            Default value is (0,0,0,0).
            </summary>
      <returns>Margins value</returns>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.IsPrintContentCentered">
      <summary>
            Is printing content centered?
            Default value is true
            </summary>
      <returns>True if print content is centered.</returns>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.SupressErrorMessageInPrint">
      <summary>
            If true, it will not show message box if error happens in printing. Used for showing custom message box.
            By default it is false.
            </summary>
      <returns>True if .</returns>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.IsPrintAutoRotate">
      <summary>
            If true, it will automatically adjust printing page orientation (landscape/portrait) as it is no matter what is selected as Page size in the printer dialog.
            By default it is false.
            </summary>
      <returns>True if auto paper orientation is turned on.</returns>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.NumberOfPages">
      <summary>
            Number of pages in loaded PDF document
            </summary>
      <returns>number of pdf page in loaded document. If document isn't loaded it returns 0.</returns>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.CurrentPageNumber">
      <summary>
            Current page number in loaded PDF document
            </summary>
      <returns>Current page number in loaded document. If document isn't loaded it returns 0.</returns>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.TableOfContent">
      <summary>
            Table of content of loaded document. It can be null if not present.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.Watermark">
      <summary>
            Table of content of loaded document. It can be null if not present.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.DocumentPermissions">
      <summary>
            Document permissions of loaded PDF document.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.DocumentProperties">
      <summary>
            Document properties of loaded PDF document.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.TranslateViewer(System.String)">
      <summary>
            Changes labels, buttons and message text with the translation values defined in translationFilePath
            </summary>
      <param name="translationFilePath">Full path to the file which contains translations.</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.ShowDocumentInfo">
      <summary>
            Shows the document information.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.IsToolbarVisible">
      <summary>
            Gets or sets a value indicating whether toolbar is visible.
            </summary>
      <returns>True if toolbar is visible.</returns>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.ContextMenuDisabled">
      <summary>
            Disable context menu - if true, context menu will not be shown if right mouse button is clicked. Default is false.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.SelectionDisabled">
      <summary>
            Disable selection of text and images. Even if false, if document permission doesn't allow selection then selection will be disabled.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.ImageSelectionDisabled">
      <summary>
            Disable selection of images. Recommeded to set to true if scrolling of the document is too slow. 
            Even if false, if document permission doesn't allow selection then selection will be disabled.
            If SelectionDisabled property is true then this property is ignored.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.TextSelectionDisabled">
      <summary>
            Disable selection of text. 
            Even if false, if document permission doesn't allow selection then selection will be disabled.
            If SelectionDisabled property is true then this property is ignored.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.SelectionColor">
      <summary>
            Gets or sets the color of the selection.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.BorderColor">
      <summary>
            Border color of area where PDF document is displayed.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.BackgroundColor">
      <summary>
            Gets or sets the color of the viewer background.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.ToolbarBackgroundColor">
      <summary>
            Gets or sets the color of the toolbar background.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.ViewType">
      <summary>
            Gets or sets the type of the display page type.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.ToolbarTooltipVisible">
      <summary>
            Gets or sets if tooltip is visible on the toolbar.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.ToolbarSearchVisible">
      <summary>
            Show search field in toolbar
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.ToolbarDocumentInfoVisible">
      <summary>
            Show document info button in toolbar.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.ToolbarBookmarkVisible">
      <summary>
            Show bookmarks button in toolbar.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.ToolbarVisitedPagesVisible">
      <summary>
            Show buttons in toolbar for navigating through visited pages.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.ToolbarRotateVisible">
      <summary>
            Show buttons in toolbar for rotation.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.ToolbarPageVisible">
      <summary>
            Show fields and buttons in toolbar related to pages.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.ToolbarZoomVisible">
      <summary>
            Show zoom field and buttons in toolbar.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.ToolbarEmailVisible">
      <summary>
            Show email buttons in toolbar.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.ToolbarSaveVisible">
      <summary>
            Show save buttons in toolbar.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.ToolbarOpenVisible">
      <summary>
            Show button Open in toolbar.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.ToolbarPrintVisible">
      <summary>
            Show button Print in toolbar.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.ToolbarPageViewTypeVisible">
      <summary>
            Show buttons in toolbar for changing display type of pages.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.InitialOpenDirectory">
      <summary>
            Initial open directory in Open file dialog.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.InitialOpenFileName">
      <summary>
            Initial open file name in Open file dialog.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.ShowBookmarks">
      <summary>
            Show bookmarks if available.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.DisableParentShortcuts">
      <summary>
            Disable parent shortcuts already defined in the PdfViewer?
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.DisablePdfViewerShortcuts">
      <summary>
            Disable shortcuts defined in the PdfViewer
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.DisablePrinting">
      <summary>
            Disable printing
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.ZoomValue">
      <summary>
            Gets or sets the zoom value in percentage. For actual size set 100.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.FitToPageZoomValue">
      <summary>
            Gets zoom percentage at what PDF page is fit to current PDF display area.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.Rotate(System.Boolean)">
      <summary>
            Rotates the specified document.
            </summary>
      <param name="isClockwise">if true it will rotate clockwise otherwise counter clockwise.</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.ZoomIn">
      <summary>
            Zooms document to next available bigger zoom level. If already is maximal zoom level it doesn't happen anything.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.ZoomOut">
      <summary>
            Zooms out document to closest available smaller zoom level. If already is minimal zoom level it doesn't happen anything.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.GetAvailableZoomLevels">
      <summary>
            Gets the available zoom levels.
            </summary>
      <returns>List of available zoom levels</returns>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.GetMinZoomLevel">
      <summary>
            Gets the minimum zoom level.
            </summary>
      <returns>Minimum zoom level in percentage.</returns>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.GetMaxZoomLevel">
      <summary>
            Gets the maximum zoom level.
            </summary>
      <returns>Maximum zoom level in percentage.</returns>
    </member>
    <member name="E:PdfViewerNet.PdfViewer.ZoomChanged">
      <summary>
            Occurs when document zoom level is changed.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.OnZoomChanged(PdfViewerNet.ZoomEventArgs)">
      <summary>
            Occurs when document zoom level is changed.
            </summary>
      <param name="e">Event arguments</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
      <summary>
            Overrides CmdKey
            </summary>
      <param name="msg">Message</param>
      <param name="keyData">Key data</param>
      <returns>true if key is processed, otherwise false</returns>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.GoToPage(System.Int32)">
      <summary>
            Opens and display selected page.
            </summary>
      <param name="pageNumber">The page number.</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.GoToPreviousPage">
      <summary>
            Goes to previous page.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.GoToNextPage">
      <summary>
            Goes to next page.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.GoToLastPage">
      <summary>
            Goes to last page.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.GoToFirstPage">
      <summary>
            Goes to first page.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.GoToPreviousVisitedPage">
      <summary>
            Goes to previous visited page.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.GoToNextVisitedPage">
      <summary>
            Goes to next visited page.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.VisitedPages">
      <summary>
            List of visited pages.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.CurrentVisitedPageIndex">
      <summary>
            Gets the index of the current visited page.
            </summary>
    </member>
    <member name="E:PdfViewerNet.PdfViewer.CurrentPageChanged">
      <summary>
            Occurs when current displayed page is changed.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.OnCurrentPageChanged(PdfViewerNet.CurrentPageEventArgs)">
      <summary>
            Occurs when current displayed page is changed.
            </summary>
      <param name="e">Event parameters</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.SearchNext(System.String,System.Boolean,System.Boolean)">
      <summary>
            Searches for the next occurrence of search text.
            </summary>
      <param name="searchText">The search text.</param>
      <param name="isCaseSensitive">if true search operation will be case sensitive</param>
      <param name="wholeWordOnly">if true only whole word will be found</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.SearchPrevious(System.String,System.Boolean,System.Boolean)">
      <summary>
            Searches for the previous occurrence of search text.
            </summary>
      <param name="searchText">The search text.</param>
      <param name="isCaseSensitive">if true search operation will be case sensitive</param>
      <param name="wholeWordOnly">if true only whole word will be found</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.ResetSearch">
      <summary>
            Resets the search.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.SelectAllText">
      <summary>
            Selects all text in PDF document.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.SelectAllText(System.Int32)">
      <summary>
            Selects all text in PDF document.
            </summary>
      <param name="pageNumber">The page number where to select all text</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.DeselectAllText">
      <summary>
            Deselects all selected text in PDF document.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.CopySelectedContentToClipboard">
      <summary>
            Copies the selected content to clipboard.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.GetSelectedText">
      <summary>
            Gets the selected text.
            </summary>
      <returns>Text if selected, empty string if nothing is selected</returns>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.GetSelectedImage">
      <summary>
            Gets the selected image.
            </summary>
      <returns>Image if selected, null if nothing is selected</returns>
    </member>
    <member name="E:PdfViewerNet.PdfViewer.SelectionChanged">
      <summary>
            Occurs when selection changes.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.OnSelectionChanged(PdfViewerNet.SelectionEventArgs)">
      <summary>
            Occurs when selection changes.
            </summary>
      <param name="e">Event arguments</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.SelectToolbarZoomField">
      <summary>
            If toolbar is visible selects toolbar zoom field.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.SelectToolbarSearchField">
      <summary>
            If toolbar is visible selects toolbar search field.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.SelectToolbarPageNumberField">
      <summary>
            If toolbar is visible selects toolbar page number field.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.OverridePrinterResolution">
      <summary>
            If true, it will override the Printer resolution selected from the Print dialog with the value in PrinterResolution property.
            </summary>
    </member>
    <member name="P:PdfViewerNet.PdfViewer.PrinterResolution">
      <summary>
            If OvveridePrinterResolution == true then this value will be used as a PrinterResolution.
            </summary>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.SetLicenseInfo(System.String,System.String)">
      <summary>
            Sets the license information.
            </summary>
      <param name="companyName">Name of the company.</param>
      <param name="licenseKey">The license key.</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.SetWPFParentLocation(System.Int32,System.Int32)">
      <summary>
            Set WPF parent form location. Used for correctly showing progress bar.
            </summary>
      <param name="left">
      </param>
      <param name="top">
      </param>
    </member>
    <member name="M:PdfViewerNet.PdfViewer.SetWPFParentSize(System.Int32,System.Int32)">
      <summary>
            Set WPF parent form dimension. Used for correctly showing progress bar.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="T:PdfViewerNet.PageViewType">
      <summary>
            PageViewType
            </summary>
    </member>
    <member name="F:PdfViewerNet.PageViewType.Single">
      <summary>
            The single
            </summary>
    </member>
    <member name="F:PdfViewerNet.PageViewType.Continuous">
      <summary>
            The continuous
            </summary>
    </member>
    <member name="T:PdfViewerNet.ZoomEventArgs">
      <summary>
            Zoom Event Arguments
            </summary>
    </member>
    <member name="M:PdfViewerNet.ZoomEventArgs.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the ZoomEventArgs class.
            </summary>
      <param name="zoomLevel">The zoom level.</param>
    </member>
    <member name="P:PdfViewerNet.ZoomEventArgs.ZoomLevel">
      <summary>
            Gets or sets the zoom level.
            </summary>
    </member>
    <member name="T:PdfViewerNet.SelectionType">
      <summary>
            Selection Type
            </summary>
    </member>
    <member name="F:PdfViewerNet.SelectionType.Text">
      <summary>
            The text
            </summary>
    </member>
    <member name="F:PdfViewerNet.SelectionType.Image">
      <summary>
            The image
            </summary>
    </member>
    <member name="T:PdfViewerNet.SelectionEventArgs">
      <summary>
            Selection Event Arguments
            </summary>
    </member>
    <member name="M:PdfViewerNet.SelectionEventArgs.#ctor(System.Int32,PdfViewerNet.SelectionType)">
      <summary>
            Initializes a new instance of the SelectionEventArgs class.
            </summary>
      <param name="count">The count.</param>
      <param name="selectionType">Type of the selection.</param>
    </member>
    <member name="P:PdfViewerNet.SelectionEventArgs.SelectedCount">
      <summary>
            Gets or sets the selected count.
            </summary>
    </member>
    <member name="P:PdfViewerNet.SelectionEventArgs.SelectionType">
      <summary>
            Gets or sets the type of the selection.
            </summary>
    </member>
    <member name="T:PdfViewerNet.LinkClickedEventArgs">
      <summary>
            Arguments for the LinkClicked event
            </summary>
    </member>
    <member name="M:PdfViewerNet.LinkClickedEventArgs.#ctor(PdfPrintingNet.DestinationType,System.Object,System.Boolean)">
      <summary>
            Initializes a new instance of the LinkClickedEventArgs
            </summary>
      <param name="linkType">Link type: URL, ScrollToPage, Application, ...</param>
      <param name="linkValue">Value of the link. Based on the link type it can be page number, web URL, ...</param>
      <param name="cancel">Cancel execution of the event</param>
    </member>
    <member name="P:PdfViewerNet.LinkClickedEventArgs.LinkType">
      <summary>
            Link Type. It can be URL, ScrollToPage, Application, Unsupported, Application, ExternalDoc.
            </summary>
    </member>
    <member name="P:PdfViewerNet.LinkClickedEventArgs.LinkValue">
      <summary>
            Value of the link. Based on the link type it can be web url, page number, path to another application, ...
            </summary>
    </member>
    <member name="P:PdfViewerNet.LinkClickedEventArgs.Cancel">
      <summary>
            Value of the link. Based on the link type it can be web url, page number, path to another application, ...
            </summary>
    </member>
    <member name="T:PdfViewerNet.DocumentLoadedEventArgs">
      <summary>
            Document Loaded Event Arguments
            </summary>
    </member>
    <member name="M:PdfViewerNet.DocumentLoadedEventArgs.#ctor(System.String)">
      <summary>
            Initializes a new instance of the DocumentLoadedEventArgs class.
            </summary>
      <param name="fileName">Name of the file.</param>
    </member>
    <member name="P:PdfViewerNet.DocumentLoadedEventArgs.FileName">
      <summary>
            Gets or sets the name of the file.
            </summary>
    </member>
    <member name="T:PdfViewerNet.DocumentClosedEventArgs">
      <summary>
            Document Closed Event Arguments
            </summary>
    </member>
    <member name="M:PdfViewerNet.DocumentClosedEventArgs.#ctor(System.String)">
      <summary>
            Initializes a new instance of the DocumentClosedEventArgs class.
            </summary>
      <param name="closedFileName">Name of the closed file. Empty if it was byte[]</param>
    </member>
    <member name="P:PdfViewerNet.DocumentClosedEventArgs.ClosedFileName">
      <summary>
            Gets or sets the name of the closed file. Empty if it was byte[].
            </summary>
    </member>
    <member name="T:PdfViewerNet.FoundTextEventArgs">
      <summary>
            Found text event arguments
            </summary>
    </member>
    <member name="M:PdfViewerNet.FoundTextEventArgs.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
      <summary>
            Found text event args
            </summary>
      <param name="text">Search text</param>
      <param name="isCaseSensitive">Is case sensitive</param>
      <param name="wholeWord">Search only whole words </param>
      <param name="isNextDirection">Is next find</param>
      <param name="page">Page number</param>
      <param name="avoidDisplayingDialog">If true, it doesn't display dialog with message Text not found</param>
    </member>
    <member name="P:PdfViewerNet.FoundTextEventArgs.Text">
      <summary>
            Search text
            </summary>
    </member>
    <member name="P:PdfViewerNet.FoundTextEventArgs.IsNextDirection">
      <summary>
            IsNextDirection is true if Next operation was performed and false if Previous operations was performed.
            </summary>
    </member>
    <member name="P:PdfViewerNet.FoundTextEventArgs.Page">
      <summary>
            Page where searched text was found.
            </summary>
    </member>
    <member name="P:PdfViewerNet.FoundTextEventArgs.AvoidHighlight">
      <summary>
            It will not highlight found text.
            </summary>
    </member>
    <member name="P:PdfViewerNet.FoundTextEventArgs.IsCaseSensitive">
      <summary>
            Is case sensitive search
            </summary>
    </member>
    <member name="P:PdfViewerNet.FoundTextEventArgs.WholeWord">
      <summary>
            Is whole word search
            </summary>
    </member>
    <member name="T:PdfViewerNet.NotFoundTextEventArgs">
      <summary>
            Not found text event args
            </summary>
    </member>
    <member name="M:PdfViewerNet.NotFoundTextEventArgs.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            NotFoundTextEventArgs constructor
            </summary>
      <param name="text">Search text</param>
      <param name="isCaseSensitive">Is case sensitive</param>
      <param name="wholeWord">Search only whole words </param>
      <param name="isNextDirection">Is next find</param>
      <param name="avoidDisplayingDialog">If true, it doesn't display dialog with message Text not found</param>
    </member>
    <member name="P:PdfViewerNet.NotFoundTextEventArgs.Text">
      <summary>
            Search text
            </summary>
    </member>
    <member name="P:PdfViewerNet.NotFoundTextEventArgs.IsNextDirection">
      <summary>
            IsNextDirection is true if Next operation was performed and false if Previous operations was performed.
            </summary>
    </member>
    <member name="P:PdfViewerNet.NotFoundTextEventArgs.AvoidDisplayingDialog">
      <summary>
            If true it will not show dialog "Text not found"
            </summary>
    </member>
    <member name="P:PdfViewerNet.NotFoundTextEventArgs.IsCaseSensitive">
      <summary>
            Is case sensitive search
            </summary>
    </member>
    <member name="P:PdfViewerNet.NotFoundTextEventArgs.WholeWord">
      <summary>
            Is whole word search
            </summary>
    </member>
    <member name="T:PdfViewerNet.DocumentSavedEventArgs">
      <summary>
            Document Saved Event Arguments
            </summary>
    </member>
    <member name="M:PdfViewerNet.DocumentSavedEventArgs.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the DocumentSavedEventArgs class.
            </summary>
      <param name="fileName">Name of the original file name. Empty if it was byte[]</param>
      <param name="newFileName">Name of the new file name. It can be the same as fileName.</param>
    </member>
    <member name="P:PdfViewerNet.DocumentSavedEventArgs.FileName">
      <summary>
            Gets or sets the name of the file. Empty if it was byte[].
            </summary>
    </member>
    <member name="P:PdfViewerNet.DocumentSavedEventArgs.NewFileName">
      <summary>
            Gets or sets the new name of the file.
            </summary>
    </member>
    <member name="T:PdfViewerNet.CurrentPageEventArgs">
      <summary>
            Current Page Event Arguments
            </summary>
    </member>
    <member name="M:PdfViewerNet.CurrentPageEventArgs.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the CurrentPageEventArgs class.
            </summary>
      <param name="currentPage">The current page.</param>
    </member>
    <member name="P:PdfViewerNet.CurrentPageEventArgs.CurrentPage">
      <summary>
            Gets or sets the current page.
            </summary>
    </member>
  </members>
</doc>